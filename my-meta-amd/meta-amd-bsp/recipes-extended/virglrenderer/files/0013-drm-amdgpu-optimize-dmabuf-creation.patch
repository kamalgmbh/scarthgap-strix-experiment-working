From 152e8f9232b0f4cb81b7ecc7dd6cde13aeecc14c Mon Sep 17 00:00:00 2001
From: Pierre-Eric Pelloux-Prayer <pierre-eric.pelloux-prayer@amd.com>
Date: Wed, 31 Jan 2024 17:13:04 +0100
Subject: [PATCH 13/16] drm/amdgpu: optimize dmabuf creation

All dmabufs are created on demands rather than at allocation time to
avoid creating too many and hitting the open fd limit.

This works well generally but, in one case, creating transient buffers
regularly is wasteful: blob scanout.
To deal with this, we use the fact the radeonsi/radv will set BO
metadata before sharing them with a different process (eg: compositor).

Then, buffers with metadata are promoted to VIRGL_RESOURCE_FD_DMABUF
when amdgpu_renderer_export_opaque_handle is called.
---
 src/drm/amdgpu/amdgpu_renderer.c | 14 ++++++++++++++
 1 file changed, 14 insertions(+)

diff --git a/src/drm/amdgpu/amdgpu_renderer.c b/src/drm/amdgpu/amdgpu_renderer.c
index 44e579d4..b9d0c377 100644
--- a/src/drm/amdgpu/amdgpu_renderer.c
+++ b/src/drm/amdgpu/amdgpu_renderer.c
@@ -26,6 +26,7 @@
 #include "util/bitscan.h"
 #include "util/hash_table.h"
 #include "util/macros.h"
+#include "util/os_file.h"
 #include "util/u_atomic.h"
 #include "util/u_math.h"
 #include "pipe/p_state.h"
@@ -148,6 +149,8 @@ struct amdgpu_object {
 
    uint32_t flags;
    uint32_t size;
+
+   bool has_metadata : 1;
    bool exported   : 1;
    bool cpu_mapped : 1;
    bool detached   : 1; /* true if detach_resource was called */
@@ -454,6 +457,15 @@ amdgpu_renderer_export_opaque_handle(struct virgl_context *vctx,
             obj->res_id, ctx->debug_name);
    set_dmabuf_name(*out_fd, dmabufname);
 
+   if (res->fd_type == VIRGL_RESOURCE_OPAQUE_HANDLE && obj->has_metadata) {
+      /* Interpret set_metadata as lazy VIRTGPU_BLOB_FLAG_USE_SHAREABLE. */
+      res->fd = os_dupfd_cloexec(*out_fd);
+      res->fd_type = VIRGL_RESOURCE_FD_DMABUF;
+      print(2, "res_id: %d became VIRGL_RESOURCE_FD_DMABUF", res->res_id);
+   } else {
+      print(3, "res_id: %d one time export", res->res_id);
+   }
+
    return VIRGL_RESOURCE_FD_DMABUF;
 }
 
@@ -791,6 +803,8 @@ amdgpu_ccmd_set_metadata(struct amdgpu_context *ctx, const struct vdrm_ccmd_req
       print(0, "amdgpu_bo_set_metadata failed for res: %d", req->res_id);
    }
 
+   obj->has_metadata = true;
+
    return 0;
 }
 
-- 
2.17.1

