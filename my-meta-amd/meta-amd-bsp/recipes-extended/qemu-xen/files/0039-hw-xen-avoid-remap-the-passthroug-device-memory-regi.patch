From 694565634f1b2714579699c5b0f84948bf538b25 Mon Sep 17 00:00:00 2001
From: Prike Liang <Prike.Liang@amd.com>
Date: Tue, 8 Aug 2023 10:22:26 +0800
Subject: [PATCH 39/70] hw/xen: avoid remap the passthroug device memory region

When allow the guest os to write the memory decoding to the host device,
then the passthrough device memory decoding will be enabled and the memory
bar will be added to P2M table by xen before QEMU requires map the passthrough
device memory region. If the QEMU requires remap the already mapped bar will
result in permission denied error. So as this problem may need check the host
device memory decoding bit before QEMU requests the memory map system call.

Signed-off-by: Prike Liang <Prike.Liang@amd.com>
---
 hw/xen/xen_pt.c | 48 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 48 insertions(+)

diff --git a/hw/xen/xen_pt.c b/hw/xen/xen_pt.c
index 2d33d178ad..bcf39cbcfe 100644
--- a/hw/xen/xen_pt.c
+++ b/hw/xen/xen_pt.c
@@ -586,6 +586,43 @@ static void xen_pt_check_bar_overlap(PCIBus *bus, PCIDevice *d, void *opaque)
     }
 }
 
+static int xen_pt_region_memory_mapping_req(XenPCIPassthroughState *s,
+                                MemoryRegionSection *sec, bool adding)
+{
+    PCIDevice *d = &s->dev;
+    MemoryRegion *mr = sec->mr;
+    int bar = -1, ret;
+    uint16_t val;
+    bool map;
+
+    bar = xen_pt_bar_from_region(s, mr);
+    if (bar == -1 )
+            return -1;
+    if (d->io_regions[bar].type & PCI_BASE_ADDRESS_SPACE_IO)
+            return -1;
+
+    ret = xen_host_pci_get_word(&s->real_device, PCI_COMMAND, &val);
+    if (ret) {
+             XEN_PT_LOG(d, "Failed err :%i to read PCI_COMMAND in %s\n",
+                            errno, __func__);
+             return -1;
+    }
+
+    map = val & PCI_COMMAND_MEMORY;
+    if (adding) {
+            if (map)
+                return 1;
+    } else {
+
+            if (!map)
+                return 1;
+
+            xen_host_pci_set_word(&s->real_device, PCI_COMMAND, val & ~PCI_COMMAND_MEMORY);
+            return 1;
+    }
+    return ret;
+}
+
 static void xen_pt_region_update(XenPCIPassthroughState *s,
                                  MemoryRegionSection *sec, bool adding)
 {
@@ -640,6 +677,17 @@ static void xen_pt_region_update(XenPCIPassthroughState *s,
         pcibus_t machine_addr = s->bases[bar].access.maddr
             + sec->offset_within_region;
         pcibus_t size = int128_get64(sec->size);
+        int req;
+
+        req = xen_pt_region_memory_mapping_req(s, sec, adding);
+        if (req == 1) {
+            XEN_PT_LOG(d, "%s will skip the following bar:%d region \n"
+                      "addr: 0x%"FMT_PCIBUS" : 0x%"FMT_PCIBUS"\n",
+                      adding ? "create new" : "remove old", bar,
+                      guest_addr, machine_addr);
+            return;
+        }
+
         rc = xc_domain_memory_mapping(xen_xc, xen_domid,
                                       XEN_PFN(guest_addr + XC_PAGE_SIZE - 1),
                                       XEN_PFN(machine_addr + XC_PAGE_SIZE - 1),
-- 
2.17.1

