From 8fb317f89750278d7d43f8f3f07b210316608fe9 Mon Sep 17 00:00:00 2001
From: Lei Huang <Lei.Huang@amd.com>
Date: Fri, 16 Jun 2023 15:27:30 +0800
Subject: [PATCH 444/458] libsdl: Add dpms setting for guest S3 feature
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

[Why]
when guest os enter S3 modeï¼Œoutput should be closed.

[How]
add sdl_setdpms for set independently each of output

Jira ID: SWDEV-401890

Change-Id: I01348b39cd70341cde4ee23f900facb2bf87c0d7
Signed-off-by: Lei Huang <Lei.Huang@amd.com>
---
 include/SDL_video.h                   | 21 +++++++++++++++++++++
 src/dynapi/SDL2.exports               |  1 +
 src/dynapi/SDL_dynapi_overrides.h     |  1 +
 src/dynapi/SDL_dynapi_procs.h         |  1 +
 src/video/SDL_sysvideo.h              |  1 +
 src/video/SDL_video.c                 |  9 +++++++++
 src/video/wayland/SDL_waylandvideo.c  |  1 +
 src/video/wayland/SDL_waylandwindow.c | 14 ++++++++++++++
 src/video/wayland/SDL_waylandwindow.h |  1 +
 wayland-protocols/xdg-shell.xml       | 23 ++++++++++++++++++++++-
 10 files changed, 72 insertions(+), 1 deletion(-)

diff --git a/include/SDL_video.h b/include/SDL_video.h
index 99637f7f5..eb9a7b068 100644
--- a/include/SDL_video.h
+++ b/include/SDL_video.h
@@ -280,6 +280,14 @@ typedef enum
     SDL_GL_CONTEXT_RESET_LOSE_CONTEXT    = 0x0001
 } SDL_GLContextResetNotification;
 
+typedef enum
+{
+    SDL_DPMS_ON,
+    SDL_DPMS_STANDBY,
+    SDL_DPMS_SUSPEND,
+    SDL_DPMS_OFF
+} SDL_Dpms;
+
 /* Function prototypes */
 
 /**
@@ -890,6 +898,19 @@ extern DECLSPEC const char *SDLCALL SDL_GetWindowTitle(SDL_Window * window);
 extern DECLSPEC void SDLCALL SDL_SetWindowIcon(SDL_Window * window,
                                                SDL_Surface * icon);
 
+/**
+ * Set the power status for a display where a window is located.
+ * Note that all Windows on this display need to be off for display off to take effect
+ *
+ * \param window the window to change
+ * \param level an SDL_Dpms enum containing the power status for the display
+ *
+ * \since This function is available since SDL 2.0.0.
+ */
+extern DECLSPEC void SDLCALL SDL_SetDpms(SDL_Window * window,
+                                         SDL_Dpms level);
+
+
 /**
  * Associate an arbitrary named pointer with a window.
  *
diff --git a/src/dynapi/SDL2.exports b/src/dynapi/SDL2.exports
index 696e2be9d..e09ff4772 100644
--- a/src/dynapi/SDL2.exports
+++ b/src/dynapi/SDL2.exports
@@ -491,6 +491,7 @@
 ++'_SDL_SetWindowTitle'.'SDL2.dll'.'SDL_SetWindowTitle'
 ++'_SDL_GetWindowTitle'.'SDL2.dll'.'SDL_GetWindowTitle'
 ++'_SDL_SetWindowIcon'.'SDL2.dll'.'SDL_SetWindowIcon'
+++'_SDL_SetDpms'.'SDL2.dll'.'SDL_SetDpms'
 ++'_SDL_SetWindowData'.'SDL2.dll'.'SDL_SetWindowData'
 ++'_SDL_GetWindowData'.'SDL2.dll'.'SDL_GetWindowData'
 ++'_SDL_SetWindowPosition'.'SDL2.dll'.'SDL_SetWindowPosition'
diff --git a/src/dynapi/SDL_dynapi_overrides.h b/src/dynapi/SDL_dynapi_overrides.h
index 0b59a2174..cdfae4dc4 100644
--- a/src/dynapi/SDL_dynapi_overrides.h
+++ b/src/dynapi/SDL_dynapi_overrides.h
@@ -517,6 +517,7 @@
 #define SDL_SetWindowTitle SDL_SetWindowTitle_REAL
 #define SDL_GetWindowTitle SDL_GetWindowTitle_REAL
 #define SDL_SetWindowIcon SDL_SetWindowIcon_REAL
+#define SDL_SetDpms SDL_SetDpms_REAL
 #define SDL_SetWindowData SDL_SetWindowData_REAL
 #define SDL_GetWindowData SDL_GetWindowData_REAL
 #define SDL_SetWindowPosition SDL_SetWindowPosition_REAL
diff --git a/src/dynapi/SDL_dynapi_procs.h b/src/dynapi/SDL_dynapi_procs.h
index 8e1d36d06..97bbc55ce 100644
--- a/src/dynapi/SDL_dynapi_procs.h
+++ b/src/dynapi/SDL_dynapi_procs.h
@@ -550,6 +550,7 @@ SDL_DYNAPI_PROC(Uint32,SDL_GetWindowFlags,(SDL_Window *a),(a),return)
 SDL_DYNAPI_PROC(void,SDL_SetWindowTitle,(SDL_Window *a, const char *b),(a,b),)
 SDL_DYNAPI_PROC(const char*,SDL_GetWindowTitle,(SDL_Window *a),(a),return)
 SDL_DYNAPI_PROC(void,SDL_SetWindowIcon,(SDL_Window *a, SDL_Surface *b),(a,b),)
+SDL_DYNAPI_PROC(void,SDL_SetDpms,(SDL_Window *a, SDL_Dpms b),(a,b),)
 SDL_DYNAPI_PROC(void*,SDL_SetWindowData,(SDL_Window *a, const char *b, void *c),(a,b,c),return)
 SDL_DYNAPI_PROC(void*,SDL_GetWindowData,(SDL_Window *a, const char *b),(a,b),return)
 SDL_DYNAPI_PROC(void,SDL_SetWindowPosition,(SDL_Window *a, int b, int c),(a,b,c),)
diff --git a/src/video/SDL_sysvideo.h b/src/video/SDL_sysvideo.h
index d7a42cc64..86942e8fe 100644
--- a/src/video/SDL_sysvideo.h
+++ b/src/video/SDL_sysvideo.h
@@ -228,6 +228,7 @@ struct SDL_VideoDevice
     int (*CreateSDLWindowFrom)(_THIS, SDL_Window *window, const void *data);
     void (*SetWindowTitle)(_THIS, SDL_Window *window);
     void (*SetWindowIcon)(_THIS, SDL_Window *window, SDL_Surface *icon);
+    void (*SetDpms) (_THIS, SDL_Window * window, SDL_Dpms level);
     void (*SetWindowPosition)(_THIS, SDL_Window *window);
     void (*SetWindowSize)(_THIS, SDL_Window *window);
     void (*SetWindowMinimumSize)(_THIS, SDL_Window *window);
diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index 45dcd26a7..8e920a672 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -2056,6 +2056,15 @@ void SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon)
     }
 }
 
+void SDL_SetDpms(SDL_Window *window, SDL_Dpms level)
+{
+    CHECK_WINDOW_MAGIC(window,);
+
+    if (_this->SetDpms) {
+        _this->SetDpms(_this, window, level);
+    }
+}
+
 void *SDL_SetWindowData(SDL_Window *window, const char *name, void *userdata)
 {
     SDL_WindowUserData *prev, *data;
diff --git a/src/video/wayland/SDL_waylandvideo.c b/src/video/wayland/SDL_waylandvideo.c
index c10c186e0..f9a4268a6 100644
--- a/src/video/wayland/SDL_waylandvideo.c
+++ b/src/video/wayland/SDL_waylandvideo.c
@@ -245,6 +245,7 @@ static SDL_VideoDevice *Wayland_CreateDevice(void)
     device->SetWindowBordered = Wayland_SetWindowBordered;
     device->SetWindowResizable = Wayland_SetWindowResizable;
     device->SetWindowSize = Wayland_SetWindowSize;
+    device->SetDpms = Wayland_SetDpms;
     device->SetWindowMinimumSize = Wayland_SetWindowMinimumSize;
     device->SetWindowMaximumSize = Wayland_SetWindowMaximumSize;
     device->SetWindowModalFor = Wayland_SetWindowModalFor;
diff --git a/src/video/wayland/SDL_waylandwindow.c b/src/video/wayland/SDL_waylandwindow.c
index 754517b96..634b9aa26 100644
--- a/src/video/wayland/SDL_waylandwindow.c
+++ b/src/video/wayland/SDL_waylandwindow.c
@@ -2241,6 +2241,20 @@ void Wayland_SetWindowTitle(_THIS, SDL_Window *window)
     WAYLAND_wl_display_flush(viddata->display);
 }
 
+void Wayland_SetDpms(_THIS, SDL_Window * window, SDL_Dpms level)
+{
+    SDL_WindowData *wind = window->driverdata;
+    SDL_VideoData *viddata = _this->driverdata;
+
+    if (wind->shell_surface_type == WAYLAND_SURFACE_XDG_POPUP) {
+        return;
+    }
+
+    xdg_toplevel_set_dpms(wind->shell_surface.xdg.roleobj.toplevel, NULL, level);
+
+    WAYLAND_wl_display_flush(viddata->display);
+}
+
 void Wayland_SuspendScreenSaver(_THIS)
 {
     SDL_VideoData *data = (SDL_VideoData *)_this->driverdata;
diff --git a/src/video/wayland/SDL_waylandwindow.h b/src/video/wayland/SDL_waylandwindow.h
index f52c55a04..9b2707ef2 100644
--- a/src/video/wayland/SDL_waylandwindow.h
+++ b/src/video/wayland/SDL_waylandwindow.h
@@ -134,6 +134,7 @@ extern void Wayland_SetWindowBordered(_THIS, SDL_Window *window, SDL_bool border
 extern void Wayland_SetWindowResizable(_THIS, SDL_Window *window, SDL_bool resizable);
 extern int Wayland_CreateWindow(_THIS, SDL_Window *window);
 extern void Wayland_SetWindowSize(_THIS, SDL_Window *window);
+extern void Wayland_SetDpms(_THIS, SDL_Window * window, SDL_Dpms level);
 extern void Wayland_SetWindowMinimumSize(_THIS, SDL_Window *window);
 extern void Wayland_SetWindowMaximumSize(_THIS, SDL_Window *window);
 extern void Wayland_GetWindowSizeInPixels(_THIS, SDL_Window *window, int *w, int *h);
diff --git a/wayland-protocols/xdg-shell.xml b/wayland-protocols/xdg-shell.xml
index be64354da..368590bc6 100644
--- a/wayland-protocols/xdg-shell.xml
+++ b/wayland-protocols/xdg-shell.xml
@@ -569,7 +569,7 @@
 
   </interface>
 
-  <interface name="xdg_toplevel" version="3">
+  <interface name="xdg_toplevel" version="4">
     <description summary="toplevel surface">
       This interface defines an xdg_surface role which allows a surface to,
       among other things, set window-like properties such as maximize,
@@ -1058,6 +1058,27 @@
 	a dialog to ask the user to save their data, etc.
       </description>
     </event>
+
+    <!-- Version 4 additions -->
+    <enum name="dpms_level" since="4">
+      <description summary="manager dpms level">
+	These values are used to indicate which state user want to set.
+      </description>
+      <entry name="dpms_on" value="0"/>
+      <entry name="dpms_standby" value="1"/>
+      <entry name="dpms_suspend" value="2"/>
+      <entry name="dpms_off" value="3"/>
+    </enum>
+
+    <request name="set_dpms" since="4">
+      <description summary="set the output dpms level">
+	The native weston output power status is controlled internally by the desktop shell.
+	It will automatically enter the sleep state if it has not been drawn for a period of time.
+	Now, in order for the system to enter the S3 function, the user active sleep function needs to be added.
+      </description>
+      <arg name="output" type="object" interface="wl_output" allow-null="true"/>
+      <arg name="dpms_level" type="uint" enum="dpms_level" summary="which dpms level user want to use"/>
+    </request>
   </interface>
 
   <interface name="xdg_popup" version="3">
-- 
2.17.1

