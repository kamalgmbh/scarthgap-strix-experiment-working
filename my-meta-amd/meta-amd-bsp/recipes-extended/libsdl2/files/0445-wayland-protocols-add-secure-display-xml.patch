From 20b82fe3b3d6a675a66cfb0f6cda2a86ca227e04 Mon Sep 17 00:00:00 2001
From: Sophia Gong <lili.gong@amd.com>
Date: Tue, 13 Jun 2023 03:03:49 -0400
Subject: [PATCH 445/458] wayland-protocols: add secure display xml

Signed-off-by: Sophia Gong <lili.gong@amd.com>
Change-Id: Ia7120f2e76479e4a2b16d1b76c4767dbd9764625
---
 .../secure-display-unstable-v1.xml            | 104 ++++++++++++++++++
 1 file changed, 104 insertions(+)
 create mode 100644 wayland-protocols/secure-display-unstable-v1.xml

diff --git a/wayland-protocols/secure-display-unstable-v1.xml b/wayland-protocols/secure-display-unstable-v1.xml
new file mode 100644
index 000000000..eddb588cf
--- /dev/null
+++ b/wayland-protocols/secure-display-unstable-v1.xml
@@ -0,0 +1,104 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<protocol name="secure_display_unstable_v1">
+
+  <copyright>
+    Copyright Â© 2023 Advanced Micro Devices, Inc.
+
+    Permission is hereby granted, free of charge, to any person obtaining a
+    copy of this software and associated documentation files (the "Software"),
+    to deal in the Software without restriction, including without limitation
+    the rights to use, copy, modify, merge, publish, distribute, sublicense,
+    and/or sell copies of the Software, and to permit persons to whom the
+    Software is furnished to do so, subject to the following conditions:
+
+    The above copyright notice and this permission notice (including the next
+    paragraph) shall be included in all copies or substantial portions of the
+    Software.
+
+    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL
+    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+    DEALINGS IN THE SOFTWARE.
+  </copyright>
+
+  <interface name="secure_display_manager_v1" version="1">
+    <description summary="manage secure_display objects">
+      A global factory interface for secure_display objects.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the secure_display_manager object">
+	    Using this request a client can tell the server that it is not going to use
+	    the secure_display_manager object anymore.
+      </description>
+    </request>
+
+    <request name="create_secure_output">
+      <description summary="create a secure display crtc for a given wl_output">
+        Create a secure display crtc interface to handle roi request and crc comparison.
+      </description>
+      <arg name="id" type="new_id" interface="secure_display_crtc_v1"/>
+      <arg name="output" type="object" interface="wl_output"/>
+    </request>
+  </interface>
+
+  <interface name="secure_display_crtc_v1" version="1">
+    <description summary="secure display output crtc">
+      An interface to implement secure display on an assigned crtc. it will send roi request
+      to display driver and read back crc calculated by display controller.
+    </description>
+
+    <request name="destroy" type="destructor">
+      <description summary="destroy the secure display output">
+      </description>
+    </request>
+
+    <request name="set_roi">
+      <description summary="set roi region within the global compositor space">
+        it's to set region of interest of a display image.
+      </description>
+      <arg name="x_start" type="int" summary="start x of roi"/>
+      <arg name="y_start" type="int" summary="start y of roi"/>
+      <arg name="x_end" type="int" summary="end x of roi"/>
+      <arg name="y_end" type="int" summary="end y of roi"/>
+      <arg name="secure_display_enable" type="int" summary="enable secure display check"/>
+    </request>
+
+    <request name="get_crc">
+      <description summary="request to read crc calculated by display controller">
+      </description>
+    </request>
+
+    <event name="rgb_crc">
+      <description summary="crc value read back from display driver">
+      </description>
+      <arg name="r_crc" type="uint" summary="read back r crc value"/>
+      <arg name="g_crc" type="uint" summary="read back g crc value"/>
+      <arg name="b_crc" type="uint" summary="read back b crc value"/>
+      <arg name="frame_count" type="uint" summary="record frame number to generate crc"/>
+      <arg name="x_start" type="int" summary="read back crc relevant roi"/>
+      <arg name="y_start" type="int" summary="read back crc relevant roi"/>
+      <arg name="x_end" type="int" summary="read back crc relevant roi"/>
+      <arg name="y_end" type="int" summary="read back crc relevant roi"/>
+    </event>
+
+    <event name="crtc_out_fence">
+      <description summary="send crtc out fence to client">
+        out-fence is to synchronize between weston compositor and display driver about when
+        will the crc data be ready.
+
+        display driver creates an out-fence and sends the fence id to compositor. compositor
+        sends it to client application which then waits on this fence for notification.
+      </description>
+      <arg name="out_fence" type="int" summary="out fence for synchronization"/>
+    </event>
+
+    <event name="done">
+      <description summary="crc value is ready for security check">
+      </description>
+    </event>
+  </interface>
+</protocol>
-- 
2.17.1

