From 3f1fd5abff18c5b4d69d60e23284e39dbd6223ff Mon Sep 17 00:00:00 2001
From: Sam Lantinga <slouken@libsdl.org>
Date: Tue, 23 May 2023 10:59:03 -0700
Subject: [PATCH 392/458] Updated source to match SDL function prototype style

---
 src/SDL.c                                     |  19 +--
 src/SDL_assert.c                              |   4 +-
 src/SDL_dataqueue.c                           |   6 +-
 src/SDL_error.c                               |   6 +-
 src/SDL_hints.c                               |  19 +--
 src/SDL_log.c                                 |   3 +-
 src/atomic/SDL_atomic.c                       |  12 +-
 src/atomic/SDL_spinlock.c                     |   3 +-
 src/audio/SDL_audio.c                         |  33 ++--
 src/audio/SDL_audiocvt.c                      |   3 +-
 src/audio/SDL_wave.c                          |   3 +-
 src/audio/arts/SDL_artsaudio.c                |  36 ++--
 src/audio/esd/SDL_esdaudio.c                  |  36 ++--
 src/audio/fusionsound/SDL_fsaudio.c           |  33 ++--
 src/audio/nacl/SDL_naclaudio.c                |  13 +-
 src/audio/nas/SDL_nasaudio.c                  |  51 ++----
 src/audio/paudio/SDL_paudio.c                 |  24 +--
 src/audio/qsa/SDL_qsa_audio.c                 |  33 ++--
 src/audio/sun/SDL_sunaudio.c                  |  27 +--
 src/audio/winmm/SDL_winmm.c                   |  41 ++---
 src/core/freebsd/SDL_evdev_kbd_freebsd.c      |   3 +-
 src/core/linux/SDL_dbus.c                     |  24 +--
 src/core/linux/SDL_evdev_kbd.c                |   6 +-
 src/core/linux/SDL_fcitx.c                    |   9 +-
 src/core/linux/SDL_ibus.c                     |  14 +-
 src/core/linux/SDL_ime.c                      |   6 +-
 src/core/linux/SDL_udev.c                     |   6 +-
 src/core/windows/SDL_immdevice.c              |   3 +-
 src/core/windows/SDL_windows.c                |   9 +-
 src/cpuinfo/SDL_cpuinfo.c                     |  54 ++----
 src/dynapi/SDL_dynapi.c                       |   3 +-
 src/events/SDL_keyboard.c                     |  33 ++--
 src/events/SDL_keysym_to_scancode.c           |   3 +-
 src/events/SDL_mouse.c                        |  36 ++--
 src/events/SDL_touch.c                        |  15 +-
 src/file/SDL_rwops.c                          |  51 ++----
 src/file/n3ds/SDL_rwopsromfs.c                |  23 +--
 src/filesystem/android/SDL_sysfilesystem.c    |   6 +-
 src/filesystem/cocoa/SDL_sysfilesystem.m      |   6 +-
 src/filesystem/dummy/SDL_sysfilesystem.c      |   6 +-
 src/filesystem/emscripten/SDL_sysfilesystem.c |   6 +-
 src/filesystem/haiku/SDL_sysfilesystem.cc     |   6 +-
 src/filesystem/n3ds/SDL_sysfilesystem.c       |   6 +-
 src/filesystem/nacl/SDL_sysfilesystem.c       |   6 +-
 src/filesystem/os2/SDL_sysfilesystem.c        |   6 +-
 src/filesystem/ps2/SDL_sysfilesystem.c        |   6 +-
 src/filesystem/psp/SDL_sysfilesystem.c        |   6 +-
 src/filesystem/riscos/SDL_sysfilesystem.c     |   6 +-
 src/filesystem/unix/SDL_sysfilesystem.c       |   9 +-
 src/filesystem/vita/SDL_sysfilesystem.c       |   6 +-
 src/filesystem/windows/SDL_sysfilesystem.c    |  12 +-
 src/haptic/SDL_haptic.c                       |  15 +-
 src/haptic/android/SDL_syshaptic.c            |   3 +-
 src/haptic/darwin/SDL_syshaptic.c             |   3 +-
 src/haptic/dummy/SDL_syshaptic.c              |   3 +-
 src/haptic/linux/SDL_syshaptic.c              |   3 +-
 src/haptic/windows/SDL_windowshaptic.c        |   3 +-
 src/hidapi/SDL_hidapi.c                       |  27 +--
 src/joystick/darwin/SDL_iokitjoystick.c       |   6 +-
 src/joystick/hidapi/SDL_hidapi_switch.c       |   3 +-
 src/joystick/hidapi/SDL_hidapijoystick.c      |   9 +-
 src/joystick/iphoneos/SDL_mfijoystick.m       |   6 +-
 src/joystick/windows/SDL_dinputjoystick.c     |  12 +-
 src/joystick/windows/SDL_rawinputjoystick.c   |   9 +-
 src/joystick/windows/SDL_xinputjoystick.c     |   6 +-
 src/loadso/dlopen/SDL_sysloadso.c             |   6 +-
 src/loadso/dummy/SDL_sysloadso.c              |   6 +-
 src/loadso/os2/SDL_sysloadso.c                |   9 +-
 src/loadso/windows/SDL_sysloadso.c            |   6 +-
 src/locale/SDL_locale.c                       |   3 +-
 src/locale/haiku/SDL_syslocale.cc             |   3 +-
 src/main/haiku/SDL_BeApp.cc                   |   9 +-
 src/main/nacl/SDL_nacl_main.c                 |  21 ++-
 src/misc/haiku/SDL_sysurl.cc                  |   3 +-
 src/power/SDL_power.c                         |   3 +-
 src/power/android/SDL_syspower.c              |   3 +-
 src/power/emscripten/SDL_syspower.c           |   3 +-
 src/power/haiku/SDL_syspower.c                |   3 +-
 src/power/linux/SDL_syspower.c                |  14 +-
 src/power/macosx/SDL_syspower.c               |   3 +-
 src/power/n3ds/SDL_syspower.c                 |   9 +-
 src/power/psp/SDL_syspower.c                  |   4 +-
 src/power/uikit/SDL_syspower.m                |   3 +-
 src/power/vita/SDL_syspower.c                 |   4 +-
 src/power/windows/SDL_syspower.c              |   3 +-
 src/power/winrt/SDL_syspower.cpp              |   3 +-
 src/render/SDL_render.c                       |  64 +++----
 src/render/SDL_yuv_sw.c                       |   3 +-
 src/render/direct3d/SDL_render_d3d.c          |   6 +-
 src/render/direct3d11/SDL_render_d3d11.c      |   9 +-
 src/render/direct3d12/SDL_render_d3d12.c      |   6 +-
 src/render/metal/SDL_render_metal.m           | 130 +++++---------
 src/render/opengl/SDL_shaders_gl.c            |   3 +-
 src/render/psp/SDL_render_psp.c               |   3 +-
 src/render/software/SDL_render_sw.c           |   3 +-
 src/render/software/SDL_rotate.c              |   3 +-
 src/render/vitagxm/SDL_render_vita_gxm.c      |   3 +-
 .../vitagxm/SDL_render_vita_gxm_memory.c      |  12 +-
 .../vitagxm/SDL_render_vita_gxm_tools.c       |  12 +-
 src/stdlib/SDL_getenv.c                       |   9 +-
 src/stdlib/SDL_iconv.c                        |  13 +-
 src/stdlib/SDL_qsort.c                        |   6 +-
 src/stdlib/SDL_stdlib.c                       |   6 +-
 src/stdlib/SDL_string.c                       |  93 ++++------
 src/test/SDL_test_common.c                    |  12 +-
 src/test/SDL_test_fuzzer.c                    |  48 ++----
 src/test/SDL_test_harness.c                   |   3 +-
 src/test/SDL_test_log.c                       |   3 +-
 src/thread/SDL_thread.c                       |  33 ++--
 src/thread/generic/SDL_syscond.c              |   3 +-
 src/thread/generic/SDL_sysmutex.c             |   3 +-
 src/thread/generic/SDL_syssem.c               |  12 +-
 src/thread/generic/SDL_systhread.c            |   3 +-
 src/thread/generic/SDL_systls.c               |   3 +-
 src/thread/n3ds/SDL_syscond.c                 |   3 +-
 src/thread/n3ds/SDL_sysmutex.c                |   3 +-
 src/thread/n3ds/SDL_systhread.c               |   6 +-
 src/thread/ngage/SDL_sysmutex.cpp             |   6 +-
 src/thread/ngage/SDL_syssem.cpp               |   6 +-
 src/thread/ngage/SDL_systhread.cpp            |   3 +-
 src/thread/os2/SDL_sysmutex.c                 |  15 +-
 src/thread/os2/SDL_syssem.c                   |  21 +--
 src/thread/os2/SDL_systhread.c                |  18 +-
 src/thread/psp/SDL_syscond.c                  |   3 +-
 src/thread/psp/SDL_sysmutex.c                 |   3 +-
 src/thread/pthread/SDL_syscond.c              |   3 +-
 src/thread/pthread/SDL_sysmutex.c             |   3 +-
 src/thread/pthread/SDL_syssem.c               |   6 +-
 src/thread/pthread/SDL_systhread.c            |   3 +-
 src/thread/pthread/SDL_systls.c               |   3 +-
 src/thread/vita/SDL_syscond.c                 |   3 +-
 src/thread/vita/SDL_sysmutex.c                |   3 +-
 src/thread/windows/SDL_syscond_cv.c           |   3 +-
 src/thread/windows/SDL_sysmutex.c             |   3 +-
 src/thread/windows/SDL_syssem.c               |   6 +-
 src/thread/windows/SDL_systhread.c            |   3 +-
 src/thread/windows/SDL_systls.c               |   3 +-
 src/timer/SDL_timer.c                         |  15 +-
 src/timer/dummy/SDL_systimer.c                |   9 +-
 src/timer/haiku/SDL_systimer.c                |   9 +-
 src/timer/n3ds/SDL_systimer.c                 |   9 +-
 src/timer/ngage/SDL_systimer.cpp              |   9 +-
 src/timer/os2/SDL_systimer.c                  |  18 +-
 src/timer/ps2/SDL_systimer.c                  |   9 +-
 src/timer/psp/SDL_systimer.c                  |   9 +-
 src/timer/unix/SDL_systimer.c                 |   9 +-
 src/timer/vita/SDL_systimer.c                 |   9 +-
 src/timer/windows/SDL_systimer.c              |   9 +-
 src/video/SDL_blit_0.c                        |   3 +-
 src/video/SDL_blit_1.c                        |   3 +-
 src/video/SDL_blit_A.c                        |   3 +-
 src/video/SDL_blit_N.c                        |   9 +-
 src/video/SDL_bmp.c                           |   3 +-
 src/video/SDL_clipboard.c                     |  12 +-
 src/video/SDL_egl.c                           |   9 +-
 src/video/SDL_pixels.c                        |  31 ++--
 src/video/SDL_rect.c                          |   3 +-
 src/video/SDL_rect_impl.h                     |  10 +-
 src/video/SDL_shape.c                         |   9 +-
 src/video/SDL_stretch.c                       |   6 +-
 src/video/SDL_surface.c                       |  33 ++--
 src/video/SDL_video.c                         | 159 ++++++------------
 src/video/android/SDL_androidclipboard.c      |   3 +-
 src/video/android/SDL_androidgl.c             |   3 +-
 src/video/android/SDL_androidkeyboard.c       |   6 +-
 src/video/android/SDL_androidwindow.c         |   3 +-
 src/video/cocoa/SDL_cocoaclipboard.m          |  12 +-
 src/video/cocoa/SDL_cocoaevents.m             |  34 ++--
 src/video/cocoa/SDL_cocoakeyboard.m           |  29 ++--
 src/video/cocoa/SDL_cocoamessagebox.m         |   6 +-
 src/video/cocoa/SDL_cocoametalview.m          |  12 +-
 src/video/cocoa/SDL_cocoamodes.m              |  48 ++----
 src/video/cocoa/SDL_cocoamouse.m              |  54 ++----
 src/video/cocoa/SDL_cocoaopengl.m             |  32 ++--
 src/video/cocoa/SDL_cocoaopengles.m           |  18 +-
 src/video/cocoa/SDL_cocoashape.m              |  12 +-
 src/video/cocoa/SDL_cocoavideo.m              |  15 +-
 src/video/cocoa/SDL_cocoawindow.m             | 141 ++++++----------
 src/video/directfb/SDL_DirectFB_WM.c          |  27 +--
 src/video/directfb/SDL_DirectFB_dyn.c         |  14 +-
 src/video/directfb/SDL_DirectFB_events.c      |  46 ++---
 src/video/directfb/SDL_DirectFB_modes.c       |  29 +---
 src/video/directfb/SDL_DirectFB_mouse.c       |  41 ++---
 src/video/directfb/SDL_DirectFB_opengl.c      |  42 ++---
 src/video/directfb/SDL_DirectFB_render.c      |  82 +++------
 src/video/directfb/SDL_DirectFB_shape.c       |  12 +-
 src/video/directfb/SDL_DirectFB_video.c       |  21 +--
 src/video/directfb/SDL_DirectFB_window.c      |  54 ++----
 src/video/emscripten/SDL_emscriptenopengles.c |   8 +-
 src/video/haiku/SDL_bmessagebox.cc            |   3 +-
 src/video/kmsdrm/SDL_kmsdrmvideo.c            |  18 +-
 src/video/n3ds/SDL_n3dsswkb.c                 |   3 +-
 src/video/nacl/SDL_naclevents.c               |   3 +-
 src/video/nacl/SDL_naclopengles.c             |  49 +++---
 src/video/nacl/SDL_naclvideo.c                |  46 +++--
 src/video/nacl/SDL_naclwindow.c               |  17 +-
 src/video/offscreen/SDL_offscreenopengles.c   |   3 +-
 src/video/pandora/SDL_pandora.c               |  90 ++++------
 src/video/pandora/SDL_pandora_events.c        |   3 +-
 src/video/psp/SDL_pspgl.c                     |   6 +-
 src/video/psp/SDL_pspvideo.c                  |   3 +-
 src/video/qnx/gl.c                            |  30 ++--
 src/video/qnx/keyboard.c                      |   3 +-
 src/video/qnx/video.c                         |  36 ++--
 src/video/raspberry/SDL_rpivideo.c            |   3 +-
 src/video/riscos/SDL_riscosmodes.c            |   3 +-
 src/video/riscos/SDL_riscoswindow.c           |   3 +-
 src/video/uikit/SDL_uikitappdelegate.m        |   3 +-
 src/video/uikit/SDL_uikitclipboard.m          |  15 +-
 src/video/uikit/SDL_uikitevents.m             |   6 +-
 src/video/uikit/SDL_uikitmessagebox.m         |  15 +-
 src/video/uikit/SDL_uikitmetalview.m          |  18 +-
 src/video/uikit/SDL_uikitmodes.m              |  45 ++---
 src/video/uikit/SDL_uikitopengles.m           |  21 +--
 src/video/uikit/SDL_uikitvideo.m              |  21 +--
 src/video/uikit/SDL_uikitviewcontroller.m     |  18 +-
 src/video/uikit/SDL_uikitwindow.m             |  48 ++----
 src/video/vita/SDL_vitagl_pvr.c               |   6 +-
 src/video/vita/SDL_vitagles.c                 |   6 +-
 src/video/vita/SDL_vitagles_pvr.c             |   7 +-
 src/video/vita/SDL_vitavideo.c                |   3 +-
 src/video/vivante/SDL_vivantevideo.c          |   3 +-
 src/video/wayland/SDL_waylanddatamanager.c    |  11 +-
 src/video/wayland/SDL_waylandmouse.c          |   3 +-
 src/video/wayland/SDL_waylandwindow.c         |   6 +-
 src/video/windows/SDL_windowsclipboard.c      |   6 +-
 src/video/windows/SDL_windowskeyboard.c       |   6 +-
 src/video/windows/SDL_windowsopengl.c         |  14 +-
 src/video/windows/SDL_windowsopengles.c       |   3 +-
 src/video/windows/SDL_windowsshape.c          |   3 +-
 src/video/windows/SDL_windowsvideo.c          |   9 +-
 src/video/windows/SDL_windowswindow.c         |  15 +-
 src/video/winrt/SDL_winrtpointerinput.cpp     |   3 +-
 src/video/winrt/SDL_winrtvideo.cpp            |   3 +-
 src/video/x11/SDL_x11clipboard.c              |  12 +-
 src/video/x11/SDL_x11framebuffer.c            |   3 +-
 src/video/x11/SDL_x11keyboard.c               |   6 +-
 src/video/x11/SDL_x11modes.c                  |   3 +-
 src/video/x11/SDL_x11opengl.c                 |  12 +-
 src/video/x11/SDL_x11opengles.c               |   8 +-
 src/video/x11/SDL_x11shape.c                  |   3 +-
 src/video/x11/SDL_x11video.c                  |   3 +-
 src/video/x11/SDL_x11window.c                 |  21 +--
 243 files changed, 1218 insertions(+), 2364 deletions(-)

diff --git a/src/SDL.c b/src/SDL.c
index 10cbeaaa0..1be811151 100644
--- a/src/SDL.c
+++ b/src/SDL.c
@@ -442,8 +442,7 @@ void SDL_QuitSubSystem(Uint32 flags)
 #endif
 }
 
-Uint32
-SDL_WasInit(Uint32 flags)
+Uint32 SDL_WasInit(Uint32 flags)
 {
     int i;
     int num_subsystems = SDL_arraysize(SDL_SubsystemRefCount);
@@ -531,22 +530,19 @@ void SDL_GetVersion(SDL_version *ver)
 }
 
 /* Get the library source revision */
-const char *
-SDL_GetRevision(void)
+const char *SDL_GetRevision(void)
 {
     return SDL_REVISION;
 }
 
 /* Get the library source revision number */
-int
-SDL_GetRevisionNumber(void)
+int SDL_GetRevisionNumber(void)
 {
     return 0;  /* doesn't make sense without Mercurial. */
 }
 
 /* Get the name of the platform */
-const char *
-SDL_GetPlatform(void)
+const char *SDL_GetPlatform(void)
 {
 #if __AIX__
     return "AIX";
@@ -619,8 +615,7 @@ SDL_GetPlatform(void)
 #endif
 }
 
-SDL_bool
-SDL_IsTablet(void)
+SDL_bool SDL_IsTablet(void)
 {
 #if __ANDROID__
     extern SDL_bool SDL_IsAndroidTablet(void);
@@ -638,9 +633,7 @@ SDL_IsTablet(void)
 #if (!defined(HAVE_LIBC) || defined(__WATCOMC__)) && !defined(SDL_STATIC_LIB)
 /* Need to include DllMain() on Watcom C for some reason.. */
 
-BOOL APIENTRY
-_DllMainCRTStartup(HANDLE hModule,
-                   DWORD ul_reason_for_call, LPVOID lpReserved)
+BOOL APIENTRY _DllMainCRTStartup(HANDLE hModule, DWORD ul_reason_for_call, LPVOID lpReserved)
 {
     switch (ul_reason_for_call) {
     case DLL_PROCESS_ATTACH:
diff --git a/src/SDL_assert.c b/src/SDL_assert.c
index 85a7090c4..dc5a220ab 100644
--- a/src/SDL_assert.c
+++ b/src/SDL_assert.c
@@ -326,9 +326,7 @@ static SDL_assert_state SDLCALL SDL_PromptAssertion(const SDL_assert_data *data,
     return state;
 }
 
-SDL_assert_state
-SDL_ReportAssertion(SDL_assert_data *data, const char *func, const char *file,
-                    int line)
+SDL_assert_state SDL_ReportAssertion(SDL_assert_data *data, const char *func, const char *file, int line)
 {
     SDL_assert_state state = SDL_ASSERTION_IGNORE;
     static int assertion_running = 0;
diff --git a/src/SDL_dataqueue.c b/src/SDL_dataqueue.c
index 4f63fcad9..2019c3083 100644
--- a/src/SDL_dataqueue.c
+++ b/src/SDL_dataqueue.c
@@ -50,8 +50,7 @@ static void SDL_FreeDataQueueList(SDL_DataQueuePacket *packet)
     }
 }
 
-SDL_DataQueue *
-SDL_NewDataQueue(const size_t _packetlen, const size_t initialslack)
+SDL_DataQueue *SDL_NewDataQueue(const size_t _packetlen, const size_t initialslack)
 {
     SDL_DataQueue *queue = (SDL_DataQueue *)SDL_calloc(1, sizeof(SDL_DataQueue));
 
@@ -316,8 +315,7 @@ SDL_CountDataQueue(SDL_DataQueue *queue)
     return retval;
 }
 
-SDL_mutex *
-SDL_GetDataQueueMutex(SDL_DataQueue *queue)
+SDL_mutex *SDL_GetDataQueueMutex(SDL_DataQueue *queue)
 {
     return queue ? queue->lock : NULL;
 }
diff --git a/src/SDL_error.c b/src/SDL_error.c
index 0c31aafc7..501d39584 100644
--- a/src/SDL_error.c
+++ b/src/SDL_error.c
@@ -61,8 +61,7 @@ int SDL_SetError(SDL_PRINTF_FORMAT_STRING const char *fmt, ...)
 }
 
 /* Available for backwards compatibility */
-const char *
-SDL_GetError(void)
+const char *SDL_GetError(void)
 {
     const SDL_error *error = SDL_GetErrBuf();
     return error->error ? error->str : "";
@@ -108,8 +107,7 @@ int main(int argc, char *argv[])
 }
 #endif
 
-char *
-SDL_GetErrorMsg(char *errstr, int maxlen)
+char *SDL_GetErrorMsg(char *errstr, int maxlen)
 {
     const SDL_error *error = SDL_GetErrBuf();
 
diff --git a/src/SDL_hints.c b/src/SDL_hints.c
index aeee736d6..ceec0d5fb 100644
--- a/src/SDL_hints.c
+++ b/src/SDL_hints.c
@@ -45,9 +45,7 @@ typedef struct SDL_Hint
 
 static SDL_Hint *SDL_hints;
 
-SDL_bool
-SDL_SetHintWithPriority(const char *name, const char *value,
-                        SDL_HintPriority priority)
+SDL_bool SDL_SetHintWithPriority(const char *name, const char *value, SDL_HintPriority priority)
 {
     const char *env;
     SDL_Hint *hint;
@@ -97,8 +95,7 @@ SDL_SetHintWithPriority(const char *name, const char *value,
     return SDL_TRUE;
 }
 
-SDL_bool
-SDL_ResetHint(const char *name)
+SDL_bool SDL_ResetHint(const char *name)
 {
     const char *env;
     SDL_Hint *hint;
@@ -154,14 +151,12 @@ void SDL_ResetHints(void)
     }
 }
 
-SDL_bool
-SDL_SetHint(const char *name, const char *value)
+SDL_bool SDL_SetHint(const char *name, const char *value)
 {
     return SDL_SetHintWithPriority(name, value, SDL_HINT_NORMAL);
 }
 
-const char *
-SDL_GetHint(const char *name)
+const char *SDL_GetHint(const char *name)
 {
     const char *env;
     SDL_Hint *hint;
@@ -178,8 +173,7 @@ SDL_GetHint(const char *name)
     return env;
 }
 
-SDL_bool
-SDL_GetStringBoolean(const char *value, SDL_bool default_value)
+SDL_bool SDL_GetStringBoolean(const char *value, SDL_bool default_value)
 {
     if (value == NULL || !*value) {
         return default_value;
@@ -190,8 +184,7 @@ SDL_GetStringBoolean(const char *value, SDL_bool default_value)
     return SDL_TRUE;
 }
 
-SDL_bool
-SDL_GetHintBoolean(const char *name, SDL_bool default_value)
+SDL_bool SDL_GetHintBoolean(const char *name, SDL_bool default_value)
 {
     const char *hint = SDL_GetHint(name);
     return SDL_GetStringBoolean(hint, default_value);
diff --git a/src/SDL_log.c b/src/SDL_log.c
index 2dda72d5b..ab6e7c2cb 100644
--- a/src/SDL_log.c
+++ b/src/SDL_log.c
@@ -154,8 +154,7 @@ void SDL_LogSetPriority(int category, SDL_LogPriority priority)
     }
 }
 
-SDL_LogPriority
-SDL_LogGetPriority(int category)
+SDL_LogPriority SDL_LogGetPriority(int category)
 {
     SDL_LogLevel *entry;
 
diff --git a/src/atomic/SDL_atomic.c b/src/atomic/SDL_atomic.c
index 6a9a19bf5..4e10d52db 100644
--- a/src/atomic/SDL_atomic.c
+++ b/src/atomic/SDL_atomic.c
@@ -124,8 +124,7 @@ static SDL_INLINE void leaveLock(void *a)
 }
 #endif
 
-SDL_bool
-SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval)
+SDL_bool SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval)
 {
 #ifdef HAVE_MSC_ATOMICS
     SDL_COMPILE_TIME_ASSERT(atomic_cas, sizeof(long) == sizeof(a->value));
@@ -154,8 +153,7 @@ SDL_AtomicCAS(SDL_atomic_t *a, int oldval, int newval)
 #endif
 }
 
-SDL_bool
-SDL_AtomicCASPtr(void **a, void *oldval, void *newval)
+SDL_bool SDL_AtomicCASPtr(void **a, void *oldval, void *newval)
 {
 #if defined(HAVE_MSC_ATOMICS)
     return _InterlockedCompareExchangePointer(a, newval, oldval) == oldval;
@@ -205,8 +203,7 @@ int SDL_AtomicSet(SDL_atomic_t *a, int v)
 #endif
 }
 
-void *
-SDL_AtomicSetPtr(void **a, void *v)
+void *SDL_AtomicSetPtr(void **a, void *v)
 {
 #if defined(HAVE_MSC_ATOMICS)
     return _InterlockedExchangePointer(a, v);
@@ -272,8 +269,7 @@ int SDL_AtomicGet(SDL_atomic_t *a)
 #endif
 }
 
-void *
-SDL_AtomicGetPtr(void **a)
+void *SDL_AtomicGetPtr(void **a)
 {
 #ifdef HAVE_ATOMIC_LOAD_N
     return __atomic_load_n(a, __ATOMIC_SEQ_CST);
diff --git a/src/atomic/SDL_spinlock.c b/src/atomic/SDL_spinlock.c
index 8905b67c8..9fd3e6167 100644
--- a/src/atomic/SDL_spinlock.c
+++ b/src/atomic/SDL_spinlock.c
@@ -61,8 +61,7 @@ extern __inline int _SDL_xchg_watcom(volatile int *a, int v);
 /* *INDENT-ON* */ /* clang-format on */
 
 /* This function is where all the magic happens... */
-SDL_bool
-SDL_AtomicTryLock(SDL_SpinLock *lock)
+SDL_bool SDL_AtomicTryLock(SDL_SpinLock *lock)
 {
 #if SDL_ATOMIC_DISABLED
     /* Terrible terrible damage */
diff --git a/src/audio/SDL_audio.c b/src/audio/SDL_audio.c
index 0a34d4f7c..60242e60a 100644
--- a/src/audio/SDL_audio.c
+++ b/src/audio/SDL_audio.c
@@ -603,8 +603,7 @@ int SDL_QueueAudio(SDL_AudioDeviceID devid, const void *data, Uint32 len)
     return rc;
 }
 
-Uint32
-SDL_DequeueAudio(SDL_AudioDeviceID devid, void *data, Uint32 len)
+Uint32 SDL_DequeueAudio(SDL_AudioDeviceID devid, void *data, Uint32 len)
 {
     SDL_AudioDevice *device = get_audio_device(devid);
     Uint32 rc;
@@ -622,8 +621,7 @@ SDL_DequeueAudio(SDL_AudioDeviceID devid, void *data, Uint32 len)
     return rc;
 }
 
-Uint32
-SDL_GetQueuedAudioSize(SDL_AudioDeviceID devid)
+Uint32 SDL_GetQueuedAudioSize(SDL_AudioDeviceID devid)
 {
     Uint32 retval = 0;
     SDL_AudioDevice *device = get_audio_device(devid);
@@ -904,8 +902,7 @@ int SDL_GetNumAudioDrivers(void)
     return SDL_arraysize(bootstrap) - 1;
 }
 
-const char *
-SDL_GetAudioDriver(int index)
+const char *SDL_GetAudioDriver(int index)
 {
     if (index >= 0 && index < SDL_GetNumAudioDrivers()) {
         return bootstrap[index]->name;
@@ -1012,8 +1009,7 @@ int SDL_AudioInit(const char *driver_name)
 /*
  * Get the current audio driver name
  */
-const char *
-SDL_GetCurrentAudioDriver()
+const char *SDL_GetCurrentAudioDriver()
 {
     return current_audio.name;
 }
@@ -1073,8 +1069,7 @@ int SDL_GetNumAudioDevices(int iscapture)
     return retval;
 }
 
-const char *
-SDL_GetAudioDeviceName(int index, int iscapture)
+const char *SDL_GetAudioDeviceName(int index, int iscapture)
 {
     SDL_AudioDeviceItem *item;
     int i;
@@ -1191,8 +1186,7 @@ static void close_audio_device(SDL_AudioDevice *device)
     SDL_free(device);
 }
 
-static Uint16
-GetDefaultSamplesFromFreq(int freq)
+static Uint16 GetDefaultSamplesFromFreq(int freq)
 {
     /* Pick a default of ~46 ms at desired frequency */
     /* !!! FIXME: remove this when the non-Po2 resampling is in. */
@@ -1560,8 +1554,7 @@ int SDL_OpenAudio(SDL_AudioSpec *desired, SDL_AudioSpec *obtained)
     return (id == 0) ? -1 : 0;
 }
 
-SDL_AudioDeviceID
-SDL_OpenAudioDevice(const char *device, int iscapture,
+SDL_AudioDeviceID SDL_OpenAudioDevice(const char *device, int iscapture,
                     const SDL_AudioSpec *desired, SDL_AudioSpec *obtained,
                     int allowed_changes)
 {
@@ -1569,8 +1562,7 @@ SDL_OpenAudioDevice(const char *device, int iscapture,
                              allowed_changes, 2);
 }
 
-SDL_AudioStatus
-SDL_GetAudioDeviceStatus(SDL_AudioDeviceID devid)
+SDL_AudioStatus SDL_GetAudioDeviceStatus(SDL_AudioDeviceID devid)
 {
     SDL_AudioDevice *device = get_audio_device(devid);
     SDL_AudioStatus status = SDL_AUDIO_STOPPED;
@@ -1584,8 +1576,7 @@ SDL_GetAudioDeviceStatus(SDL_AudioDeviceID devid)
     return status;
 }
 
-SDL_AudioStatus
-SDL_GetAudioStatus(void)
+SDL_AudioStatus SDL_GetAudioStatus(void)
 {
     return SDL_GetAudioDeviceStatus(1);
 }
@@ -1697,8 +1688,7 @@ static SDL_AudioFormat format_list[NUM_FORMATS][NUM_FORMATS] = {
       AUDIO_S16LSB, AUDIO_U16MSB, AUDIO_U16LSB, AUDIO_U8, AUDIO_S8 },
 };
 
-SDL_AudioFormat
-SDL_FirstAudioFormat(SDL_AudioFormat format)
+SDL_AudioFormat SDL_FirstAudioFormat(SDL_AudioFormat format)
 {
     for (format_idx = 0; format_idx < NUM_FORMATS; ++format_idx) {
         if (format_list[format_idx][0] == format) {
@@ -1709,8 +1699,7 @@ SDL_FirstAudioFormat(SDL_AudioFormat format)
     return SDL_NextAudioFormat();
 }
 
-SDL_AudioFormat
-SDL_NextAudioFormat(void)
+SDL_AudioFormat SDL_NextAudioFormat(void)
 {
     if ((format_idx == NUM_FORMATS) || (format_idx_sub == NUM_FORMATS)) {
         return 0;
diff --git a/src/audio/SDL_audiocvt.c b/src/audio/SDL_audiocvt.c
index 01f3a5575..ed4333eca 100644
--- a/src/audio/SDL_audiocvt.c
+++ b/src/audio/SDL_audiocvt.c
@@ -1005,8 +1005,7 @@ static void SDL_CleanupAudioStreamResampler(SDL_AudioStream *stream)
     SDL_free(stream->resampler_state);
 }
 
-SDL_AudioStream *
-SDL_NewAudioStream(const SDL_AudioFormat src_format,
+SDL_AudioStream *SDL_NewAudioStream(const SDL_AudioFormat src_format,
                    const Uint8 src_channels,
                    const int src_rate,
                    const SDL_AudioFormat dst_format,
diff --git a/src/audio/SDL_wave.c b/src/audio/SDL_wave.c
index 6959c56fc..209a577c0 100644
--- a/src/audio/SDL_wave.c
+++ b/src/audio/SDL_wave.c
@@ -2077,8 +2077,7 @@ static int WaveLoad(SDL_RWops *src, WaveFile *file, SDL_AudioSpec *spec, Uint8 *
     return 0;
 }
 
-SDL_AudioSpec *
-SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len)
+SDL_AudioSpec *SDL_LoadWAV_RW(SDL_RWops *src, int freesrc, SDL_AudioSpec *spec, Uint8 **audio_buf, Uint32 *audio_len)
 {
     int result;
     WaveFile file;
diff --git a/src/audio/arts/SDL_artsaudio.c b/src/audio/arts/SDL_artsaudio.c
index 38e11904a..ea4f3119b 100644
--- a/src/audio/arts/SDL_artsaudio.c
+++ b/src/audio/arts/SDL_artsaudio.c
@@ -86,8 +86,7 @@ static struct
 
 #undef SDL_ARTS_SYM
 
-static void
-UnloadARTSLibrary()
+static void UnloadARTSLibrary()
 {
     if (arts_handle != NULL) {
         SDL_UnloadObject(arts_handle);
@@ -95,8 +94,7 @@ UnloadARTSLibrary()
     }
 }
 
-static int
-LoadARTSLibrary(void)
+static int LoadARTSLibrary(void)
 {
     int i, retval = -1;
 
@@ -121,14 +119,12 @@ LoadARTSLibrary(void)
 
 #else
 
-static void
-UnloadARTSLibrary()
+static void UnloadARTSLibrary()
 {
     return;
 }
 
-static int
-LoadARTSLibrary(void)
+static int LoadARTSLibrary(void)
 {
     return 0;
 }
@@ -136,8 +132,7 @@ LoadARTSLibrary(void)
 #endif /* SDL_AUDIO_DRIVER_ARTS_DYNAMIC */
 
 /* This function waits until it is possible to write a full sound buffer */
-static void
-ARTS_WaitDevice(_THIS)
+static void ARTS_WaitDevice(_THIS)
 {
     Sint32 ticks;
 
@@ -163,8 +158,7 @@ ARTS_WaitDevice(_THIS)
     }
 }
 
-static void
-ARTS_PlayDevice(_THIS)
+static void ARTS_PlayDevice(_THIS)
 {
     /* Write the audio data */
     int written = SDL_NAME(arts_write) (this->hidden->stream,
@@ -185,15 +179,13 @@ ARTS_PlayDevice(_THIS)
 #endif
 }
 
-static Uint8 *
-ARTS_GetDeviceBuf(_THIS)
+static Uint8 *ARTS_GetDeviceBuf(_THIS)
 {
     return (this->hidden->mixbuf);
 }
 
 
-static void
-ARTS_CloseDevice(_THIS)
+static void ARTS_CloseDevice(_THIS)
 {
     if (this->hidden->stream) {
         SDL_NAME(arts_close_stream) (this->hidden->stream);
@@ -203,8 +195,7 @@ ARTS_CloseDevice(_THIS)
     SDL_free(this->hidden);
 }
 
-static int
-ARTS_Suspend(void)
+static int ARTS_Suspend(void)
 {
     const Uint32 abortms = SDL_GetTicks() + 3000; /* give up after 3 secs */
     while ( (!SDL_NAME(arts_suspended)()) && !SDL_TICKS_PASSED(SDL_GetTicks(), abortms) ) {
@@ -215,8 +206,7 @@ ARTS_Suspend(void)
     return SDL_NAME(arts_suspended)();
 }
 
-static int
-ARTS_OpenDevice(_THIS, const char *devname)
+static int ARTS_OpenDevice(_THIS, const char *devname)
 {
     int rc = 0;
     int bits, frag_spec = 0;
@@ -304,15 +294,13 @@ ARTS_OpenDevice(_THIS, const char *devname)
 }
 
 
-static void
-ARTS_Deinitialize(void)
+static void ARTS_Deinitialize(void)
 {
     UnloadARTSLibrary();
 }
 
 
-static SDL_bool
-ARTS_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool ARTS_Init(SDL_AudioDriverImpl * impl)
 {
     if (LoadARTSLibrary() < 0) {
         return SDL_FALSE;
diff --git a/src/audio/esd/SDL_esdaudio.c b/src/audio/esd/SDL_esdaudio.c
index 0f49b09d6..800caaf0b 100644
--- a/src/audio/esd/SDL_esdaudio.c
+++ b/src/audio/esd/SDL_esdaudio.c
@@ -64,8 +64,7 @@ static struct
 
 #undef SDL_ESD_SYM
 
-static void
-UnloadESDLibrary()
+static void UnloadESDLibrary()
 {
     if (esd_handle != NULL) {
         SDL_UnloadObject(esd_handle);
@@ -73,8 +72,7 @@ UnloadESDLibrary()
     }
 }
 
-static int
-LoadESDLibrary(void)
+static int LoadESDLibrary(void)
 {
     int i, retval = -1;
 
@@ -98,14 +96,12 @@ LoadESDLibrary(void)
 
 #else
 
-static void
-UnloadESDLibrary()
+static void UnloadESDLibrary()
 {
     return;
 }
 
-static int
-LoadESDLibrary(void)
+static int LoadESDLibrary(void)
 {
     return 0;
 }
@@ -114,8 +110,7 @@ LoadESDLibrary(void)
 
 
 /* This function waits until it is possible to write a full sound buffer */
-static void
-ESD_WaitDevice(_THIS)
+static void ESD_WaitDevice(_THIS)
 {
     Sint32 ticks;
 
@@ -140,8 +135,7 @@ ESD_WaitDevice(_THIS)
     }
 }
 
-static void
-ESD_PlayDevice(_THIS)
+static void ESD_PlayDevice(_THIS)
 {
     int written = 0;
 
@@ -164,14 +158,12 @@ ESD_PlayDevice(_THIS)
     }
 }
 
-static Uint8 *
-ESD_GetDeviceBuf(_THIS)
+static Uint8 *ESD_GetDeviceBuf(_THIS)
 {
     return (this->hidden->mixbuf);
 }
 
-static void
-ESD_CloseDevice(_THIS)
+static void ESD_CloseDevice(_THIS)
 {
     if (this->hidden->audio_fd >= 0) {
         SDL_NAME(esd_close) (this->hidden->audio_fd);
@@ -181,8 +173,7 @@ ESD_CloseDevice(_THIS)
 }
 
 /* Try to get the name of the program */
-static char *
-get_progname(void)
+static char *get_progname(void)
 {
     char *progname = NULL;
 #ifdef __LINUX__
@@ -207,8 +198,7 @@ get_progname(void)
 }
 
 
-static int
-ESD_OpenDevice(_THIS, const char *devname)
+static int ESD_OpenDevice(_THIS, const char *devname)
 {
     esd_format_t format = (ESD_STREAM | ESD_PLAY);
     SDL_AudioFormat test_format = 0;
@@ -286,14 +276,12 @@ ESD_OpenDevice(_THIS, const char *devname)
     return 0;
 }
 
-static void
-ESD_Deinitialize(void)
+static void ESD_Deinitialize(void)
 {
     UnloadESDLibrary();
 }
 
-static SDL_bool
-ESD_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool ESD_Init(SDL_AudioDriverImpl * impl)
 {
     if (LoadESDLibrary() < 0) {
         return SDL_FALSE;
diff --git a/src/audio/fusionsound/SDL_fsaudio.c b/src/audio/fusionsound/SDL_fsaudio.c
index dccf1f864..f79ab22f7 100644
--- a/src/audio/fusionsound/SDL_fsaudio.c
+++ b/src/audio/fusionsound/SDL_fsaudio.c
@@ -77,8 +77,7 @@ static struct
 
 #undef SDL_FS_SYM
 
-static void
-UnloadFusionSoundLibrary()
+static void UnloadFusionSoundLibrary()
 {
     if (fs_handle != NULL) {
         SDL_UnloadObject(fs_handle);
@@ -86,8 +85,7 @@ UnloadFusionSoundLibrary()
     }
 }
 
-static int
-LoadFusionSoundLibrary(void)
+static int LoadFusionSoundLibrary(void)
 {
     int i, retval = -1;
 
@@ -112,14 +110,12 @@ LoadFusionSoundLibrary(void)
 
 #else
 
-static void
-UnloadFusionSoundLibrary()
+static void UnloadFusionSoundLibrary()
 {
     return;
 }
 
-static int
-LoadFusionSoundLibrary(void)
+static int LoadFusionSoundLibrary(void)
 {
     return 0;
 }
@@ -127,15 +123,13 @@ LoadFusionSoundLibrary(void)
 #endif /* SDL_AUDIO_DRIVER_FUSIONSOUND_DYNAMIC */
 
 /* This function waits until it is possible to write a full sound buffer */
-static void
-SDL_FS_WaitDevice(_THIS)
+static void SDL_FS_WaitDevice(_THIS)
 {
     this->hidden->stream->Wait(this->hidden->stream,
                                this->hidden->mixsamples);
 }
 
-static void
-SDL_FS_PlayDevice(_THIS)
+static void SDL_FS_PlayDevice(_THIS)
 {
     DirectResult ret;
 
@@ -152,15 +146,13 @@ SDL_FS_PlayDevice(_THIS)
 }
 
 
-static Uint8 *
-SDL_FS_GetDeviceBuf(_THIS)
+static Uint8 *SDL_FS_GetDeviceBuf(_THIS)
 {
     return (this->hidden->mixbuf);
 }
 
 
-static void
-SDL_FS_CloseDevice(_THIS)
+static void SDL_FS_CloseDevice(_THIS)
 {
     if (this->hidden->stream) {
         this->hidden->stream->Release(this->hidden->stream);
@@ -173,8 +165,7 @@ SDL_FS_CloseDevice(_THIS)
 }
 
 
-static int
-SDL_FS_OpenDevice(_THIS, const char *devname)
+static int SDL_FS_OpenDevice(_THIS, const char *devname)
 {
     int bytes;
     SDL_AudioFormat test_format;
@@ -269,15 +260,13 @@ SDL_FS_OpenDevice(_THIS, const char *devname)
 }
 
 
-static void
-SDL_FS_Deinitialize(void)
+static void SDL_FS_Deinitialize(void)
 {
     UnloadFusionSoundLibrary();
 }
 
 
-static SDL_bool
-SDL_FS_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool SDL_FS_Init(SDL_AudioDriverImpl * impl)
 {
     if (LoadFusionSoundLibrary() < 0) {
         return SDL_FALSE;
diff --git a/src/audio/nacl/SDL_naclaudio.c b/src/audio/nacl/SDL_naclaudio.c
index e18f762ee..cdb01bcb7 100644
--- a/src/audio/nacl/SDL_naclaudio.c
+++ b/src/audio/nacl/SDL_naclaudio.c
@@ -45,7 +45,8 @@
 static void nacl_audio_callback(void* samples, uint32_t buffer_size, PP_TimeDelta latency, void* data);
 
 /* FIXME: Make use of latency if needed */
-static void nacl_audio_callback(void* stream, uint32_t buffer_size, PP_TimeDelta latency, void* data) {
+static void nacl_audio_callback(void* stream, uint32_t buffer_size, PP_TimeDelta latency, void* data)
+{
     const int len = (int) buffer_size;
     SDL_AudioDevice* _this = (SDL_AudioDevice*) data;
     SDL_AudioCallback callback = _this->callbackspec.callback;
@@ -85,7 +86,8 @@ static void nacl_audio_callback(void* stream, uint32_t buffer_size, PP_TimeDelta
     SDL_UnlockMutex(_this->mixer_lock);
 }
 
-static void NACLAUDIO_CloseDevice(SDL_AudioDevice *device) {
+static void NACLAUDIO_CloseDevice(SDL_AudioDevice *device)
+{
     const PPB_Core *core = PSInterfaceCore();
     const PPB_Audio *ppb_audio = PSInterfaceAudio();
     SDL_PrivateAudioData *hidden = (SDL_PrivateAudioData *) device->hidden;
@@ -94,8 +96,8 @@ static void NACLAUDIO_CloseDevice(SDL_AudioDevice *device) {
     core->ReleaseResource(hidden->audio);
 }
 
-static int
-NACLAUDIO_OpenDevice(_THIS, const char *devname) {
+static int NACLAUDIO_OpenDevice(_THIS, const char *devname)
+{
     PP_Instance instance = PSGetInstanceId();
     const PPB_Audio *ppb_audio = PSInterfaceAudio();
     const PPB_AudioConfig *ppb_audiocfg = PSInterfaceAudioConfig();
@@ -128,8 +130,7 @@ NACLAUDIO_OpenDevice(_THIS, const char *devname) {
     return 0;
 }
 
-static SDL_bool
-NACLAUDIO_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool NACLAUDIO_Init(SDL_AudioDriverImpl * impl)
 {
     if (PSGetInstanceId() == 0) {
         return SDL_FALSE;
diff --git a/src/audio/nas/SDL_nasaudio.c b/src/audio/nas/SDL_nasaudio.c
index 0339ea855..d6807203d 100644
--- a/src/audio/nas/SDL_nasaudio.c
+++ b/src/audio/nas/SDL_nasaudio.c
@@ -56,8 +56,7 @@ static AuEventHandlerRec *(*NAS_AuRegisterEventHandler)
 static const char *nas_library = SDL_AUDIO_DRIVER_NAS_DYNAMIC;
 static void *nas_handle = NULL;
 
-static int
-load_nas_sym(const char *fn, void **addr)
+static int load_nas_sym(const char *fn, void **addr)
 {
     *addr = SDL_LoadFunction(nas_handle, fn);
     if (*addr == NULL) {
@@ -73,8 +72,7 @@ load_nas_sym(const char *fn, void **addr)
 #define SDL_NAS_SYM(x) NAS_##x = x
 #endif
 
-static int
-load_nas_syms(void)
+static int load_nas_syms(void)
 {
     SDL_NAS_SYM(AuCloseServer);
     SDL_NAS_SYM(AuNextEvent);
@@ -94,8 +92,7 @@ load_nas_syms(void)
 
 #ifdef SDL_AUDIO_DRIVER_NAS_DYNAMIC
 
-static void
-UnloadNASLibrary(void)
+static void UnloadNASLibrary(void)
 {
     if (nas_handle != NULL) {
         SDL_UnloadObject(nas_handle);
@@ -103,8 +100,7 @@ UnloadNASLibrary(void)
     }
 }
 
-static int
-LoadNASLibrary(void)
+static int LoadNASLibrary(void)
 {
     int retval = 0;
     if (nas_handle == NULL) {
@@ -130,13 +126,11 @@ LoadNASLibrary(void)
 
 #else
 
-static void
-UnloadNASLibrary(void)
+static void UnloadNASLibrary(void)
 {
 }
 
-static int
-LoadNASLibrary(void)
+static int LoadNASLibrary(void)
 {
     load_nas_syms();
     return 0;
@@ -145,8 +139,7 @@ LoadNASLibrary(void)
 #endif /* SDL_AUDIO_DRIVER_NAS_DYNAMIC */
 
 /* This function waits until it is possible to write a full sound buffer */
-static void
-NAS_WaitDevice(_THIS)
+static void NAS_WaitDevice(_THIS)
 {
     while (this->hidden->buf_free < this->hidden->mixlen) {
         AuEvent ev;
@@ -155,8 +148,7 @@ NAS_WaitDevice(_THIS)
     }
 }
 
-static void
-NAS_PlayDevice(_THIS)
+static void NAS_PlayDevice(_THIS)
 {
     while (this->hidden->mixlen > this->hidden->buf_free) {
         /*
@@ -182,14 +174,12 @@ NAS_PlayDevice(_THIS)
 #endif
 }
 
-static Uint8 *
-NAS_GetDeviceBuf(_THIS)
+static Uint8 *NAS_GetDeviceBuf(_THIS)
 {
     return (this->hidden->mixbuf);
 }
 
-static int
-NAS_CaptureFromDevice(_THIS, void *buffer, int buflen)
+static int NAS_CaptureFromDevice(_THIS, void *buffer, int buflen)
 {
     struct SDL_PrivateAudioData *h = this->hidden;
     int retval;
@@ -210,8 +200,7 @@ NAS_CaptureFromDevice(_THIS, void *buffer, int buflen)
     return retval;
 }
 
-static void
-NAS_FlushCapture(_THIS)
+static void NAS_FlushCapture(_THIS)
 {
     struct SDL_PrivateAudioData *h = this->hidden;
     AuUint32 total = 0;
@@ -227,8 +216,7 @@ NAS_FlushCapture(_THIS)
     } while ((br == sizeof(buf)) && (total < this->spec.size));
 }
 
-static void
-NAS_CloseDevice(_THIS)
+static void NAS_CloseDevice(_THIS)
 {
     if (this->hidden->aud) {
         NAS_AuCloseServer(this->hidden->aud);
@@ -237,8 +225,7 @@ NAS_CloseDevice(_THIS)
     SDL_free(this->hidden);
 }
 
-static AuBool
-event_handler(AuServer * aud, AuEvent * ev, AuEventHandlerRec * hnd)
+static AuBool event_handler(AuServer * aud, AuEvent * ev, AuEventHandlerRec * hnd)
 {
     SDL_AudioDevice *this = (SDL_AudioDevice *) hnd->data;
     struct SDL_PrivateAudioData *h = this->hidden;
@@ -281,8 +268,7 @@ event_handler(AuServer * aud, AuEvent * ev, AuEventHandlerRec * hnd)
     return AuTrue;
 }
 
-static AuDeviceID
-find_device(_THIS)
+static AuDeviceID find_device(_THIS)
 {
     /* These "Au" things are all macros, not functions... */
     struct SDL_PrivateAudioData *h = this->hidden;
@@ -310,8 +296,7 @@ find_device(_THIS)
     return AuNone;
 }
 
-static int
-NAS_OpenDevice(_THIS, const char *devname)
+static int NAS_OpenDevice(_THIS, const char *devname)
 {
     AuElement elms[3];
     int buffer_size;
@@ -414,14 +399,12 @@ NAS_OpenDevice(_THIS, const char *devname)
     return 0;
 }
 
-static void
-NAS_Deinitialize(void)
+static void NAS_Deinitialize(void)
 {
     UnloadNASLibrary();
 }
 
-static SDL_bool
-NAS_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool NAS_Init(SDL_AudioDriverImpl * impl)
 {
     if (LoadNASLibrary() < 0) {
         return SDL_FALSE;
diff --git a/src/audio/paudio/SDL_paudio.c b/src/audio/paudio/SDL_paudio.c
index 64d4fbbcc..5c5c36fc2 100644
--- a/src/audio/paudio/SDL_paudio.c
+++ b/src/audio/paudio/SDL_paudio.c
@@ -69,8 +69,7 @@ static char devsettings[][3] = {
     {'\0', '\0', '\0'}
 };
 
-static int
-OpenUserDefinedDevice(char *path, int maxlen, int flags)
+static int OpenUserDefinedDevice(char *path, int maxlen, int flags)
 {
     const char *audiodev;
     int fd;
@@ -90,8 +89,7 @@ OpenUserDefinedDevice(char *path, int maxlen, int flags)
     return fd;
 }
 
-static int
-OpenAudioPath(char *path, int maxlen, int flags, int classic)
+static int OpenAudioPath(char *path, int maxlen, int flags, int classic)
 {
     struct stat sb;
     int cycle = 0;
@@ -123,8 +121,7 @@ OpenAudioPath(char *path, int maxlen, int flags, int classic)
 }
 
 /* This function waits until it is possible to write a full sound buffer */
-static void
-PAUDIO_WaitDevice(_THIS)
+static void PAUDIO_WaitDevice(_THIS)
 {
     fd_set fdset;
 
@@ -176,8 +173,7 @@ PAUDIO_WaitDevice(_THIS)
     }
 }
 
-static void
-PAUDIO_PlayDevice(_THIS)
+static void PAUDIO_PlayDevice(_THIS)
 {
     int written = 0;
     const Uint8 *mixbuf = this->hidden->mixbuf;
@@ -206,14 +202,12 @@ PAUDIO_PlayDevice(_THIS)
 #endif
 }
 
-static Uint8 *
-PAUDIO_GetDeviceBuf(_THIS)
+static Uint8 *PAUDIO_GetDeviceBuf(_THIS)
 {
     return this->hidden->mixbuf;
 }
 
-static void
-PAUDIO_CloseDevice(_THIS)
+static void PAUDIO_CloseDevice(_THIS)
 {
     if (this->hidden->audio_fd >= 0) {
         close(this->hidden->audio_fd);
@@ -222,8 +216,7 @@ PAUDIO_CloseDevice(_THIS)
     SDL_free(this->hidden);
 }
 
-static int
-PAUDIO_OpenDevice(_THIS, const char *devname)
+static int PAUDIO_OpenDevice(_THIS, const char *devname)
 {
     const char *workaround = SDL_getenv("SDL_DSP_NOSELECT");
     char audiodev[1024];
@@ -462,8 +455,7 @@ PAUDIO_OpenDevice(_THIS, const char *devname)
     return 0;
 }
 
-static SDL_bool
-PAUDIO_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool PAUDIO_Init(SDL_AudioDriverImpl * impl)
 {
     /* !!! FIXME: not right for device enum? */
     int fd = OpenAudioPath(NULL, 0, OPEN_FLAGS, 0);
diff --git a/src/audio/qsa/SDL_qsa_audio.c b/src/audio/qsa/SDL_qsa_audio.c
index 828d2583d..0ab477485 100644
--- a/src/audio/qsa/SDL_qsa_audio.c
+++ b/src/audio/qsa/SDL_qsa_audio.c
@@ -74,15 +74,13 @@ uint32_t qsa_playback_devices;
 QSA_Device qsa_capture_device[QSA_MAX_DEVICES];
 uint32_t qsa_capture_devices;
 
-static SDL_INLINE int
-QSA_SetError(const char *fn, int status)
+static int QSA_SetError(const char *fn, int status)
 {
     return SDL_SetError("QSA: %s() failed: %s", fn, snd_strerror(status));
 }
 
 /* !!! FIXME: does this need to be here? Does the SDL version not work? */
-static void
-QSA_ThreadInit(_THIS)
+static void QSA_ThreadInit(_THIS)
 {
     /* Increase default 10 priority to 25 to avoid jerky sound */
     struct sched_param param;
@@ -93,8 +91,7 @@ QSA_ThreadInit(_THIS)
 }
 
 /* PCM channel parameters initialize function */
-static void
-QSA_InitAudioParams(snd_pcm_channel_params_t * cpars)
+static void QSA_InitAudioParams(snd_pcm_channel_params_t * cpars)
 {
     SDL_zerop(cpars);
     cpars->channel = SND_PCM_CHANNEL_PLAYBACK;
@@ -111,8 +108,7 @@ QSA_InitAudioParams(snd_pcm_channel_params_t * cpars)
 }
 
 /* This function waits until it is possible to write a full sound buffer */
-static void
-QSA_WaitDevice(_THIS)
+static void QSA_WaitDevice(_THIS)
 {
     int result;
 
@@ -137,8 +133,7 @@ QSA_WaitDevice(_THIS)
     }
 }
 
-static void
-QSA_PlayDevice(_THIS)
+static void QSA_PlayDevice(_THIS)
 {
     snd_pcm_channel_status_t cstatus;
     int written;
@@ -230,14 +225,12 @@ QSA_PlayDevice(_THIS)
     }
 }
 
-static Uint8 *
-QSA_GetDeviceBuf(_THIS)
+static Uint8 *QSA_GetDeviceBuf(_THIS)
 {
     return this->hidden->pcm_buf;
 }
 
-static void
-QSA_CloseDevice(_THIS)
+static void QSA_CloseDevice(_THIS)
 {
     if (this->hidden->audio_handle != NULL) {
         if (!this->iscapture) {
@@ -256,8 +249,7 @@ QSA_CloseDevice(_THIS)
     SDL_free(this->hidden);
 }
 
-static int
-QSA_OpenDevice(_THIS, const char *devname)
+static int QSA_OpenDevice(_THIS, const char *devname)
 {
     const QSA_Device *device = (const QSA_Device *) this->handle;
     SDL_bool iscapture = this->iscapture;
@@ -435,8 +427,7 @@ QSA_OpenDevice(_THIS, const char *devname)
     return 0;
 }
 
-static void
-QSA_DetectDevices(void)
+static void QSA_DetectDevices(void)
 {
     uint32_t it;
     uint32_t cards;
@@ -581,8 +572,7 @@ QSA_DetectDevices(void)
     }
 }
 
-static void
-QSA_Deinitialize(void)
+static void QSA_Deinitialize(void)
 {
     /* Clear devices array on shutdown */
     /* !!! FIXME: we zero these on init...any reason to do it here? */
@@ -592,8 +582,7 @@ QSA_Deinitialize(void)
     qsa_capture_devices = 0;
 }
 
-static SDL_bool
-QSA_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool QSA_Init(SDL_AudioDriverImpl * impl)
 {
     /* Clear devices array */
     SDL_zeroa(qsa_playback_device);
diff --git a/src/audio/sun/SDL_sunaudio.c b/src/audio/sun/SDL_sunaudio.c
index 7ad441acc..25deb9098 100644
--- a/src/audio/sun/SDL_sunaudio.c
+++ b/src/audio/sun/SDL_sunaudio.c
@@ -55,15 +55,13 @@
 static Uint8 snd2au(int sample);
 
 /* Audio driver bootstrap functions */
-static void
-SUNAUDIO_DetectDevices(void)
+static void SUNAUDIO_DetectDevices(void)
 {
     SDL_EnumUnixAudioDevices(1, (int (*)(int)) NULL);
 }
 
 #ifdef DEBUG_AUDIO
-void
-CheckUnderflow(_THIS)
+void CheckUnderflow(_THIS)
 {
 #ifdef AUDIO_GETBUFINFO
     audio_info_t info;
@@ -78,8 +76,7 @@ CheckUnderflow(_THIS)
 }
 #endif
 
-static void
-SUNAUDIO_WaitDevice(_THIS)
+static void SUNAUDIO_WaitDevice(_THIS)
 {
 #ifdef AUDIO_GETBUFINFO
 #define SLEEP_FUDGE 10      /* 10 ms scheduling fudge factor */
@@ -102,8 +99,7 @@ SUNAUDIO_WaitDevice(_THIS)
 #endif
 }
 
-static void
-SUNAUDIO_PlayDevice(_THIS)
+static void SUNAUDIO_PlayDevice(_THIS)
 {
     /* Write the audio data */
     if (this->hidden->ulaw_only) {
@@ -170,14 +166,12 @@ SUNAUDIO_PlayDevice(_THIS)
     }
 }
 
-static Uint8 *
-SUNAUDIO_GetDeviceBuf(_THIS)
+static Uint8 *SUNAUDIO_GetDeviceBuf(_THIS)
 {
     return (this->hidden->mixbuf);
 }
 
-static void
-SUNAUDIO_CloseDevice(_THIS)
+static void SUNAUDIO_CloseDevice(_THIS)
 {
     SDL_free(this->hidden->ulaw_buf);
     if (this->hidden->audio_fd >= 0) {
@@ -187,8 +181,7 @@ SUNAUDIO_CloseDevice(_THIS)
     SDL_free(this->hidden);
 }
 
-static int
-SUNAUDIO_OpenDevice(_THIS, const char *devname)
+static int SUNAUDIO_OpenDevice(_THIS, const char *devname)
 {
 #ifdef AUDIO_SETINFO
     int enc;
@@ -359,8 +352,7 @@ SUNAUDIO_OpenDevice(_THIS, const char *devname)
 /*      provided "as is" without express or implied warranty.           */
 /************************************************************************/
 
-static Uint8
-snd2au(int sample)
+static Uint8 snd2au(int sample)
 {
 
     int mask;
@@ -394,8 +386,7 @@ snd2au(int sample)
     return (mask & sample);
 }
 
-static SDL_bool
-SUNAUDIO_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool SUNAUDIO_Init(SDL_AudioDriverImpl * impl)
 {
     /* Set the function pointers */
     impl->DetectDevices = SUNAUDIO_DetectDevices;
diff --git a/src/audio/winmm/SDL_winmm.c b/src/audio/winmm/SDL_winmm.c
index 92e38bd41..d0c4b9768 100644
--- a/src/audio/winmm/SDL_winmm.c
+++ b/src/audio/winmm/SDL_winmm.c
@@ -97,16 +97,13 @@ static void DetectWave##typ##Devs(void) { \
 DETECT_DEV_IMPL(SDL_FALSE, Out, WAVEOUTCAPS)
 DETECT_DEV_IMPL(SDL_TRUE, In, WAVEINCAPS)
 
-static void
-WINMM_DetectDevices(void)
+static void WINMM_DetectDevices(void)
 {
     DetectWaveInDevs();
     DetectWaveOutDevs();
 }
 
-static void CALLBACK
-CaptureSound(HWAVEIN hwi, UINT uMsg, DWORD_PTR dwInstance,
-          DWORD_PTR dwParam1, DWORD_PTR dwParam2)
+static void CALLBACK CaptureSound(HWAVEIN hwi, UINT uMsg, DWORD_PTR dwInstance, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
 {
     SDL_AudioDevice *this = (SDL_AudioDevice *) dwInstance;
 
@@ -120,9 +117,7 @@ CaptureSound(HWAVEIN hwi, UINT uMsg, DWORD_PTR dwInstance,
 
 
 /* The Win32 callback for filling the WAVE device */
-static void CALLBACK
-FillSound(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dwInstance,
-          DWORD_PTR dwParam1, DWORD_PTR dwParam2)
+static void CALLBACK FillSound(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dwInstance, DWORD_PTR dwParam1, DWORD_PTR dwParam2)
 {
     SDL_AudioDevice *this = (SDL_AudioDevice *) dwInstance;
 
@@ -134,8 +129,7 @@ FillSound(HWAVEOUT hwo, UINT uMsg, DWORD_PTR dwInstance,
     ReleaseSemaphore(this->hidden->audio_sem, 1, NULL);
 }
 
-static int
-SetMMerror(const char *function, MMRESULT code)
+static int SetMMerror(const char *function, MMRESULT code)
 {
     int len;
     char errbuf[MAXERRORLENGTH];
@@ -151,22 +145,19 @@ SetMMerror(const char *function, MMRESULT code)
     return SDL_SetError("%s", errbuf);
 }
 
-static void
-WINMM_WaitDevice(_THIS)
+static void WINMM_WaitDevice(_THIS)
 {
     /* Wait for an audio chunk to finish */
     WaitForSingleObject(this->hidden->audio_sem, INFINITE);
 }
 
-static Uint8 *
-WINMM_GetDeviceBuf(_THIS)
+static Uint8 *WINMM_GetDeviceBuf(_THIS)
 {
     return (Uint8 *) (this->hidden->
                       wavebuf[this->hidden->next_buffer].lpData);
 }
 
-static void
-WINMM_PlayDevice(_THIS)
+static void WINMM_PlayDevice(_THIS)
 {
     /* Queue it up */
     waveOutWrite(this->hidden->hout,
@@ -175,8 +166,7 @@ WINMM_PlayDevice(_THIS)
     this->hidden->next_buffer = (this->hidden->next_buffer + 1) % NUM_BUFFERS;
 }
 
-static int
-WINMM_CaptureFromDevice(_THIS, void *buffer, int buflen)
+static int WINMM_CaptureFromDevice(_THIS, void *buffer, int buflen)
 {
     const int nextbuf = this->hidden->next_buffer;
     MMRESULT result;
@@ -202,8 +192,7 @@ WINMM_CaptureFromDevice(_THIS, void *buffer, int buflen)
     return this->spec.size;
 }
 
-static void
-WINMM_FlushCapture(_THIS)
+static void WINMM_FlushCapture(_THIS)
 {
     /* Wait for an audio chunk to finish */
     if (WaitForSingleObject(this->hidden->audio_sem, 0) == WAIT_OBJECT_0) {
@@ -216,8 +205,7 @@ WINMM_FlushCapture(_THIS)
     }
 }
 
-static void
-WINMM_CloseDevice(_THIS)
+static void WINMM_CloseDevice(_THIS)
 {
     int i;
 
@@ -258,8 +246,7 @@ WINMM_CloseDevice(_THIS)
     SDL_free(this->hidden);
 }
 
-static SDL_bool
-PrepWaveFormat(_THIS, UINT devId, WAVEFORMATEX *pfmt, const int iscapture)
+static SDL_bool PrepWaveFormat(_THIS, UINT devId, WAVEFORMATEX *pfmt, const int iscapture)
 {
     SDL_zerop(pfmt);
 
@@ -282,8 +269,7 @@ PrepWaveFormat(_THIS, UINT devId, WAVEFORMATEX *pfmt, const int iscapture)
     }
 }
 
-static int
-WINMM_OpenDevice(_THIS, const char *devname)
+static int WINMM_OpenDevice(_THIS, const char *devname)
 {
     SDL_AudioFormat test_format;
     SDL_bool iscapture = this->iscapture;
@@ -431,8 +417,7 @@ WINMM_OpenDevice(_THIS, const char *devname)
     return 0;                   /* Ready to go! */
 }
 
-static SDL_bool
-WINMM_Init(SDL_AudioDriverImpl * impl)
+static SDL_bool WINMM_Init(SDL_AudioDriverImpl * impl)
 {
     /* Set the function pointers */
     impl->DetectDevices = WINMM_DetectDevices;
diff --git a/src/core/freebsd/SDL_evdev_kbd_freebsd.c b/src/core/freebsd/SDL_evdev_kbd_freebsd.c
index a5cedbf14..57a469725 100644
--- a/src/core/freebsd/SDL_evdev_kbd_freebsd.c
+++ b/src/core/freebsd/SDL_evdev_kbd_freebsd.c
@@ -221,8 +221,7 @@ static void kbd_register_emerg_cleanup(SDL_EVDEV_keyboard_state *kbd)
     }
 }
 
-SDL_EVDEV_keyboard_state *
-SDL_EVDEV_kbd_init(void)
+SDL_EVDEV_keyboard_state *SDL_EVDEV_kbd_init(void)
 {
     SDL_EVDEV_keyboard_state *kbd;
     struct mouse_info mData;
diff --git a/src/core/linux/SDL_dbus.c b/src/core/linux/SDL_dbus.c
index 0298e64a6..15720492d 100644
--- a/src/core/linux/SDL_dbus.c
+++ b/src/core/linux/SDL_dbus.c
@@ -193,8 +193,7 @@ void SDL_DBus_Quit(void)
     inhibit_handle = NULL;
 }
 
-SDL_DBusContext *
-SDL_DBus_GetContext(void)
+SDL_DBusContext *SDL_DBus_GetContext(void)
 {
     if (dbus_handle == NULL || !dbus.session_conn) {
         SDL_DBus_Init();
@@ -246,8 +245,7 @@ static SDL_bool SDL_DBus_CallMethodInternal(DBusConnection *conn, const char *no
     return retval;
 }
 
-SDL_bool
-SDL_DBus_CallMethodOnConnection(DBusConnection *conn, const char *node, const char *path, const char *interface, const char *method, ...)
+SDL_bool SDL_DBus_CallMethodOnConnection(DBusConnection *conn, const char *node, const char *path, const char *interface, const char *method, ...)
 {
     SDL_bool retval;
     va_list ap;
@@ -257,8 +255,7 @@ SDL_DBus_CallMethodOnConnection(DBusConnection *conn, const char *node, const ch
     return retval;
 }
 
-SDL_bool
-SDL_DBus_CallMethod(const char *node, const char *path, const char *interface, const char *method, ...)
+SDL_bool SDL_DBus_CallMethod(const char *node, const char *path, const char *interface, const char *method, ...)
 {
     SDL_bool retval;
     va_list ap;
@@ -315,8 +312,7 @@ static SDL_bool SDL_DBus_CallWithBasicReply(DBusConnection *conn, DBusMessage *m
     return retval;
 }
 
-SDL_bool
-SDL_DBus_CallVoidMethodOnConnection(DBusConnection *conn, const char *node, const char *path, const char *interface, const char *method, ...)
+SDL_bool SDL_DBus_CallVoidMethodOnConnection(DBusConnection *conn, const char *node, const char *path, const char *interface, const char *method, ...)
 {
     SDL_bool retval;
     va_list ap;
@@ -326,8 +322,7 @@ SDL_DBus_CallVoidMethodOnConnection(DBusConnection *conn, const char *node, cons
     return retval;
 }
 
-SDL_bool
-SDL_DBus_CallVoidMethod(const char *node, const char *path, const char *interface, const char *method, ...)
+SDL_bool SDL_DBus_CallVoidMethod(const char *node, const char *path, const char *interface, const char *method, ...)
 {
     SDL_bool retval;
     va_list ap;
@@ -337,8 +332,7 @@ SDL_DBus_CallVoidMethod(const char *node, const char *path, const char *interfac
     return retval;
 }
 
-SDL_bool
-SDL_DBus_QueryPropertyOnConnection(DBusConnection *conn, const char *node, const char *path, const char *interface, const char *property, const int expectedtype, void *result)
+SDL_bool SDL_DBus_QueryPropertyOnConnection(DBusConnection *conn, const char *node, const char *path, const char *interface, const char *property, const int expectedtype, void *result)
 {
     SDL_bool retval = SDL_FALSE;
 
@@ -355,8 +349,7 @@ SDL_DBus_QueryPropertyOnConnection(DBusConnection *conn, const char *node, const
     return retval;
 }
 
-SDL_bool
-SDL_DBus_QueryProperty(const char *node, const char *path, const char *interface, const char *property, const int expectedtype, void *result)
+SDL_bool SDL_DBus_QueryProperty(const char *node, const char *path, const char *interface, const char *property, const int expectedtype, void *result)
 {
     return SDL_DBus_QueryPropertyOnConnection(dbus.session_conn, node, path, interface, property, expectedtype, result);
 }
@@ -407,8 +400,7 @@ failed:
     return SDL_FALSE;
 }
 
-SDL_bool
-SDL_DBus_ScreensaverInhibit(SDL_bool inhibit)
+SDL_bool SDL_DBus_ScreensaverInhibit(SDL_bool inhibit)
 {
     const char *default_inhibit_reason = "Playing a game";
 
diff --git a/src/core/linux/SDL_evdev_kbd.c b/src/core/linux/SDL_evdev_kbd.c
index 6535fdfc8..632bbd248 100644
--- a/src/core/linux/SDL_evdev_kbd.c
+++ b/src/core/linux/SDL_evdev_kbd.c
@@ -296,8 +296,7 @@ static void kbd_register_emerg_cleanup(SDL_EVDEV_keyboard_state *kbd)
     }
 }
 
-SDL_EVDEV_keyboard_state *
-SDL_EVDEV_kbd_init(void)
+SDL_EVDEV_keyboard_state *SDL_EVDEV_kbd_init(void)
 {
     SDL_EVDEV_keyboard_state *kbd;
     char flag_state;
@@ -805,8 +804,7 @@ void SDL_EVDEV_kbd_keycode(SDL_EVDEV_keyboard_state *state, unsigned int keycode
 
 #elif !defined(SDL_INPUT_FBSDKBIO) /* !SDL_INPUT_LINUXKD */
 
-SDL_EVDEV_keyboard_state *
-SDL_EVDEV_kbd_init(void)
+SDL_EVDEV_keyboard_state *SDL_EVDEV_kbd_init(void)
 {
     return NULL;
 }
diff --git a/src/core/linux/SDL_fcitx.c b/src/core/linux/SDL_fcitx.c
index 244aa2309..2388681d7 100644
--- a/src/core/linux/SDL_fcitx.c
+++ b/src/core/linux/SDL_fcitx.c
@@ -83,8 +83,7 @@ static char *GetAppName()
     return SDL_strdup("SDL_App");
 }
 
-static size_t
-Fcitx_GetPreeditString(SDL_DBusContext *dbus,
+static size_t Fcitx_GetPreeditString(SDL_DBusContext *dbus,
                        DBusMessage *msg,
                        char **ret,
                        Sint32 *start_pos,
@@ -369,8 +368,7 @@ static Uint32 Fcitx_ModState(void)
     return fcitx_mods;
 }
 
-SDL_bool
-SDL_Fcitx_Init()
+SDL_bool SDL_Fcitx_Init()
 {
     fcitx_client.dbus = SDL_DBus_GetContext();
 
@@ -406,8 +404,7 @@ void SDL_Fcitx_Reset(void)
     FcitxClientICCallMethod(&fcitx_client, "CloseIC");
 }
 
-SDL_bool
-SDL_Fcitx_ProcessKeyEvent(Uint32 keysym, Uint32 keycode, Uint8 state)
+SDL_bool SDL_Fcitx_ProcessKeyEvent(Uint32 keysym, Uint32 keycode, Uint8 state)
 {
     Uint32 mod_state = Fcitx_ModState();
     Uint32 handled = SDL_FALSE;
diff --git a/src/core/linux/SDL_ibus.c b/src/core/linux/SDL_ibus.c
index f7007c15a..60b69b708 100644
--- a/src/core/linux/SDL_ibus.c
+++ b/src/core/linux/SDL_ibus.c
@@ -555,8 +555,7 @@ static SDL_bool IBus_CheckConnection(SDL_DBusContext *dbus)
     return SDL_FALSE;
 }
 
-SDL_bool
-SDL_IBus_Init(void)
+SDL_bool SDL_IBus_Init(void)
 {
     SDL_bool result = SDL_FALSE;
     SDL_DBusContext *dbus = SDL_DBus_GetContext();
@@ -671,8 +670,7 @@ void SDL_IBus_Reset(void)
     IBus_SimpleMessage("Reset");
 }
 
-SDL_bool
-SDL_IBus_ProcessKeyEvent(Uint32 keysym, Uint32 keycode, Uint8 state)
+SDL_bool SDL_IBus_ProcessKeyEvent(Uint32 keysym, Uint32 keycode, Uint8 state)
 {
     Uint32 result = 0;
     SDL_DBusContext *dbus = SDL_DBus_GetContext();
@@ -717,16 +715,16 @@ void SDL_IBus_UpdateTextRect(const SDL_Rect *rect)
     }
 
     SDL_GetWindowPosition(focused_win, &x, &y);
-   
-#if SDL_VIDEO_DRIVER_X11    
+
+#if SDL_VIDEO_DRIVER_X11
     if (info.subsystem == SDL_SYSWM_X11) {
         SDL_DisplayData *displaydata = (SDL_DisplayData *) SDL_GetDisplayForWindow(focused_win)->driverdata;
-            
+
         Display *x_disp = info.info.x11.display;
         Window x_win = info.info.x11.window;
         int x_screen = displaydata->screen;
         Window unused;
-            
+
         X11_XTranslateCoordinates(x_disp, x_win, RootWindow(x_disp, x_screen), 0, 0, &x, &y, &unused);
     }
 #endif
diff --git a/src/core/linux/SDL_ime.c b/src/core/linux/SDL_ime.c
index 1a25fa6e8..f40e83c5a 100644
--- a/src/core/linux/SDL_ime.c
+++ b/src/core/linux/SDL_ime.c
@@ -83,8 +83,7 @@ static void InitIME()
 #endif /* HAVE_IBUS_IBUS_H */
 }
 
-SDL_bool
-SDL_IME_Init(void)
+SDL_bool SDL_IME_Init(void)
 {
     InitIME();
 
@@ -127,8 +126,7 @@ void SDL_IME_Reset(void)
     }
 }
 
-SDL_bool
-SDL_IME_ProcessKeyEvent(Uint32 keysym, Uint32 keycode, Uint8 state)
+SDL_bool SDL_IME_ProcessKeyEvent(Uint32 keysym, Uint32 keycode, Uint8 state)
 {
     if (SDL_IME_ProcessKeyEvent_Real) {
         return SDL_IME_ProcessKeyEvent_Real(keysym, keycode, state);
diff --git a/src/core/linux/SDL_udev.c b/src/core/linux/SDL_udev.c
index ff99011be..39368c7e0 100644
--- a/src/core/linux/SDL_udev.c
+++ b/src/core/linux/SDL_udev.c
@@ -222,8 +222,7 @@ void SDL_UDEV_Scan(void)
     _this->syms.udev_enumerate_unref(enumerate);
 }
 
-SDL_bool
-SDL_UDEV_GetProductInfo(const char *device_path, Uint16 *vendor, Uint16 *product, Uint16 *version)
+SDL_bool SDL_UDEV_GetProductInfo(const char *device_path, Uint16 *vendor, Uint16 *product, Uint16 *version)
 {
     struct udev_enumerate *enumerate = NULL;
     struct udev_list_entry *devs = NULL;
@@ -550,8 +549,7 @@ void SDL_UDEV_DelCallback(SDL_UDEV_Callback cb)
     }
 }
 
-const SDL_UDEV_Symbols *
-SDL_UDEV_GetUdevSyms(void)
+const SDL_UDEV_Symbols *SDL_UDEV_GetUdevSyms(void)
 {
     if (SDL_UDEV_Init() < 0) {
         SDL_SetError("Could not initialize UDEV");
diff --git a/src/core/windows/SDL_immdevice.c b/src/core/windows/SDL_immdevice.c
index 377b3b16d..831d9e7a0 100644
--- a/src/core/windows/SDL_immdevice.c
+++ b/src/core/windows/SDL_immdevice.c
@@ -505,8 +505,7 @@ int SDL_IMMDevice_GetDefaultAudioInfo(char **name, SDL_AudioSpec *spec, int isca
     return 0;
 }
 
-SDL_AudioFormat
-WaveFormatToSDLFormat(WAVEFORMATEX *waveformat)
+SDL_AudioFormat WaveFormatToSDLFormat(WAVEFORMATEX *waveformat)
 {
     if ((waveformat->wFormatTag == WAVE_FORMAT_IEEE_FLOAT) && (waveformat->wBitsPerSample == 32)) {
         return AUDIO_F32SYS;
diff --git a/src/core/windows/SDL_windows.c b/src/core/windows/SDL_windows.c
index 682aaf1c0..350198eb7 100644
--- a/src/core/windows/SDL_windows.c
+++ b/src/core/windows/SDL_windows.c
@@ -122,8 +122,7 @@ void WIN_CoUninitialize(void)
 }
 
 #ifndef __WINRT__
-void *
-WIN_LoadComBaseFunction(const char *name)
+void *WIN_LoadComBaseFunction(const char *name)
 {
     static SDL_bool s_bLoaded;
     static HMODULE s_hComBase;
@@ -248,8 +247,7 @@ has the same problem.)
 
 WASAPI doesn't need this. This is just for DirectSound/WinMM.
 */
-char *
-WIN_LookupAudioDeviceName(const WCHAR *name, const GUID *guid)
+char *WIN_LookupAudioDeviceName(const WCHAR *name, const GUID *guid)
 {
 #if defined(__WINRT__) || defined(__XBOXONE__) || defined(__XBOXSERIES__)
     return WIN_StringToUTF8(name); /* No registry access on WinRT/UWP and Xbox, go with what we've got. */
@@ -370,8 +368,7 @@ int SDL_Direct3D9GetAdapterIndex(int displayIndex)
     return 0; /* D3DADAPTER_DEFAULT */
 }
 
-SDL_bool
-SDL_DXGIGetOutputInfo(int displayIndex, int *adapterIndex, int *outputIndex)
+SDL_bool SDL_DXGIGetOutputInfo(int displayIndex, int *adapterIndex, int *outputIndex)
 {
     (void)displayIndex;
     if (adapterIndex) {
diff --git a/src/cpuinfo/SDL_cpuinfo.c b/src/cpuinfo/SDL_cpuinfo.c
index 0ceadfd2c..337ae335a 100644
--- a/src/cpuinfo/SDL_cpuinfo.c
+++ b/src/cpuinfo/SDL_cpuinfo.c
@@ -991,92 +991,77 @@ SDL_bool SDL_HasRDTSC(void)
     return CPU_FEATURE_AVAILABLE(CPU_HAS_RDTSC);
 }
 
-SDL_bool
-SDL_HasAltiVec(void)
+SDL_bool SDL_HasAltiVec(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_ALTIVEC);
 }
 
-SDL_bool
-SDL_HasMMX(void)
+SDL_bool SDL_HasMMX(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_MMX);
 }
 
-SDL_bool
-SDL_Has3DNow(void)
+SDL_bool SDL_Has3DNow(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_3DNOW);
 }
 
-SDL_bool
-SDL_HasSSE(void)
+SDL_bool SDL_HasSSE(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_SSE);
 }
 
-SDL_bool
-SDL_HasSSE2(void)
+SDL_bool SDL_HasSSE2(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_SSE2);
 }
 
-SDL_bool
-SDL_HasSSE3(void)
+SDL_bool SDL_HasSSE3(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_SSE3);
 }
 
-SDL_bool
-SDL_HasSSE41(void)
+SDL_bool SDL_HasSSE41(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_SSE41);
 }
 
-SDL_bool
-SDL_HasSSE42(void)
+SDL_bool SDL_HasSSE42(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_SSE42);
 }
 
-SDL_bool
-SDL_HasAVX(void)
+SDL_bool SDL_HasAVX(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_AVX);
 }
 
-SDL_bool
-SDL_HasAVX2(void)
+SDL_bool SDL_HasAVX2(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_AVX2);
 }
 
-SDL_bool
-SDL_HasAVX512F(void)
+SDL_bool SDL_HasAVX512F(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_AVX512F);
 }
 
-SDL_bool
-SDL_HasARMSIMD(void)
+SDL_bool SDL_HasARMSIMD(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_ARM_SIMD);
 }
 
-SDL_bool
-SDL_HasNEON(void)
+SDL_bool SDL_HasNEON(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_NEON);
 }
 
-SDL_bool
-SDL_HasLSX(void)
+SDL_bool SDL_HasLSX(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_LSX);
 }
 
-SDL_bool
-SDL_HasLASX(void)
+SDL_bool SDL_HasLASX(void)
 {
     return CPU_FEATURE_AVAILABLE(CPU_HAS_LASX);
 }
@@ -1155,8 +1140,7 @@ int SDL_GetSystemRAM(void)
     return SDL_SystemRAM;
 }
 
-size_t
-SDL_SIMDGetAlignment(void)
+size_t SDL_SIMDGetAlignment(void)
 {
     if (SDL_SIMDAlignment == 0xFFFFFFFF) {
         SDL_GetCPUFeatures(); /* make sure this has been calculated */
@@ -1165,8 +1149,7 @@ SDL_SIMDGetAlignment(void)
     return SDL_SIMDAlignment;
 }
 
-void *
-SDL_SIMDAlloc(const size_t len)
+void *SDL_SIMDAlloc(const size_t len)
 {
     const size_t alignment = SDL_SIMDGetAlignment();
     const size_t padding = (alignment - (len % alignment)) % alignment;
@@ -1190,8 +1173,7 @@ SDL_SIMDAlloc(const size_t len)
     return retval;
 }
 
-void *
-SDL_SIMDRealloc(void *mem, const size_t len)
+void *SDL_SIMDRealloc(void *mem, const size_t len)
 {
     const size_t alignment = SDL_SIMDGetAlignment();
     const size_t padding = (alignment - (len % alignment)) % alignment;
diff --git a/src/dynapi/SDL_dynapi.c b/src/dynapi/SDL_dynapi.c
index 43a07b981..7069594b2 100644
--- a/src/dynapi/SDL_dynapi.c
+++ b/src/dynapi/SDL_dynapi.c
@@ -350,8 +350,7 @@ static Sint32 initialize_jumptable(Uint32 apiver, void *table, Uint32 tablesize)
 typedef Sint32(SDLCALL *SDL_DYNAPI_ENTRYFN)(Uint32 apiver, void *table, Uint32 tablesize);
 extern DECLSPEC Sint32 SDLCALL SDL_DYNAPI_entry(Uint32, void *, Uint32);
 
-Sint32
-SDL_DYNAPI_entry(Uint32 apiver, void *table, Uint32 tablesize)
+Sint32 SDL_DYNAPI_entry(Uint32 apiver, void *table, Uint32 tablesize)
 {
     return initialize_jumptable(apiver, table, tablesize);
 }
diff --git a/src/events/SDL_keyboard.c b/src/events/SDL_keyboard.c
index 0bd46de73..7abefde9d 100644
--- a/src/events/SDL_keyboard.c
+++ b/src/events/SDL_keyboard.c
@@ -640,8 +640,7 @@ static const char *SDL_scancode_names[SDL_NUM_SCANCODES] = {
 };
 
 /* Taken from SDL_iconv() */
-char *
-SDL_UCS4ToUTF8(Uint32 ch, char *dst)
+char *SDL_UCS4ToUTF8(Uint32 ch, char *dst)
 {
     Uint8 *p = (Uint8 *)dst;
     if (ch <= 0x7F) {
@@ -756,8 +755,7 @@ void SDL_SetScancodeName(SDL_Scancode scancode, const char *name)
     SDL_scancode_names[scancode] = name;
 }
 
-SDL_Window *
-SDL_GetKeyboardFocus(void)
+SDL_Window *SDL_GetKeyboardFocus(void)
 {
     SDL_Keyboard *keyboard = &SDL_keyboard;
 
@@ -1011,8 +1009,7 @@ void SDL_ReleaseAutoReleaseKeys(void)
     }
 }
 
-SDL_bool
-SDL_HardwareKeyboardKeyPressed(void)
+SDL_bool SDL_HardwareKeyboardKeyPressed(void)
 {
     SDL_Keyboard *keyboard = &SDL_keyboard;
     SDL_Scancode scancode;
@@ -1089,8 +1086,7 @@ void SDL_KeyboardQuit(void)
 {
 }
 
-const Uint8 *
-SDL_GetKeyboardState(int *numkeys)
+const Uint8 *SDL_GetKeyboardState(int *numkeys)
 {
     SDL_Keyboard *keyboard = &SDL_keyboard;
 
@@ -1100,8 +1096,7 @@ SDL_GetKeyboardState(int *numkeys)
     return keyboard->keystate;
 }
 
-SDL_Keymod
-SDL_GetModState(void)
+SDL_Keymod SDL_GetModState(void)
 {
     SDL_Keyboard *keyboard = &SDL_keyboard;
 
@@ -1126,8 +1121,7 @@ void SDL_ToggleModState(const SDL_Keymod modstate, const SDL_bool toggle)
     }
 }
 
-SDL_Keycode
-SDL_GetKeyFromScancode(SDL_Scancode scancode)
+SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode)
 {
     SDL_Keyboard *keyboard = &SDL_keyboard;
 
@@ -1139,8 +1133,7 @@ SDL_GetKeyFromScancode(SDL_Scancode scancode)
     return keyboard->keymap[scancode];
 }
 
-SDL_Keycode
-SDL_GetDefaultKeyFromScancode(SDL_Scancode scancode)
+SDL_Keycode SDL_GetDefaultKeyFromScancode(SDL_Scancode scancode)
 {
     if (((int)scancode) < SDL_SCANCODE_UNKNOWN || scancode >= SDL_NUM_SCANCODES) {
         SDL_InvalidParamError("scancode");
@@ -1150,8 +1143,7 @@ SDL_GetDefaultKeyFromScancode(SDL_Scancode scancode)
     return SDL_default_keymap[scancode];
 }
 
-SDL_Scancode
-SDL_GetScancodeFromKey(SDL_Keycode key)
+SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key)
 {
     SDL_Keyboard *keyboard = &SDL_keyboard;
     SDL_Scancode scancode;
@@ -1165,8 +1157,7 @@ SDL_GetScancodeFromKey(SDL_Keycode key)
     return SDL_SCANCODE_UNKNOWN;
 }
 
-const char *
-SDL_GetScancodeName(SDL_Scancode scancode)
+const char *SDL_GetScancodeName(SDL_Scancode scancode)
 {
     const char *name;
     if (((int)scancode) < SDL_SCANCODE_UNKNOWN || scancode >= SDL_NUM_SCANCODES) {
@@ -1204,8 +1195,7 @@ SDL_Scancode SDL_GetScancodeFromName(const char *name)
     return SDL_SCANCODE_UNKNOWN;
 }
 
-const char *
-SDL_GetKeyName(SDL_Keycode key)
+const char *SDL_GetKeyName(SDL_Keycode key)
 {
     static char name[8];
     char *end;
@@ -1242,8 +1232,7 @@ SDL_GetKeyName(SDL_Keycode key)
     }
 }
 
-SDL_Keycode
-SDL_GetKeyFromName(const char *name)
+SDL_Keycode SDL_GetKeyFromName(const char *name)
 {
     SDL_Keycode key;
 
diff --git a/src/events/SDL_keysym_to_scancode.c b/src/events/SDL_keysym_to_scancode.c
index aaf7922dc..df0b6b12f 100644
--- a/src/events/SDL_keysym_to_scancode.c
+++ b/src/events/SDL_keysym_to_scancode.c
@@ -387,8 +387,7 @@ static const struct {
 };
 /* *INDENT-ON* */ /* clang-format on */
 
-SDL_Scancode
-SDL_GetScancodeFromKeySym(Uint32 keysym, Uint32 keycode)
+SDL_Scancode SDL_GetScancodeFromKeySym(Uint32 keysym, Uint32 keycode)
 {
     int i;
     Uint32 linux_keycode = 0;
diff --git a/src/events/SDL_mouse.c b/src/events/SDL_mouse.c
index 5d8d1d2ed..000b22deb 100644
--- a/src/events/SDL_mouse.c
+++ b/src/events/SDL_mouse.c
@@ -226,8 +226,7 @@ void SDL_SetDefaultCursor(SDL_Cursor *cursor)
     }
 }
 
-SDL_Mouse *
-SDL_GetMouse(void)
+SDL_Mouse *SDL_GetMouse(void)
 {
     return &SDL_mouse;
 }
@@ -245,8 +244,7 @@ static Uint32 GetButtonState(SDL_Mouse *mouse, SDL_bool include_touch)
     return buttonstate;
 }
 
-SDL_Window *
-SDL_GetMouseFocus(void)
+SDL_Window *SDL_GetMouseFocus(void)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
@@ -261,8 +259,7 @@ SDL_GetMouseFocus(void)
  * -flibit
  */
 #if 0
-void
-SDL_ResetMouse(void)
+void SDL_ResetMouse(void)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
     Uint32 buttonState = GetButtonState(mouse, SDL_FALSE);
@@ -946,8 +943,7 @@ void SDL_MouseQuit(void)
                         SDL_MouseRelativeWarpMotionChanged, mouse);
 }
 
-Uint32
-SDL_GetMouseState(int *x, int *y)
+Uint32 SDL_GetMouseState(int *x, int *y)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
@@ -960,8 +956,7 @@ SDL_GetMouseState(int *x, int *y)
     return GetButtonState(mouse, SDL_TRUE);
 }
 
-Uint32
-SDL_GetRelativeMouseState(int *x, int *y)
+Uint32 SDL_GetRelativeMouseState(int *x, int *y)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
@@ -976,8 +971,7 @@ SDL_GetRelativeMouseState(int *x, int *y)
     return GetButtonState(mouse, SDL_TRUE);
 }
 
-Uint32
-SDL_GetGlobalMouseState(int *x, int *y)
+Uint32 SDL_GetGlobalMouseState(int *x, int *y)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
@@ -1133,8 +1127,7 @@ int SDL_SetRelativeMouseMode(SDL_bool enabled)
     return 0;
 }
 
-SDL_bool
-SDL_GetRelativeMouseMode()
+SDL_bool SDL_GetRelativeMouseMode()
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
@@ -1219,8 +1212,7 @@ int SDL_CaptureMouse(SDL_bool enabled)
     return SDL_UpdateMouseCapture(SDL_FALSE);
 }
 
-SDL_Cursor *
-SDL_CreateCursor(const Uint8 *data, const Uint8 *mask,
+SDL_Cursor *SDL_CreateCursor(const Uint8 *data, const Uint8 *mask,
                  int w, int h, int hot_x, int hot_y)
 {
     SDL_Surface *surface;
@@ -1268,8 +1260,7 @@ SDL_CreateCursor(const Uint8 *data, const Uint8 *mask,
     return cursor;
 }
 
-SDL_Cursor *
-SDL_CreateColorCursor(SDL_Surface *surface, int hot_x, int hot_y)
+SDL_Cursor *SDL_CreateColorCursor(SDL_Surface *surface, int hot_x, int hot_y)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
     SDL_Surface *temp = NULL;
@@ -1311,8 +1302,7 @@ SDL_CreateColorCursor(SDL_Surface *surface, int hot_x, int hot_y)
     return cursor;
 }
 
-SDL_Cursor *
-SDL_CreateSystemCursor(SDL_SystemCursor id)
+SDL_Cursor *SDL_CreateSystemCursor(SDL_SystemCursor id)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
     SDL_Cursor *cursor;
@@ -1379,8 +1369,7 @@ void SDL_SetCursor(SDL_Cursor *cursor)
     }
 }
 
-SDL_Cursor *
-SDL_GetCursor(void)
+SDL_Cursor *SDL_GetCursor(void)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
@@ -1390,8 +1379,7 @@ SDL_GetCursor(void)
     return mouse->cur_cursor;
 }
 
-SDL_Cursor *
-SDL_GetDefaultCursor(void)
+SDL_Cursor *SDL_GetDefaultCursor(void)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
 
diff --git a/src/events/SDL_touch.c b/src/events/SDL_touch.c
index 963e0ac22..cff41b056 100644
--- a/src/events/SDL_touch.c
+++ b/src/events/SDL_touch.c
@@ -50,8 +50,7 @@ int SDL_GetNumTouchDevices(void)
     return SDL_num_touch;
 }
 
-SDL_TouchID
-SDL_GetTouchDevice(int index)
+SDL_TouchID SDL_GetTouchDevice(int index)
 {
     if (index < 0 || index >= SDL_num_touch) {
         SDL_SetError("Unknown touch device index %d", index);
@@ -60,8 +59,7 @@ SDL_GetTouchDevice(int index)
     return SDL_touchDevices[index]->id;
 }
 
-const char *
-SDL_GetTouchName(int index)
+const char *SDL_GetTouchName(int index)
 {
     if (index < 0 || index >= SDL_num_touch) {
         SDL_SetError("Unknown touch device");
@@ -84,8 +82,7 @@ static int SDL_GetTouchIndex(SDL_TouchID id)
     return -1;
 }
 
-SDL_Touch *
-SDL_GetTouch(SDL_TouchID id)
+SDL_Touch *SDL_GetTouch(SDL_TouchID id)
 {
     int index = SDL_GetTouchIndex(id);
     if (index < 0 || index >= SDL_num_touch) {
@@ -100,8 +97,7 @@ SDL_GetTouch(SDL_TouchID id)
     return SDL_touchDevices[index];
 }
 
-SDL_TouchDeviceType
-SDL_GetTouchDeviceType(SDL_TouchID id)
+SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID id)
 {
     SDL_Touch *touch = SDL_GetTouch(id);
     if (touch) {
@@ -139,8 +135,7 @@ int SDL_GetNumTouchFingers(SDL_TouchID touchID)
     return 0;
 }
 
-SDL_Finger *
-SDL_GetTouchFinger(SDL_TouchID touchID, int index)
+SDL_Finger *SDL_GetTouchFinger(SDL_TouchID touchID, int index)
 {
     SDL_Touch *touch = SDL_GetTouch(touchID);
     if (touch == NULL) {
diff --git a/src/file/SDL_rwops.c b/src/file/SDL_rwops.c
index 3e3f4bb9e..e5a16743b 100644
--- a/src/file/SDL_rwops.c
+++ b/src/file/SDL_rwops.c
@@ -522,8 +522,7 @@ static int SDLCALL mem_close(SDL_RWops *context)
 
 /* Functions to create SDL_RWops structures from various data sources */
 
-SDL_RWops *
-SDL_RWFromFile(const char *file, const char *mode)
+SDL_RWops *SDL_RWFromFile(const char *file, const char *mode)
 {
     SDL_RWops *rwops = NULL;
     if (file == NULL || !*file || mode == NULL || !*mode) {
@@ -616,8 +615,7 @@ SDL_RWFromFile(const char *file, const char *mode)
 }
 
 #ifdef HAVE_STDIO_H
-SDL_RWops *
-SDL_RWFromFP(FILE * fp, SDL_bool autoclose)
+SDL_RWops *SDL_RWFromFP(FILE * fp, SDL_bool autoclose)
 {
     SDL_RWops *rwops = NULL;
 
@@ -635,16 +633,14 @@ SDL_RWFromFP(FILE * fp, SDL_bool autoclose)
     return rwops;
 }
 #else
-SDL_RWops *
-SDL_RWFromFP(void * fp, SDL_bool autoclose)
+SDL_RWops *SDL_RWFromFP(void * fp, SDL_bool autoclose)
 {
     SDL_SetError("SDL not compiled with stdio support");
     return NULL;
 }
 #endif /* HAVE_STDIO_H */
 
-SDL_RWops *
-SDL_RWFromMem(void *mem, int size)
+SDL_RWops *SDL_RWFromMem(void *mem, int size)
 {
     SDL_RWops *rwops = NULL;
     if (mem == NULL) {
@@ -671,8 +667,7 @@ SDL_RWFromMem(void *mem, int size)
     return rwops;
 }
 
-SDL_RWops *
-SDL_RWFromConstMem(const void *mem, int size)
+SDL_RWops *SDL_RWFromConstMem(const void *mem, int size)
 {
     SDL_RWops *rwops = NULL;
     if (mem == NULL) {
@@ -699,8 +694,7 @@ SDL_RWFromConstMem(const void *mem, int size)
     return rwops;
 }
 
-SDL_RWops *
-SDL_AllocRW(void)
+SDL_RWops *SDL_AllocRW(void)
 {
     SDL_RWops *area;
 
@@ -719,8 +713,7 @@ void SDL_FreeRW(SDL_RWops *area)
 }
 
 /* Load all the data from an SDL data stream */
-void *
-SDL_LoadFile_RW(SDL_RWops *src, size_t *datasize, int freesrc)
+void *SDL_LoadFile_RW(SDL_RWops *src, size_t *datasize, int freesrc)
 {
     static const Sint64 FILE_CHUNK_SIZE = 1024;
     Sint64 size;
@@ -771,26 +764,22 @@ done:
     return data;
 }
 
-void *
-SDL_LoadFile(const char *file, size_t *datasize)
+void *SDL_LoadFile(const char *file, size_t *datasize)
 {
     return SDL_LoadFile_RW(SDL_RWFromFile(file, "rb"), datasize, 1);
 }
 
-Sint64
-SDL_RWsize(SDL_RWops *context)
+Sint64 SDL_RWsize(SDL_RWops *context)
 {
     return context->size(context);
 }
 
-Sint64
-SDL_RWseek(SDL_RWops *context, Sint64 offset, int whence)
+Sint64 SDL_RWseek(SDL_RWops *context, Sint64 offset, int whence)
 {
     return context->seek(context, offset, whence);
 }
 
-Sint64
-SDL_RWtell(SDL_RWops *context)
+Sint64 SDL_RWtell(SDL_RWops *context)
 {
     return context->seek(context, 0, RW_SEEK_CUR);
 }
@@ -822,8 +811,7 @@ Uint8 SDL_ReadU8(SDL_RWops *src)
     return value;
 }
 
-Uint16
-SDL_ReadLE16(SDL_RWops *src)
+Uint16 SDL_ReadLE16(SDL_RWops *src)
 {
     Uint16 value = 0;
 
@@ -831,8 +819,7 @@ SDL_ReadLE16(SDL_RWops *src)
     return SDL_SwapLE16(value);
 }
 
-Uint16
-SDL_ReadBE16(SDL_RWops *src)
+Uint16 SDL_ReadBE16(SDL_RWops *src)
 {
     Uint16 value = 0;
 
@@ -840,8 +827,7 @@ SDL_ReadBE16(SDL_RWops *src)
     return SDL_SwapBE16(value);
 }
 
-Uint32
-SDL_ReadLE32(SDL_RWops *src)
+Uint32 SDL_ReadLE32(SDL_RWops *src)
 {
     Uint32 value = 0;
 
@@ -849,8 +835,7 @@ SDL_ReadLE32(SDL_RWops *src)
     return SDL_SwapLE32(value);
 }
 
-Uint32
-SDL_ReadBE32(SDL_RWops *src)
+Uint32 SDL_ReadBE32(SDL_RWops *src)
 {
     Uint32 value = 0;
 
@@ -858,8 +843,7 @@ SDL_ReadBE32(SDL_RWops *src)
     return SDL_SwapBE32(value);
 }
 
-Uint64
-SDL_ReadLE64(SDL_RWops *src)
+Uint64 SDL_ReadLE64(SDL_RWops *src)
 {
     Uint64 value = 0;
 
@@ -867,8 +851,7 @@ SDL_ReadLE64(SDL_RWops *src)
     return SDL_SwapLE64(value);
 }
 
-Uint64
-SDL_ReadBE64(SDL_RWops *src)
+Uint64 SDL_ReadBE64(SDL_RWops *src)
 {
     Uint64 value = 0;
 
diff --git a/src/file/n3ds/SDL_rwopsromfs.c b/src/file/n3ds/SDL_rwopsromfs.c
index fbe8be87e..467bae3c4 100644
--- a/src/file/n3ds/SDL_rwopsromfs.c
+++ b/src/file/n3ds/SDL_rwopsromfs.c
@@ -23,21 +23,20 @@
 #include "SDL_error.h"
 
 /* Checks if the mode is a kind of reading */
-SDL_FORCE_INLINE SDL_bool IsReadMode(const char *mode);
+static SDL_bool IsReadMode(const char *mode);
 
 /* Checks if the file starts with the given prefix */
-SDL_FORCE_INLINE SDL_bool HasPrefix(const char *file, const char *prefix);
+static SDL_bool HasPrefix(const char *file, const char *prefix);
 
-SDL_FORCE_INLINE FILE *TryOpenFile(const char *file, const char *mode);
-SDL_FORCE_INLINE FILE *TryOpenInRomfs(const char *file, const char *mode);
+static FILE *TryOpenFile(const char *file, const char *mode);
+static FILE *TryOpenInRomfs(const char *file, const char *mode);
 
 /* Nintendo 3DS applications may embed resources in the executable. The
   resources are stored in a special read-only partition prefixed with
   'romfs:/'. As such, when opening a file, we should first try the romfs
   unless sdmc is specifically mentionned.
 */
-FILE *
-N3DS_FileOpen(const char *file, const char *mode)
+FILE *N3DS_FileOpen(const char *file, const char *mode)
 {
     /* romfs are read-only */
     if (!IsReadMode(mode)) {
@@ -52,20 +51,17 @@ N3DS_FileOpen(const char *file, const char *mode)
     return TryOpenFile(file, mode);
 }
 
-SDL_FORCE_INLINE SDL_bool
-IsReadMode(const char *mode)
+static SDL_bool IsReadMode(const char *mode)
 {
     return SDL_strchr(mode, 'r') != NULL;
 }
 
-SDL_FORCE_INLINE SDL_bool
-HasPrefix(const char *file, const char *prefix)
+static SDL_bool HasPrefix(const char *file, const char *prefix)
 {
     return SDL_strncmp(prefix, file, SDL_strlen(prefix)) == 0;
 }
 
-SDL_FORCE_INLINE FILE *
-TryOpenFile(const char *file, const char *mode)
+static FILE *TryOpenFile(const char *file, const char *mode)
 {
     FILE *fp = NULL;
 
@@ -77,8 +73,7 @@ TryOpenFile(const char *file, const char *mode)
     return fp;
 }
 
-SDL_FORCE_INLINE FILE *
-TryOpenInRomfs(const char *file, const char *mode)
+static FILE *TryOpenInRomfs(const char *file, const char *mode)
 {
     FILE *fp = NULL;
     char *prefixed_filepath = NULL;
diff --git a/src/filesystem/android/SDL_sysfilesystem.c b/src/filesystem/android/SDL_sysfilesystem.c
index da397986f..9df679013 100644
--- a/src/filesystem/android/SDL_sysfilesystem.c
+++ b/src/filesystem/android/SDL_sysfilesystem.c
@@ -32,16 +32,14 @@
 #include "SDL_system.h"
 
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     /* The current working directory is / on Android */
     SDL_Unsupported();
     return NULL;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     const char *path = SDL_AndroidGetInternalStoragePath();
     if (path) {
diff --git a/src/filesystem/cocoa/SDL_sysfilesystem.m b/src/filesystem/cocoa/SDL_sysfilesystem.m
index f80c0be54..94ee7830e 100644
--- a/src/filesystem/cocoa/SDL_sysfilesystem.m
+++ b/src/filesystem/cocoa/SDL_sysfilesystem.m
@@ -33,8 +33,7 @@
 #include "SDL_stdinc.h"
 #include "SDL_filesystem.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     @autoreleasepool {
         NSBundle *bundle = [NSBundle mainBundle];
@@ -68,8 +67,7 @@ SDL_GetBasePath(void)
     }
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     @autoreleasepool {
         char *retval = NULL;
diff --git a/src/filesystem/dummy/SDL_sysfilesystem.c b/src/filesystem/dummy/SDL_sysfilesystem.c
index 7492a5dd1..83819edeb 100644
--- a/src/filesystem/dummy/SDL_sysfilesystem.c
+++ b/src/filesystem/dummy/SDL_sysfilesystem.c
@@ -28,15 +28,13 @@
 #include "SDL_error.h"
 #include "SDL_filesystem.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     SDL_Unsupported();
     return NULL;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     SDL_Unsupported();
     return NULL;
diff --git a/src/filesystem/emscripten/SDL_sysfilesystem.c b/src/filesystem/emscripten/SDL_sysfilesystem.c
index 4796dba30..af39e3626 100644
--- a/src/filesystem/emscripten/SDL_sysfilesystem.c
+++ b/src/filesystem/emscripten/SDL_sysfilesystem.c
@@ -32,15 +32,13 @@
 
 #include <emscripten/emscripten.h>
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     char *retval = "/";
     return SDL_strdup(retval);
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     const char *append = "/libsdl/";
     char *retval;
diff --git a/src/filesystem/haiku/SDL_sysfilesystem.cc b/src/filesystem/haiku/SDL_sysfilesystem.cc
index b560aa690..b6dc7d136 100644
--- a/src/filesystem/haiku/SDL_sysfilesystem.cc
+++ b/src/filesystem/haiku/SDL_sysfilesystem.cc
@@ -34,8 +34,7 @@
 #include "SDL_stdinc.h"
 #include "SDL_filesystem.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     image_info info;
     int32 cookie = 0;
@@ -69,8 +68,7 @@ SDL_GetBasePath(void)
 }
 
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     // !!! FIXME: is there a better way to do this?
     const char *home = SDL_getenv("HOME");
diff --git a/src/filesystem/n3ds/SDL_sysfilesystem.c b/src/filesystem/n3ds/SDL_sysfilesystem.c
index 628669941..fe2fd3ff8 100644
--- a/src/filesystem/n3ds/SDL_sysfilesystem.c
+++ b/src/filesystem/n3ds/SDL_sysfilesystem.c
@@ -35,15 +35,13 @@
 SDL_FORCE_INLINE char *MakePrefPath(const char *app);
 SDL_FORCE_INLINE int CreatePrefPathDir(const char *pref);
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     char *base_path = SDL_strdup("romfs:/");
     return base_path;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     char *pref_path = NULL;
     if (app == NULL) {
diff --git a/src/filesystem/nacl/SDL_sysfilesystem.c b/src/filesystem/nacl/SDL_sysfilesystem.c
index 9a067aaec..91e7a9881 100644
--- a/src/filesystem/nacl/SDL_sysfilesystem.c
+++ b/src/filesystem/nacl/SDL_sysfilesystem.c
@@ -24,15 +24,13 @@
 
 #ifdef SDL_FILESYSTEM_NACL
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     SDL_Unsupported();
     return NULL;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     SDL_Unsupported();
     return NULL;
diff --git a/src/filesystem/os2/SDL_sysfilesystem.c b/src/filesystem/os2/SDL_sysfilesystem.c
index 8eccd76a2..fb7d52815 100644
--- a/src/filesystem/os2/SDL_sysfilesystem.c
+++ b/src/filesystem/os2/SDL_sysfilesystem.c
@@ -36,8 +36,7 @@
 #include <os2.h>
 
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     PTIB    tib;
     PPIB    pib;
@@ -71,8 +70,7 @@ SDL_GetBasePath(void)
     return OS2_SysToUTF8(acBuf);
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     PSZ     pszPath;
     CHAR    acBuf[CCHMAXPATH];
diff --git a/src/filesystem/ps2/SDL_sysfilesystem.c b/src/filesystem/ps2/SDL_sysfilesystem.c
index 75edcdfac..86dcb14b6 100644
--- a/src/filesystem/ps2/SDL_sysfilesystem.c
+++ b/src/filesystem/ps2/SDL_sysfilesystem.c
@@ -31,8 +31,7 @@
 #include "SDL_error.h"
 #include "SDL_filesystem.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     char *retval;
     size_t len;
@@ -78,8 +77,7 @@ static void recursive_mkdir(const char *dir)
     mkdir(tmp, S_IRWXU);
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     char *retval = NULL;
     size_t len;
diff --git a/src/filesystem/psp/SDL_sysfilesystem.c b/src/filesystem/psp/SDL_sysfilesystem.c
index 63f90a799..c163fa146 100644
--- a/src/filesystem/psp/SDL_sysfilesystem.c
+++ b/src/filesystem/psp/SDL_sysfilesystem.c
@@ -31,8 +31,7 @@
 #include "SDL_error.h"
 #include "SDL_filesystem.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     char *retval = NULL;
     size_t len;
@@ -46,8 +45,7 @@ SDL_GetBasePath(void)
     return retval;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     char *retval = NULL;
     size_t len;
diff --git a/src/filesystem/riscos/SDL_sysfilesystem.c b/src/filesystem/riscos/SDL_sysfilesystem.c
index 97296ecf8..253734065 100644
--- a/src/filesystem/riscos/SDL_sysfilesystem.c
+++ b/src/filesystem/riscos/SDL_sysfilesystem.c
@@ -129,8 +129,7 @@ static _kernel_oserror *createDirectoryRecursive(char *path)
     return _kernel_swi(OS_File, &regs, &regs);
 }
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     _kernel_swi_regs regs;
     _kernel_oserror *error;
@@ -157,8 +156,7 @@ SDL_GetBasePath(void)
     return retval;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     char *canon, *dir, *retval;
     size_t len;
diff --git a/src/filesystem/unix/SDL_sysfilesystem.c b/src/filesystem/unix/SDL_sysfilesystem.c
index 565d0b998..42e6e48ae 100644
--- a/src/filesystem/unix/SDL_sysfilesystem.c
+++ b/src/filesystem/unix/SDL_sysfilesystem.c
@@ -45,8 +45,7 @@
 
 /* QNX's /proc/self/exefile is a text file and not a symlink. */
 #if !defined(__QNXNTO__)
-static char *
-readSymLink(const char *path)
+static char *readSymLink(const char *path)
 {
     char *retval = NULL;
     ssize_t len = 64;
@@ -129,8 +128,7 @@ static char *search_path_for_binary(const char *bin)
 }
 #endif
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     char *retval = NULL;
 
@@ -271,8 +269,7 @@ SDL_GetBasePath(void)
     return retval;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     /*
      * We use XDG's base directory spec, even if you're not on Linux.
diff --git a/src/filesystem/vita/SDL_sysfilesystem.c b/src/filesystem/vita/SDL_sysfilesystem.c
index afca9d897..bb572708a 100644
--- a/src/filesystem/vita/SDL_sysfilesystem.c
+++ b/src/filesystem/vita/SDL_sysfilesystem.c
@@ -39,16 +39,14 @@
 #include "SDL_filesystem.h"
 #include "SDL_rwops.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     const char *basepath = "app0:/";
     char *retval = SDL_strdup(basepath);
     return retval;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     const char *envr = "ux0:/data/";
     char *retval = NULL;
diff --git a/src/filesystem/windows/SDL_sysfilesystem.c b/src/filesystem/windows/SDL_sysfilesystem.c
index e0a1e94eb..06842706f 100644
--- a/src/filesystem/windows/SDL_sysfilesystem.c
+++ b/src/filesystem/windows/SDL_sysfilesystem.c
@@ -32,8 +32,7 @@
 #include "SDL_stdinc.h"
 #include "SDL_filesystem.h"
 
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     DWORD buflen = 128;
     WCHAR *path = NULL;
@@ -83,8 +82,7 @@ SDL_GetBasePath(void)
     return retval;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     /*
      * Vista and later has a new API for this, but SHGetFolderPath works there,
@@ -175,15 +173,13 @@ SDL_GetPrefPath(const char *org, const char *app)
 #ifdef SDL_FILESYSTEM_XBOX
 #include "SDL_filesystem.h"
 #include "SDL_error.h"
-char *
-SDL_GetBasePath(void)
+char *SDL_GetBasePath(void)
 {
     SDL_Unsupported();
     return NULL;
 }
 
-char *
-SDL_GetPrefPath(const char *org, const char *app)
+char *SDL_GetPrefPath(const char *org, const char *app)
 {
     SDL_Unsupported();
     return NULL;
diff --git a/src/haptic/SDL_haptic.c b/src/haptic/SDL_haptic.c
index c3220dab5..ee64bcbd2 100644
--- a/src/haptic/SDL_haptic.c
+++ b/src/haptic/SDL_haptic.c
@@ -85,8 +85,7 @@ int SDL_NumHaptics(void)
 /*
  * Gets the name of a Haptic device by index.
  */
-const char *
-SDL_HapticName(int device_index)
+const char *SDL_HapticName(int device_index)
 {
     if ((device_index < 0) || (device_index >= SDL_NumHaptics())) {
         SDL_SetError("Haptic: There are %d haptic devices available",
@@ -99,8 +98,7 @@ SDL_HapticName(int device_index)
 /*
  * Opens a Haptic device.
  */
-SDL_Haptic *
-SDL_HapticOpen(int device_index)
+SDL_Haptic *SDL_HapticOpen(int device_index)
 {
     SDL_Haptic *haptic;
     SDL_Haptic *hapticlist;
@@ -211,8 +209,7 @@ int SDL_MouseIsHaptic(void)
 /*
  * Returns the haptic device if mouse is haptic or NULL elsewise.
  */
-SDL_Haptic *
-SDL_HapticOpenFromMouse(void)
+SDL_Haptic *SDL_HapticOpenFromMouse(void)
 {
     int device_index;
 
@@ -257,8 +254,7 @@ int SDL_JoystickIsHaptic(SDL_Joystick *joystick)
 /*
  * Opens a haptic device from a joystick.
  */
-SDL_Haptic *
-SDL_HapticOpenFromJoystick(SDL_Joystick *joystick)
+SDL_Haptic *SDL_HapticOpenFromJoystick(SDL_Joystick *joystick)
 {
     SDL_Haptic *haptic;
     SDL_Haptic *hapticlist;
@@ -415,8 +411,7 @@ int SDL_HapticNumEffectsPlaying(SDL_Haptic *haptic)
 /*
  * Returns supported effects by the device.
  */
-unsigned int
-SDL_HapticQuery(SDL_Haptic *haptic)
+unsigned int SDL_HapticQuery(SDL_Haptic *haptic)
 {
     if (!ValidHaptic(haptic)) {
         return 0; /* same as if no effects were supported */
diff --git a/src/haptic/android/SDL_syshaptic.c b/src/haptic/android/SDL_syshaptic.c
index 4d137aea7..111c43c0b 100644
--- a/src/haptic/android/SDL_syshaptic.c
+++ b/src/haptic/android/SDL_syshaptic.c
@@ -89,8 +89,7 @@ static SDL_hapticlist_item *HapticByDevId(int device_id)
     return NULL;
 }
 
-const char *
-SDL_SYS_HapticName(int index)
+const char *SDL_SYS_HapticName(int index)
 {
     SDL_hapticlist_item *item = HapticByOrder(index);
     if (item == NULL) {
diff --git a/src/haptic/darwin/SDL_syshaptic.c b/src/haptic/darwin/SDL_syshaptic.c
index e2acb3743..dea1ee7c2 100644
--- a/src/haptic/darwin/SDL_syshaptic.c
+++ b/src/haptic/darwin/SDL_syshaptic.c
@@ -319,8 +319,7 @@ int MacHaptic_MaybeRemoveDevice(io_object_t device)
 /*
  * Return the name of a haptic device, does not need to be opened.
  */
-const char *
-SDL_SYS_HapticName(int index)
+const char *SDL_SYS_HapticName(int index)
 {
     SDL_hapticlist_item *item;
     item = HapticByDevIndex(index);
diff --git a/src/haptic/dummy/SDL_syshaptic.c b/src/haptic/dummy/SDL_syshaptic.c
index 479a0d4ff..433093ccb 100644
--- a/src/haptic/dummy/SDL_syshaptic.c
+++ b/src/haptic/dummy/SDL_syshaptic.c
@@ -40,8 +40,7 @@ int SDL_SYS_NumHaptics(void)
     return 0;
 }
 
-const char *
-SDL_SYS_HapticName(int index)
+const char *SDL_SYS_HapticName(int index)
 {
     SDL_SYS_LogicError();
     return NULL;
diff --git a/src/haptic/linux/SDL_syshaptic.c b/src/haptic/linux/SDL_syshaptic.c
index 5c07a5cc7..55a8ca1a1 100644
--- a/src/haptic/linux/SDL_syshaptic.c
+++ b/src/haptic/linux/SDL_syshaptic.c
@@ -351,8 +351,7 @@ static const char *SDL_SYS_HapticNameFromFD(int fd)
 /*
  * Return the name of a haptic device, does not need to be opened.
  */
-const char *
-SDL_SYS_HapticName(int index)
+const char *SDL_SYS_HapticName(int index)
 {
     SDL_hapticlist_item *item;
     int fd;
diff --git a/src/haptic/windows/SDL_windowshaptic.c b/src/haptic/windows/SDL_windowshaptic.c
index 59c1e5009..01a4a7ec9 100644
--- a/src/haptic/windows/SDL_windowshaptic.c
+++ b/src/haptic/windows/SDL_windowshaptic.c
@@ -136,8 +136,7 @@ static SDL_hapticlist_item *HapticByDevIndex(int device_index)
 /*
  * Return the name of a haptic device, does not need to be opened.
  */
-const char *
-SDL_SYS_HapticName(int index)
+const char *SDL_SYS_HapticName(int index)
 {
     SDL_hapticlist_item *item = HapticByDevIndex(index);
     return item->name;
diff --git a/src/hidapi/SDL_hidapi.c b/src/hidapi/SDL_hidapi.c
index 6af07191f..6c3e43fb6 100644
--- a/src/hidapi/SDL_hidapi.c
+++ b/src/hidapi/SDL_hidapi.c
@@ -198,14 +198,12 @@ static int SDL_inotify_init1(void)
 }
 #endif
 
-static int
-StrHasPrefix(const char *string, const char *prefix)
+static int StrHasPrefix(const char *string, const char *prefix)
 {
     return SDL_strncmp(string, prefix, SDL_strlen(prefix)) == 0;
 }
 
-static int
-StrIsInteger(const char *string)
+static int StrIsInteger(const char *string)
 {
     const char *p;
 
@@ -223,8 +221,7 @@ StrIsInteger(const char *string)
 }
 #endif /* HAVE_INOTIFY */
 
-static void
-HIDAPI_InitializeDiscovery()
+static void HIDAPI_InitializeDiscovery()
 {
     SDL_HIDAPI_discovery.m_bInitialized = SDL_TRUE;
     SDL_HIDAPI_discovery.m_unDeviceChangeCounter = 1;
@@ -363,8 +360,7 @@ HIDAPI_InitializeDiscovery()
     }
 }
 
-static void
-HIDAPI_UpdateDiscovery()
+static void HIDAPI_UpdateDiscovery()
 {
     if (!SDL_HIDAPI_discovery.m_bInitialized) {
         HIDAPI_InitializeDiscovery();
@@ -481,8 +477,7 @@ HIDAPI_UpdateDiscovery()
     }
 }
 
-static void
-HIDAPI_ShutdownDiscovery()
+static void HIDAPI_ShutdownDiscovery()
 {
     if (!SDL_HIDAPI_discovery.m_bInitialized) {
         return;
@@ -813,8 +808,7 @@ static struct
 #ifndef __FreeBSD__
 /* this is awkwardly inlined, so we need to re-implement it here
  * so we can override the libusb_control_transfer call */
-static int
-SDL_libusb_get_string_descriptor(libusb_device_handle *dev,
+static int SDL_libusb_get_string_descriptor(libusb_device_handle *dev,
                                  uint8_t descriptor_index, uint16_t lang_id,
                                  unsigned char *data, int length)
 {
@@ -965,8 +959,7 @@ static char device_magic;
 
 #if HAVE_PLATFORM_BACKEND || HAVE_DRIVER_BACKEND || defined(HAVE_LIBUSB)
 
-static SDL_hid_device *
-CreateHIDDeviceWrapper(void *device, const struct hidapi_backend *backend)
+static SDL_hid_device *CreateHIDDeviceWrapper(void *device, const struct hidapi_backend *backend)
 {
     SDL_hid_device *wrapper = (SDL_hid_device *)SDL_malloc(sizeof(*wrapper));
     wrapper->magic = &device_magic;
@@ -977,8 +970,7 @@ CreateHIDDeviceWrapper(void *device, const struct hidapi_backend *backend)
 
 #endif /* HAVE_PLATFORM_BACKEND || HAVE_DRIVER_BACKEND || HAVE_LIBUSB */
 
-static void
-DeleteHIDDeviceWrapper(SDL_hid_device *device)
+static void DeleteHIDDeviceWrapper(SDL_hid_device *device)
 {
     device->magic = NULL;
     SDL_free(device);
@@ -1006,8 +998,7 @@ DeleteHIDDeviceWrapper(SDL_hid_device *device)
         pDst->var = NULL;                  \
     }
 
-static void
-CopyHIDDeviceInfo(struct SDL_hid_device_info *pSrc, struct SDL_hid_device_info *pDst)
+static void CopyHIDDeviceInfo(struct SDL_hid_device_info *pSrc, struct SDL_hid_device_info *pDst)
 {
     COPY_IF_EXISTS(path)
     pDst->vendor_id = pSrc->vendor_id;
diff --git a/src/joystick/darwin/SDL_iokitjoystick.c b/src/joystick/darwin/SDL_iokitjoystick.c
index 3d748eb3c..0ac9b5061 100644
--- a/src/joystick/darwin/SDL_iokitjoystick.c
+++ b/src/joystick/darwin/SDL_iokitjoystick.c
@@ -701,15 +701,13 @@ static void DARWIN_JoystickDetect(void)
     }
 }
 
-const char *
-DARWIN_JoystickGetDeviceName(int device_index)
+const char *DARWIN_JoystickGetDeviceName(int device_index)
 {
     recDevice *device = GetDeviceForIndex(device_index);
     return device ? device->product : "UNKNOWN";
 }
 
-const char *
-DARWIN_JoystickGetDevicePath(int device_index)
+const char *DARWIN_JoystickGetDevicePath(int device_index)
 {
     return NULL;
 }
diff --git a/src/joystick/hidapi/SDL_hidapi_switch.c b/src/joystick/hidapi/SDL_hidapi_switch.c
index 67902fc38..3b6a9c885 100644
--- a/src/joystick/hidapi/SDL_hidapi_switch.c
+++ b/src/joystick/hidapi/SDL_hidapi_switch.c
@@ -1764,8 +1764,7 @@ static void HandleSimpleControllerState(SDL_Joystick *joystick, SDL_DriverSwitch
     ctx->m_lastSimpleState = *packet;
 }
 
-static void
-SendSensorUpdate(SDL_Joystick *joystick, SDL_DriverSwitch_Context *ctx, SDL_SensorType type, Uint64 timestamp_us, const Sint16 *values)
+static void SendSensorUpdate(SDL_Joystick *joystick, SDL_DriverSwitch_Context *ctx, SDL_SensorType type, Uint64 timestamp_us, const Sint16 *values)
 {
     float data[3];
 
diff --git a/src/joystick/hidapi/SDL_hidapijoystick.c b/src/joystick/hidapi/SDL_hidapijoystick.c
index 6364930ce..2e7d605d4 100644
--- a/src/joystick/hidapi/SDL_hidapijoystick.c
+++ b/src/joystick/hidapi/SDL_hidapijoystick.c
@@ -1163,8 +1163,7 @@ static SDL_bool HIDAPI_IsEquivalentToDevice(Uint16 vendor_id, Uint16 product_id,
     return SDL_FALSE;
 }
 
-SDL_bool
-HIDAPI_IsDeviceTypePresent(SDL_GameControllerType type)
+SDL_bool HIDAPI_IsDeviceTypePresent(SDL_GameControllerType type)
 {
     SDL_HIDAPI_Device *device;
     SDL_bool result = SDL_FALSE;
@@ -1245,8 +1244,7 @@ SDL_bool HIDAPI_IsDevicePresent(Uint16 vendor_id, Uint16 product_id, Uint16 vers
     return result;
 }
 
-SDL_JoystickType
-HIDAPI_GetJoystickTypeFromGUID(SDL_JoystickGUID guid)
+SDL_JoystickType HIDAPI_GetJoystickTypeFromGUID(SDL_JoystickGUID guid)
 {
     SDL_HIDAPI_Device *device;
     SDL_JoystickType type = SDL_JOYSTICK_TYPE_UNKNOWN;
@@ -1263,8 +1261,7 @@ HIDAPI_GetJoystickTypeFromGUID(SDL_JoystickGUID guid)
     return type;
 }
 
-SDL_GameControllerType
-HIDAPI_GetGameControllerTypeFromGUID(SDL_JoystickGUID guid)
+SDL_GameControllerType HIDAPI_GetGameControllerTypeFromGUID(SDL_JoystickGUID guid)
 {
     SDL_HIDAPI_Device *device;
     SDL_GameControllerType type = SDL_CONTROLLER_TYPE_UNKNOWN;
diff --git a/src/joystick/iphoneos/SDL_mfijoystick.m b/src/joystick/iphoneos/SDL_mfijoystick.m
index 8ed87e6fd..b9aeed703 100644
--- a/src/joystick/iphoneos/SDL_mfijoystick.m
+++ b/src/joystick/iphoneos/SDL_mfijoystick.m
@@ -1726,8 +1726,7 @@ static GCControllerDirectionPad *GetDirectionalPadForController(GCController *co
 
 static char elementName[256];
 
-const char *
-IOS_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button)
+const char *IOS_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button)
 {
     elementName[0] = '\0';
 #if defined(SDL_JOYSTICK_MFI) && defined(ENABLE_PHYSICAL_INPUT_PROFILE)
@@ -1842,8 +1841,7 @@ IOS_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController *gamecontrol
     return elementName;
 }
 
-const char *
-IOS_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis)
+const char *IOS_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis)
 {
     elementName[0] = '\0';
 #if defined(SDL_JOYSTICK_MFI) && defined(ENABLE_PHYSICAL_INPUT_PROFILE)
diff --git a/src/joystick/windows/SDL_dinputjoystick.c b/src/joystick/windows/SDL_dinputjoystick.c
index 8826f90c0..bac795683 100644
--- a/src/joystick/windows/SDL_dinputjoystick.c
+++ b/src/joystick/windows/SDL_dinputjoystick.c
@@ -593,8 +593,7 @@ err:
 #undef CHECK
 }
 
-SDL_bool
-SDL_DINPUT_JoystickPresent(Uint16 vendor_id, Uint16 product_id, Uint16 version_number)
+SDL_bool SDL_DINPUT_JoystickPresent(Uint16 vendor_id, Uint16 product_id, Uint16 version_number)
 {
     Joystick_PresentData data;
 
@@ -945,8 +944,7 @@ int SDL_DINPUT_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumbl
     return 0;
 }
 
-Uint32
-SDL_DINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
+Uint32 SDL_DINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
 {
     Uint32 result = 0;
 
@@ -1177,8 +1175,7 @@ void SDL_DINPUT_JoystickDetect(JoyStick_DeviceData **pContext)
 {
 }
 
-SDL_bool
-SDL_DINPUT_JoystickPresent(Uint16 vendor, Uint16 product, Uint16 version)
+SDL_bool SDL_DINPUT_JoystickPresent(Uint16 vendor, Uint16 product, Uint16 version)
 {
     return SDL_FALSE;
 }
@@ -1193,8 +1190,7 @@ int SDL_DINPUT_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumbl
     return SDL_Unsupported();
 }
 
-Uint32
-SDL_DINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
+Uint32 SDL_DINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
 {
     return 0;
 }
diff --git a/src/joystick/windows/SDL_rawinputjoystick.c b/src/joystick/windows/SDL_rawinputjoystick.c
index 59b16953b..c0d951369 100644
--- a/src/joystick/windows/SDL_rawinputjoystick.c
+++ b/src/joystick/windows/SDL_rawinputjoystick.c
@@ -883,14 +883,12 @@ static int RAWINPUT_JoystickGetCount(void)
     return SDL_RAWINPUT_numjoysticks;
 }
 
-SDL_bool
-RAWINPUT_IsEnabled()
+SDL_bool RAWINPUT_IsEnabled()
 {
     return SDL_RAWINPUT_inited;
 }
 
-SDL_bool
-RAWINPUT_IsDevicePresent(Uint16 vendor_id, Uint16 product_id, Uint16 version, const char *name)
+SDL_bool RAWINPUT_IsDevicePresent(Uint16 vendor_id, Uint16 product_id, Uint16 version, const char *name)
 {
     SDL_RAWINPUT_Device *device;
 
@@ -1874,8 +1872,7 @@ static void RAWINPUT_JoystickClose(SDL_Joystick *joystick)
     }
 }
 
-SDL_bool
-RAWINPUT_RegisterNotifications(HWND hWnd)
+SDL_bool RAWINPUT_RegisterNotifications(HWND hWnd)
 {
     RAWINPUTDEVICE rid[SDL_arraysize(subscribed_devices)];
     int i;
diff --git a/src/joystick/windows/SDL_xinputjoystick.c b/src/joystick/windows/SDL_xinputjoystick.c
index 66e5f8b2a..a0cf91102 100644
--- a/src/joystick/windows/SDL_xinputjoystick.c
+++ b/src/joystick/windows/SDL_xinputjoystick.c
@@ -497,8 +497,7 @@ int SDL_XINPUT_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumbl
     return 0;
 }
 
-Uint32
-SDL_XINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
+Uint32 SDL_XINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
 {
     return SDL_JOYCAP_RUMBLE;
 }
@@ -583,8 +582,7 @@ int SDL_XINPUT_JoystickRumble(SDL_Joystick *joystick, Uint16 low_frequency_rumbl
     return SDL_Unsupported();
 }
 
-Uint32
-SDL_XINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
+Uint32 SDL_XINPUT_JoystickGetCapabilities(SDL_Joystick *joystick)
 {
     return 0;
 }
diff --git a/src/loadso/dlopen/SDL_sysloadso.c b/src/loadso/dlopen/SDL_sysloadso.c
index fb9c1d776..7e80cbfbe 100644
--- a/src/loadso/dlopen/SDL_sysloadso.c
+++ b/src/loadso/dlopen/SDL_sysloadso.c
@@ -34,8 +34,7 @@
 #include "../../video/uikit/SDL_uikitvideo.h"
 #endif
 
-void *
-SDL_LoadObject(const char *sofile)
+void *SDL_LoadObject(const char *sofile)
 {
     void *handle;
     const char *loaderror;
@@ -55,8 +54,7 @@ SDL_LoadObject(const char *sofile)
     return handle;
 }
 
-void *
-SDL_LoadFunction(void *handle, const char *name)
+void *SDL_LoadFunction(void *handle, const char *name)
 {
     void *symbol = dlsym(handle, name);
     if (symbol == NULL) {
diff --git a/src/loadso/dummy/SDL_sysloadso.c b/src/loadso/dummy/SDL_sysloadso.c
index 1cb8f199d..e9c2e28a5 100644
--- a/src/loadso/dummy/SDL_sysloadso.c
+++ b/src/loadso/dummy/SDL_sysloadso.c
@@ -27,16 +27,14 @@
 
 #include "SDL_loadso.h"
 
-void *
-SDL_LoadObject(const char *sofile)
+void *SDL_LoadObject(const char *sofile)
 {
     const char *loaderror = "SDL_LoadObject() not implemented";
     SDL_SetError("Failed loading %s: %s", sofile, loaderror);
     return NULL;
 }
 
-void *
-SDL_LoadFunction(void *handle, const char *name)
+void *SDL_LoadFunction(void *handle, const char *name)
 {
     const char *loaderror = "SDL_LoadFunction() not implemented";
     SDL_SetError("Failed loading %s: %s", name, loaderror);
diff --git a/src/loadso/os2/SDL_sysloadso.c b/src/loadso/os2/SDL_sysloadso.c
index 56c1271cf..c5c8b3b32 100644
--- a/src/loadso/os2/SDL_sysloadso.c
+++ b/src/loadso/os2/SDL_sysloadso.c
@@ -32,8 +32,7 @@
 #define INCL_DOSERRORS
 #include <os2.h>
 
-void *
-SDL_LoadObject(const char *sofile)
+void *SDL_LoadObject(const char *sofile)
 {
     ULONG   ulRC;
     HMODULE hModule;
@@ -65,8 +64,7 @@ SDL_LoadObject(const char *sofile)
     return (void *)hModule;
 }
 
-void *
-SDL_LoadFunction(void *handle, const char *name)
+void *SDL_LoadFunction(void *handle, const char *name)
 {
     ULONG   ulRC;
     PFN     pFN;
@@ -90,8 +88,7 @@ SDL_LoadFunction(void *handle, const char *name)
     return (void *)pFN;
 }
 
-void
-SDL_UnloadObject(void *handle)
+void SDL_UnloadObject(void *handle)
 {
     if (handle != NULL) {
         DosFreeModule((HMODULE)handle);
diff --git a/src/loadso/windows/SDL_sysloadso.c b/src/loadso/windows/SDL_sysloadso.c
index d3744a1de..ca43370c8 100644
--- a/src/loadso/windows/SDL_sysloadso.c
+++ b/src/loadso/windows/SDL_sysloadso.c
@@ -29,8 +29,7 @@
 
 #include "SDL_loadso.h"
 
-void *
-SDL_LoadObject(const char *sofile)
+void *SDL_LoadObject(const char *sofile)
 {
     void *handle;
     LPTSTR tstr;
@@ -61,8 +60,7 @@ SDL_LoadObject(const char *sofile)
     return handle;
 }
 
-void *
-SDL_LoadFunction(void *handle, const char *name)
+void *SDL_LoadFunction(void *handle, const char *name)
 {
     void *symbol = (void *)GetProcAddress((HMODULE)handle, name);
     if (symbol == NULL) {
diff --git a/src/locale/SDL_locale.c b/src/locale/SDL_locale.c
index 258aac974..0c8f611ac 100644
--- a/src/locale/SDL_locale.c
+++ b/src/locale/SDL_locale.c
@@ -87,8 +87,7 @@ static SDL_Locale *build_locales_from_csv_string(char *csv)
     return retval;
 }
 
-SDL_Locale *
-SDL_GetPreferredLocales(void)
+SDL_Locale *SDL_GetPreferredLocales(void)
 {
     char locbuf[128]; /* enough for 21 "xx_YY," language strings. */
     const char *hint = SDL_GetHint(SDL_HINT_PREFERRED_LOCALES);
diff --git a/src/locale/haiku/SDL_syslocale.cc b/src/locale/haiku/SDL_syslocale.cc
index 6dc4ad217..70af4df7b 100644
--- a/src/locale/haiku/SDL_syslocale.cc
+++ b/src/locale/haiku/SDL_syslocale.cc
@@ -26,8 +26,7 @@
 #include "../../SDL_internal.h"
 #include "../SDL_syslocale.h"
 
-void
-SDL_SYS_GetPreferredLocales(char *buf, size_t buflen)
+void SDL_SYS_GetPreferredLocales(char *buf, size_t buflen)
 {
     BLocaleRoster *roster = BLocaleRoster::Default();
     roster->Refresh();
diff --git a/src/main/haiku/SDL_BeApp.cc b/src/main/haiku/SDL_BeApp.cc
index f1cf48293..63af36bdb 100644
--- a/src/main/haiku/SDL_BeApp.cc
+++ b/src/main/haiku/SDL_BeApp.cc
@@ -105,8 +105,7 @@ static int StartBeApp(void *unused)
 }
 
 
-static int
-StartBeLooper()
+static int StartBeLooper()
 {
     if (!be_app) {
         SDL_AppThread = SDL_CreateThreadInternal(StartBeApp, "SDLApplication", 0, NULL);
@@ -141,8 +140,7 @@ StartBeLooper()
 
 
 /* Initialize the Be Application, if it's not already started */
-int
-SDL_InitBeApp(void)
+int SDL_InitBeApp(void)
 {
     /* Create the BApplication that handles appserver interaction */
     if (SDL_BeAppActive <= 0) {
@@ -160,8 +158,7 @@ SDL_InitBeApp(void)
 }
 
 /* Quit the Be Application, if there's nothing left to do */
-void
-SDL_QuitBeApp(void)
+void SDL_QuitBeApp(void)
 {
     /* Decrement the application reference count */
     --SDL_BeAppActive;
diff --git a/src/main/nacl/SDL_nacl_main.c b/src/main/nacl/SDL_nacl_main.c
index 3d7833dd4..10d94e227 100644
--- a/src/main/nacl/SDL_nacl_main.c
+++ b/src/main/nacl/SDL_nacl_main.c
@@ -33,20 +33,19 @@
 
 extern void NACL_SetScreenResolution(int width, int height, Uint32 format);
 
-int
-nacl_main(int argc, char *argv[])
+int nacl_main(int argc, char *argv[])
 {
     int status;
     PSEvent* ps_event;
-    PP_Resource event;  
+    PP_Resource event;
     struct PP_Rect rect;
     int ready = 0;
     const PPB_View *ppb_view = PSInterfaceView();
-    
+
     /* This is started in a worker thread by ppapi_simple! */
-    
+
     /* Wait for the first PSE_INSTANCE_DIDCHANGEVIEW event before starting the app */
-    
+
     PSEventSetFilter(PSE_INSTANCE_DIDCHANGEVIEW);
     while (!ready) {
         /* Process all waiting events without blocking */
@@ -65,13 +64,13 @@ nacl_main(int argc, char *argv[])
             PSEventRelease(ps_event);
         }
     }
-    
-    /* Do a default httpfs mount on /, 
-     * apps can override this by unmounting / 
+
+    /* Do a default httpfs mount on /,
+     * apps can override this by unmounting /
      * and remounting with the desired configuration
      */
     nacl_io_init_ppapi(PSGetInstanceId(), PSGetInterface);
-    
+
     umount("/");
     mount(
         "",  /* source */
@@ -79,7 +78,7 @@ nacl_main(int argc, char *argv[])
         "httpfs",  /* filesystemtype */
         0,  /* mountflags */
         "");  /* data specific to the html5fs type */
-    
+
     /* Everything is ready, start the user main function */
     SDL_SetMainReady();
     status = SDL_main(argc, argv);
diff --git a/src/misc/haiku/SDL_sysurl.cc b/src/misc/haiku/SDL_sysurl.cc
index 08a2e556a..68b031021 100644
--- a/src/misc/haiku/SDL_sysurl.cc
+++ b/src/misc/haiku/SDL_sysurl.cc
@@ -22,8 +22,7 @@
 #include "../SDL_sysurl.h"
 #include <Url.h>
 
-int
-SDL_SYS_OpenURL(const char *url)
+int SDL_SYS_OpenURL(const char *url)
 {
     BUrl burl(url);
     const status_t rc = burl.OpenWithPreferredApplication(false);
diff --git a/src/power/SDL_power.c b/src/power/SDL_power.c
index 20b80f7aa..63ba38221 100644
--- a/src/power/SDL_power.c
+++ b/src/power/SDL_power.c
@@ -85,8 +85,7 @@ static SDL_GetPowerInfo_Impl implementations[] = {
 };
 #endif
 
-SDL_PowerState
-SDL_GetPowerInfo(int *seconds, int *percent)
+SDL_PowerState SDL_GetPowerInfo(int *seconds, int *percent)
 {
 #ifndef SDL_POWER_DISABLED
     const int total = sizeof(implementations) / sizeof(implementations[0]);
diff --git a/src/power/android/SDL_syspower.c b/src/power/android/SDL_syspower.c
index d0dbbccb4..3dccdecda 100644
--- a/src/power/android/SDL_syspower.c
+++ b/src/power/android/SDL_syspower.c
@@ -28,8 +28,7 @@
 
 #include "../../core/android/SDL_android.h"
 
-SDL_bool
-SDL_GetPowerInfo_Android(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Android(SDL_PowerState *state, int *seconds, int *percent)
 {
     int battery;
     int plugged;
diff --git a/src/power/emscripten/SDL_syspower.c b/src/power/emscripten/SDL_syspower.c
index 1d2989ca6..6a1f3176c 100644
--- a/src/power/emscripten/SDL_syspower.c
+++ b/src/power/emscripten/SDL_syspower.c
@@ -27,8 +27,7 @@
 
 #include "SDL_power.h"
 
-SDL_bool
-SDL_GetPowerInfo_Emscripten(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Emscripten(SDL_PowerState *state, int *seconds, int *percent)
 {
     EmscriptenBatteryEvent batteryState;
     int haveBattery = 0;
diff --git a/src/power/haiku/SDL_syspower.c b/src/power/haiku/SDL_syspower.c
index 068637ff1..6e7dd928e 100644
--- a/src/power/haiku/SDL_syspower.c
+++ b/src/power/haiku/SDL_syspower.c
@@ -42,8 +42,7 @@
 
 #include "SDL_power.h"
 
-SDL_bool
-SDL_GetPowerInfo_Haiku(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Haiku(SDL_PowerState *state, int *seconds, int *percent)
 {
     const int fd = open("/dev/misc/apm", O_RDONLY | O_CLOEXEC);
     SDL_bool need_details = SDL_FALSE;
diff --git a/src/power/linux/SDL_syspower.c b/src/power/linux/SDL_syspower.c
index bda8c42af..84100e856 100644
--- a/src/power/linux/SDL_syspower.c
+++ b/src/power/linux/SDL_syspower.c
@@ -229,9 +229,7 @@ static void check_proc_acpi_ac_adapter(const char *node, SDL_bool *have_ac)
     }
 }
 
-SDL_bool
-SDL_GetPowerInfo_Linux_proc_acpi(SDL_PowerState *state,
-                                 int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Linux_proc_acpi(SDL_PowerState *state, int *seconds, int *percent)
 {
     struct dirent *dent = NULL;
     DIR *dirp = NULL;
@@ -314,9 +312,7 @@ static SDL_bool int_string(char *str, int *val)
 }
 
 /* http://lxr.linux.no/linux+v2.6.29/drivers/char/apm-emulation.c */
-SDL_bool
-SDL_GetPowerInfo_Linux_proc_apm(SDL_PowerState *state,
-                                int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Linux_proc_apm(SDL_PowerState *state, int *seconds, int *percent)
 {
     SDL_bool need_details = SDL_FALSE;
     int ac_status = 0;
@@ -422,8 +418,7 @@ SDL_GetPowerInfo_Linux_proc_apm(SDL_PowerState *state,
     return SDL_TRUE;
 }
 
-SDL_bool
-SDL_GetPowerInfo_Linux_sys_class_power_supply(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Linux_sys_class_power_supply(SDL_PowerState *state, int *seconds, int *percent)
 {
     const char *base = sys_class_power_supply_path;
     struct dirent *dent;
@@ -612,8 +607,7 @@ static void check_upower_device(DBusConnection *conn, const char *path, SDL_Powe
 }
 #endif
 
-SDL_bool
-SDL_GetPowerInfo_Linux_org_freedesktop_upower(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Linux_org_freedesktop_upower(SDL_PowerState *state, int *seconds, int *percent)
 {
     SDL_bool retval = SDL_FALSE;
 
diff --git a/src/power/macosx/SDL_syspower.c b/src/power/macosx/SDL_syspower.c
index b598a36e6..b6af7682b 100644
--- a/src/power/macosx/SDL_syspower.c
+++ b/src/power/macosx/SDL_syspower.c
@@ -138,8 +138,7 @@ static void checkps(CFDictionaryRef dict, SDL_bool *have_ac, SDL_bool *have_batt
 #undef GETVAL
 #undef STRMATCH
 
-SDL_bool
-SDL_GetPowerInfo_MacOSX(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_MacOSX(SDL_PowerState *state, int *seconds, int *percent)
 {
     CFTypeRef blob = IOPSCopyPowerSourcesInfo();
 
diff --git a/src/power/n3ds/SDL_syspower.c b/src/power/n3ds/SDL_syspower.c
index f7393b700..b565643e9 100644
--- a/src/power/n3ds/SDL_syspower.c
+++ b/src/power/n3ds/SDL_syspower.c
@@ -35,8 +35,7 @@ SDL_FORCE_INLINE int GetBatteryPercentage(void);
 #define BATTERY_PERCENT_REG      0xB
 #define BATTERY_PERCENT_REG_SIZE 2
 
-SDL_bool
-SDL_GetPowerInfo_N3DS(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_N3DS(SDL_PowerState *state, int *seconds, int *percent)
 {
     *state = GetPowerState();
     *percent = GetBatteryPercentage();
@@ -45,8 +44,7 @@ SDL_GetPowerInfo_N3DS(SDL_PowerState *state, int *seconds, int *percent)
     return SDL_TRUE;
 }
 
-SDL_FORCE_INLINE SDL_PowerState
-GetPowerState(void)
+static SDL_PowerState GetPowerState(void)
 {
     bool is_plugged;
     u8 is_charging;
@@ -66,8 +64,7 @@ GetPowerState(void)
     return SDL_POWERSTATE_ON_BATTERY;
 }
 
-SDL_FORCE_INLINE int
-ReadStateFromPTMU(bool *is_plugged, u8 *is_charging)
+static int ReadStateFromPTMU(bool *is_plugged, u8 *is_charging)
 {
     if (R_FAILED(ptmuInit())) {
         return SDL_SetError("Failed to initialise PTMU service");
diff --git a/src/power/psp/SDL_syspower.c b/src/power/psp/SDL_syspower.c
index 382590715..281197858 100644
--- a/src/power/psp/SDL_syspower.c
+++ b/src/power/psp/SDL_syspower.c
@@ -27,9 +27,7 @@
 #include "SDL_power.h"
 #include <psppower.h>
 
-SDL_bool
-SDL_GetPowerInfo_PSP(SDL_PowerState *state, int *seconds,
-                     int *percent)
+SDL_bool SDL_GetPowerInfo_PSP(SDL_PowerState *state, int *seconds, int *percent)
 {
     int battery = scePowerIsBatteryExist();
     int plugged = scePowerIsPowerOnline();
diff --git a/src/power/uikit/SDL_syspower.m b/src/power/uikit/SDL_syspower.m
index e62033c02..5b9076b57 100644
--- a/src/power/uikit/SDL_syspower.m
+++ b/src/power/uikit/SDL_syspower.m
@@ -52,8 +52,7 @@ void SDL_UIKit_UpdateBatteryMonitoring(void)
 }
 #endif /* !TARGET_OS_TV */
 
-SDL_bool
-SDL_GetPowerInfo_UIKit(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_UIKit(SDL_PowerState *state, int *seconds, int *percent)
 {
 #if TARGET_OS_TV
     *state = SDL_POWERSTATE_NO_BATTERY;
diff --git a/src/power/vita/SDL_syspower.c b/src/power/vita/SDL_syspower.c
index 926fa44f7..6c28e9223 100644
--- a/src/power/vita/SDL_syspower.c
+++ b/src/power/vita/SDL_syspower.c
@@ -27,9 +27,7 @@
 #include "SDL_power.h"
 #include <psp2/power.h>
 
-SDL_bool
-SDL_GetPowerInfo_VITA(SDL_PowerState *state, int *seconds,
-                      int *percent)
+SDL_bool SDL_GetPowerInfo_VITA(SDL_PowerState *state, int *seconds, int *percent)
 {
     int battery = 1;
     int plugged = scePowerIsPowerOnline();
diff --git a/src/power/windows/SDL_syspower.c b/src/power/windows/SDL_syspower.c
index d110c2450..f1d7d8897 100644
--- a/src/power/windows/SDL_syspower.c
+++ b/src/power/windows/SDL_syspower.c
@@ -27,8 +27,7 @@
 
 #include "SDL_power.h"
 
-SDL_bool
-SDL_GetPowerInfo_Windows(SDL_PowerState *state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_Windows(SDL_PowerState *state, int *seconds, int *percent)
 {
     SYSTEM_POWER_STATUS status;
     SDL_bool need_details = SDL_FALSE;
diff --git a/src/power/winrt/SDL_syspower.cpp b/src/power/winrt/SDL_syspower.cpp
index 8d3629c3c..2a46de7c9 100644
--- a/src/power/winrt/SDL_syspower.cpp
+++ b/src/power/winrt/SDL_syspower.cpp
@@ -26,8 +26,7 @@
 #include "SDL_power.h"
 
 extern "C"
-SDL_bool
-SDL_GetPowerInfo_WinRT(SDL_PowerState * state, int *seconds, int *percent)
+SDL_bool SDL_GetPowerInfo_WinRT(SDL_PowerState * state, int *seconds, int *percent)
 {
     /* TODO, WinRT: Battery info is available on at least one WinRT platform (Windows Phone 8).  Implement SDL_GetPowerInfo_WinRT as appropriate. */
     /* Notes:
diff --git a/src/render/SDL_render.c b/src/render/SDL_render.c
index 422e37a9b..5831b1014 100644
--- a/src/render/SDL_render.c
+++ b/src/render/SDL_render.c
@@ -283,8 +283,7 @@ int SDL_RenderFlush(SDL_Renderer *renderer)
     return FlushRenderCommands(renderer);
 }
 
-void *
-SDL_AllocateRenderVertices(SDL_Renderer *renderer, const size_t numbytes, const size_t alignment, size_t *offset)
+void *SDL_AllocateRenderVertices(SDL_Renderer *renderer, const size_t numbytes, const size_t alignment, size_t *offset)
 {
     const size_t needed = renderer->vertex_data_used + numbytes + alignment;
     const size_t current_offset = renderer->vertex_data_used;
@@ -934,8 +933,7 @@ static void SDL_CalculateSimulatedVSyncInterval(SDL_Renderer *renderer, SDL_Wind
 }
 #endif /* !SDL_RENDER_DISABLED */
 
-SDL_Renderer *
-SDL_CreateRenderer(SDL_Window *window, int index, Uint32 flags)
+SDL_Renderer *SDL_CreateRenderer(SDL_Window *window, int index, Uint32 flags)
 {
 #if !SDL_RENDER_DISABLED
     SDL_Renderer *renderer = NULL;
@@ -1103,8 +1101,7 @@ error:
 #endif
 }
 
-SDL_Renderer *
-SDL_CreateSoftwareRenderer(SDL_Surface *surface)
+SDL_Renderer *SDL_CreateSoftwareRenderer(SDL_Surface *surface)
 {
 #if !SDL_RENDER_DISABLED && SDL_VIDEO_RENDER_SW
     SDL_Renderer *renderer;
@@ -1133,14 +1130,12 @@ SDL_CreateSoftwareRenderer(SDL_Surface *surface)
 #endif /* !SDL_RENDER_DISABLED */
 }
 
-SDL_Renderer *
-SDL_GetRenderer(SDL_Window *window)
+SDL_Renderer *SDL_GetRenderer(SDL_Window *window)
 {
     return (SDL_Renderer *)SDL_GetWindowData(window, SDL_WINDOWRENDERDATA);
 }
 
-SDL_Window *
-SDL_RenderGetWindow(SDL_Renderer *renderer)
+SDL_Window *SDL_RenderGetWindow(SDL_Renderer *renderer)
 {
     CHECK_RENDERER_MAGIC(renderer, NULL);
     return renderer->window;
@@ -1239,8 +1234,7 @@ static SDL_ScaleMode SDL_GetScaleMode(void)
     }
 }
 
-SDL_Texture *
-SDL_CreateTexture(SDL_Renderer *renderer, Uint32 format, int access, int w, int h)
+SDL_Texture *SDL_CreateTexture(SDL_Renderer *renderer, Uint32 format, int access, int w, int h)
 {
     SDL_Texture *texture;
     SDL_bool texture_is_fourcc_and_target;
@@ -1350,8 +1344,7 @@ SDL_CreateTexture(SDL_Renderer *renderer, Uint32 format, int access, int w, int
     return texture;
 }
 
-SDL_Texture *
-SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface)
+SDL_Texture *SDL_CreateTextureFromSurface(SDL_Renderer *renderer, SDL_Surface *surface)
 {
     const SDL_PixelFormat *fmt;
     SDL_bool needAlpha;
@@ -1648,8 +1641,7 @@ int SDL_SetTextureUserData(SDL_Texture *texture, void *userdata)
     return 0;
 }
 
-void *
-SDL_GetTextureUserData(SDL_Texture *texture)
+void *SDL_GetTextureUserData(SDL_Texture *texture)
 {
     CHECK_TEXTURE_MAGIC(texture, NULL);
 
@@ -2173,8 +2165,7 @@ void SDL_UnlockTexture(SDL_Texture *texture)
     texture->locked_surface = NULL;
 }
 
-SDL_bool
-SDL_RenderTargetSupported(SDL_Renderer *renderer)
+SDL_bool SDL_RenderTargetSupported(SDL_Renderer *renderer)
 {
     if (renderer == NULL || !renderer->SetRenderTarget) {
         return SDL_FALSE;
@@ -2261,8 +2252,7 @@ int SDL_SetRenderTarget(SDL_Renderer *renderer, SDL_Texture *texture)
     return FlushRenderCommandsIfNotBatching(renderer);
 }
 
-SDL_Texture *
-SDL_GetRenderTarget(SDL_Renderer *renderer)
+SDL_Texture *SDL_GetRenderTarget(SDL_Renderer *renderer)
 {
     CHECK_RENDERER_MAGIC(renderer, NULL);
 
@@ -2428,9 +2418,7 @@ int SDL_RenderSetIntegerScale(SDL_Renderer *renderer, SDL_bool enable)
     return UpdateLogicalSize(renderer, SDL_TRUE);
 }
 
-SDL_bool
-    SDLCALL
-    SDL_RenderGetIntegerScale(SDL_Renderer *renderer)
+SDL_bool SDL_RenderGetIntegerScale(SDL_Renderer *renderer)
 {
     CHECK_RENDERER_MAGIC(renderer, SDL_FALSE);
 
@@ -2515,8 +2503,7 @@ void SDL_RenderGetClipRect(SDL_Renderer *renderer, SDL_Rect *rect)
     }
 }
 
-SDL_bool
-SDL_RenderIsClipEnabled(SDL_Renderer *renderer)
+SDL_bool SDL_RenderIsClipEnabled(SDL_Renderer *renderer)
 {
     CHECK_RENDERER_MAGIC(renderer, SDL_FALSE)
     return renderer->clipping_enabled;
@@ -4382,8 +4369,7 @@ int SDL_GL_UnbindTexture(SDL_Texture *texture)
     return SDL_Unsupported();
 }
 
-void *
-SDL_RenderGetMetalLayer(SDL_Renderer *renderer)
+void *SDL_RenderGetMetalLayer(SDL_Renderer *renderer)
 {
     CHECK_RENDERER_MAGIC(renderer, NULL);
 
@@ -4394,8 +4380,7 @@ SDL_RenderGetMetalLayer(SDL_Renderer *renderer)
     return NULL;
 }
 
-void *
-SDL_RenderGetMetalCommandEncoder(SDL_Renderer *renderer)
+void *SDL_RenderGetMetalCommandEncoder(SDL_Renderer *renderer)
 {
     CHECK_RENDERER_MAGIC(renderer, NULL);
 
@@ -4446,8 +4431,7 @@ static SDL_BlendMode SDL_GetLongBlendMode(SDL_BlendMode blendMode)
     return blendMode;
 }
 
-SDL_BlendMode
-SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor,
+SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor,
                            SDL_BlendOperation colorOperation,
                            SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor,
                            SDL_BlendOperation alphaOperation)
@@ -4457,43 +4441,37 @@ SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstCo
     return SDL_GetShortBlendMode(blendMode);
 }
 
-SDL_BlendFactor
-SDL_GetBlendModeSrcColorFactor(SDL_BlendMode blendMode)
+SDL_BlendFactor SDL_GetBlendModeSrcColorFactor(SDL_BlendMode blendMode)
 {
     blendMode = SDL_GetLongBlendMode(blendMode);
     return (SDL_BlendFactor)(((Uint32)blendMode >> 4) & 0xF);
 }
 
-SDL_BlendFactor
-SDL_GetBlendModeDstColorFactor(SDL_BlendMode blendMode)
+SDL_BlendFactor SDL_GetBlendModeDstColorFactor(SDL_BlendMode blendMode)
 {
     blendMode = SDL_GetLongBlendMode(blendMode);
     return (SDL_BlendFactor)(((Uint32)blendMode >> 8) & 0xF);
 }
 
-SDL_BlendOperation
-SDL_GetBlendModeColorOperation(SDL_BlendMode blendMode)
+SDL_BlendOperation SDL_GetBlendModeColorOperation(SDL_BlendMode blendMode)
 {
     blendMode = SDL_GetLongBlendMode(blendMode);
     return (SDL_BlendOperation)(((Uint32)blendMode >> 0) & 0xF);
 }
 
-SDL_BlendFactor
-SDL_GetBlendModeSrcAlphaFactor(SDL_BlendMode blendMode)
+SDL_BlendFactor SDL_GetBlendModeSrcAlphaFactor(SDL_BlendMode blendMode)
 {
     blendMode = SDL_GetLongBlendMode(blendMode);
     return (SDL_BlendFactor)(((Uint32)blendMode >> 20) & 0xF);
 }
 
-SDL_BlendFactor
-SDL_GetBlendModeDstAlphaFactor(SDL_BlendMode blendMode)
+SDL_BlendFactor SDL_GetBlendModeDstAlphaFactor(SDL_BlendMode blendMode)
 {
     blendMode = SDL_GetLongBlendMode(blendMode);
     return (SDL_BlendFactor)(((Uint32)blendMode >> 24) & 0xF);
 }
 
-SDL_BlendOperation
-SDL_GetBlendModeAlphaOperation(SDL_BlendMode blendMode)
+SDL_BlendOperation SDL_GetBlendModeAlphaOperation(SDL_BlendMode blendMode)
 {
     blendMode = SDL_GetLongBlendMode(blendMode);
     return (SDL_BlendOperation)(((Uint32)blendMode >> 16) & 0xF);
diff --git a/src/render/SDL_yuv_sw.c b/src/render/SDL_yuv_sw.c
index 198c41501..c4385e288 100644
--- a/src/render/SDL_yuv_sw.c
+++ b/src/render/SDL_yuv_sw.c
@@ -28,8 +28,7 @@
 #include "../video/SDL_yuv_c.h"
 #include "SDL_cpuinfo.h"
 
-SDL_SW_YUVTexture *
-SDL_SW_CreateYUVTexture(Uint32 format, int w, int h)
+SDL_SW_YUVTexture *SDL_SW_CreateYUVTexture(Uint32 format, int w, int h)
 {
     SDL_SW_YUVTexture *swdata;
 
diff --git a/src/render/direct3d/SDL_render_d3d.c b/src/render/direct3d/SDL_render_d3d.c
index e995a38f6..5470a7d40 100644
--- a/src/render/direct3d/SDL_render_d3d.c
+++ b/src/render/direct3d/SDL_render_d3d.c
@@ -1546,8 +1546,7 @@ static int D3D_SetVSync(SDL_Renderer *renderer, const int vsync)
     return 0;
 }
 
-SDL_Renderer *
-D3D_CreateRenderer(SDL_Window *window, Uint32 flags)
+SDL_Renderer *D3D_CreateRenderer(SDL_Window *window, Uint32 flags)
 {
     SDL_Renderer *renderer;
     D3D_RenderData *data;
@@ -1736,8 +1735,7 @@ SDL_RenderDriver D3D_RenderDriver = {
 
 #if defined(__WIN32__) || defined(__WINGDK__)
 /* This function needs to always exist on Windows, for the Dynamic API. */
-IDirect3DDevice9 *
-SDL_RenderGetD3D9Device(SDL_Renderer *renderer)
+IDirect3DDevice9 *SDL_RenderGetD3D9Device(SDL_Renderer *renderer)
 {
     IDirect3DDevice9 *device = NULL;
 
diff --git a/src/render/direct3d11/SDL_render_d3d11.c b/src/render/direct3d11/SDL_render_d3d11.c
index a2f8b0ec1..06d66214d 100644
--- a/src/render/direct3d11/SDL_render_d3d11.c
+++ b/src/render/direct3d11/SDL_render_d3d11.c
@@ -200,8 +200,7 @@ static const GUID SDL_IID_ID3D11DeviceContext1 = { 0xbb2c6faa, 0xb5fb, 0x4082, {
 #pragma GCC diagnostic pop
 #endif
 
-Uint32
-D3D11_DXGIFormatToSDLPixelFormat(DXGI_FORMAT dxgiFormat)
+Uint32 D3D11_DXGIFormatToSDLPixelFormat(DXGI_FORMAT dxgiFormat)
 {
     switch (dxgiFormat) {
     case DXGI_FORMAT_B8G8R8A8_UNORM:
@@ -2300,8 +2299,7 @@ static int D3D11_SetVSync(SDL_Renderer *renderer, const int vsync)
 }
 #endif
 
-SDL_Renderer *
-D3D11_CreateRenderer(SDL_Window *window, Uint32 flags)
+SDL_Renderer *D3D11_CreateRenderer(SDL_Window *window, Uint32 flags)
 {
     SDL_Renderer *renderer;
     D3D11_RenderData *data;
@@ -2413,8 +2411,7 @@ SDL_RenderDriver D3D11_RenderDriver = {
 
 #if defined(__WIN32__) || defined(__WINGDK__)
 /* This function needs to always exist on Windows, for the Dynamic API. */
-ID3D11Device *
-SDL_RenderGetD3D11Device(SDL_Renderer *renderer)
+ID3D11Device *SDL_RenderGetD3D11Device(SDL_Renderer *renderer)
 {
     ID3D11Device *device = NULL;
 
diff --git a/src/render/direct3d12/SDL_render_d3d12.c b/src/render/direct3d12/SDL_render_d3d12.c
index c32deaf29..9e69cef04 100644
--- a/src/render/direct3d12/SDL_render_d3d12.c
+++ b/src/render/direct3d12/SDL_render_d3d12.c
@@ -276,8 +276,7 @@ UINT D3D12_Align(UINT location, UINT alignment)
     return (location + (alignment - 1)) & ~(alignment - 1);
 }
 
-Uint32
-D3D12_DXGIFormatToSDLPixelFormat(DXGI_FORMAT dxgiFormat)
+Uint32 D3D12_DXGIFormatToSDLPixelFormat(DXGI_FORMAT dxgiFormat)
 {
     switch (dxgiFormat) {
     case DXGI_FORMAT_B8G8R8A8_UNORM:
@@ -2949,8 +2948,7 @@ static int D3D12_SetVSync(SDL_Renderer *renderer, const int vsync)
     return 0;
 }
 
-SDL_Renderer *
-D3D12_CreateRenderer(SDL_Window *window, Uint32 flags)
+SDL_Renderer *D3D12_CreateRenderer(SDL_Window *window, Uint32 flags)
 {
     SDL_Renderer *renderer;
     D3D12_RenderData *data;
diff --git a/src/render/metal/SDL_render_metal.m b/src/render/metal/SDL_render_metal.m
index ef3e8f7d6..c2265601f 100644
--- a/src/render/metal/SDL_render_metal.m
+++ b/src/render/metal/SDL_render_metal.m
@@ -159,8 +159,7 @@ typedef struct METAL_ShaderPipelines
 @implementation METAL_TextureData
 @end
 
-static int
-IsMetalAvailable(const SDL_SysWMinfo *syswm)
+static int IsMetalAvailable(const SDL_SysWMinfo *syswm)
 {
     if (syswm->subsystem != SDL_SYSWM_COCOA && syswm->subsystem != SDL_SYSWM_UIKIT) {
         return SDL_SetError("Metal render target only supports Cocoa and UIKit video targets at the moment.");
@@ -179,8 +178,7 @@ IsMetalAvailable(const SDL_SysWMinfo *syswm)
 static const MTLBlendOperation invalidBlendOperation = (MTLBlendOperation)0xFFFFFFFF;
 static const MTLBlendFactor invalidBlendFactor = (MTLBlendFactor)0xFFFFFFFF;
 
-static MTLBlendOperation
-GetBlendOperation(SDL_BlendOperation operation)
+static MTLBlendOperation GetBlendOperation(SDL_BlendOperation operation)
 {
     switch (operation) {
         case SDL_BLENDOPERATION_ADD: return MTLBlendOperationAdd;
@@ -192,8 +190,7 @@ GetBlendOperation(SDL_BlendOperation operation)
     }
 }
 
-static MTLBlendFactor
-GetBlendFactor(SDL_BlendFactor factor)
+static MTLBlendFactor GetBlendFactor(SDL_BlendFactor factor)
 {
     switch (factor) {
         case SDL_BLENDFACTOR_ZERO: return MTLBlendFactorZero;
@@ -210,8 +207,7 @@ GetBlendFactor(SDL_BlendFactor factor)
     }
 }
 
-static NSString *
-GetVertexFunctionName(SDL_MetalVertexFunction function)
+static NSString *GetVertexFunctionName(SDL_MetalVertexFunction function)
 {
     switch (function) {
         case SDL_METAL_VERTEX_SOLID: return @"SDL_Solid_vertex";
@@ -220,8 +216,7 @@ GetVertexFunctionName(SDL_MetalVertexFunction function)
     }
 }
 
-static NSString *
-GetFragmentFunctionName(SDL_MetalFragmentFunction function)
+static NSString *GetFragmentFunctionName(SDL_MetalFragmentFunction function)
 {
     switch (function) {
         case SDL_METAL_FRAGMENT_SOLID: return @"SDL_Solid_fragment";
@@ -233,9 +228,7 @@ GetFragmentFunctionName(SDL_MetalFragmentFunction function)
     }
 }
 
-static id<MTLRenderPipelineState>
-MakePipelineState(METAL_RenderData *data, METAL_PipelineCache *cache,
-                  NSString *blendlabel, SDL_BlendMode blendmode)
+static id<MTLRenderPipelineState> MakePipelineState(METAL_RenderData *data, METAL_PipelineCache *cache, NSString *blendlabel, SDL_BlendMode blendmode)
 {
     MTLRenderPipelineDescriptor *mtlpipedesc;
     MTLVertexDescriptor *vertdesc;
@@ -328,8 +321,7 @@ MakePipelineState(METAL_RenderData *data, METAL_PipelineCache *cache,
     }
 }
 
-static void
-MakePipelineCache(METAL_RenderData *data, METAL_PipelineCache *cache, const char *label,
+static void MakePipelineCache(METAL_RenderData *data, METAL_PipelineCache *cache, const char *label,
                   MTLPixelFormat rtformat, SDL_MetalVertexFunction vertfn, SDL_MetalFragmentFunction fragfn)
 {
     SDL_zerop(cache);
@@ -348,8 +340,7 @@ MakePipelineCache(METAL_RenderData *data, METAL_PipelineCache *cache, const char
     MakePipelineState(data, cache, @" (blend=mul)", SDL_BLENDMODE_MUL);
 }
 
-static void
-DestroyPipelineCache(METAL_PipelineCache *cache)
+static void DestroyPipelineCache(METAL_PipelineCache *cache)
 {
     if (cache != NULL) {
         for (int i = 0; i < cache->count; i++) {
@@ -360,8 +351,7 @@ DestroyPipelineCache(METAL_PipelineCache *cache)
     }
 }
 
-void
-MakeShaderPipelines(METAL_RenderData *data, METAL_ShaderPipelines *pipelines, MTLPixelFormat rtformat)
+static void MakeShaderPipelines(METAL_RenderData *data, METAL_ShaderPipelines *pipelines, MTLPixelFormat rtformat)
 {
     SDL_zerop(pipelines);
 
@@ -374,8 +364,7 @@ MakeShaderPipelines(METAL_RenderData *data, METAL_ShaderPipelines *pipelines, MT
     MakePipelineCache(data, &pipelines->caches[SDL_METAL_FRAGMENT_NV21], "SDL NV21 pipeline", rtformat, SDL_METAL_VERTEX_COPY, SDL_METAL_FRAGMENT_NV21);
 }
 
-static METAL_ShaderPipelines *
-ChooseShaderPipelines(METAL_RenderData *data, MTLPixelFormat rtformat)
+static METAL_ShaderPipelines *ChooseShaderPipelines(METAL_RenderData *data, MTLPixelFormat rtformat)
 {
     METAL_ShaderPipelines *allpipelines = data.allpipelines;
     int count = data.pipelinescount;
@@ -401,8 +390,7 @@ ChooseShaderPipelines(METAL_RenderData *data, MTLPixelFormat rtformat)
     return &data.allpipelines[count];
 }
 
-static void
-DestroyAllPipelines(METAL_ShaderPipelines *allpipelines, int count)
+static void DestroyAllPipelines(METAL_ShaderPipelines *allpipelines, int count)
 {
     if (allpipelines != NULL) {
         for (int i = 0; i < count; i++) {
@@ -415,8 +403,7 @@ DestroyAllPipelines(METAL_ShaderPipelines *allpipelines, int count)
     }
 }
 
-static inline id<MTLRenderPipelineState>
-ChoosePipelineState(METAL_RenderData *data, METAL_ShaderPipelines *pipelines, SDL_MetalFragmentFunction fragfn, SDL_BlendMode blendmode)
+static inline id<MTLRenderPipelineState> ChoosePipelineState(METAL_RenderData *data, METAL_ShaderPipelines *pipelines, SDL_MetalFragmentFunction fragfn, SDL_BlendMode blendmode)
 {
     METAL_PipelineCache *cache = &pipelines->caches[fragfn];
 
@@ -429,8 +416,7 @@ ChoosePipelineState(METAL_RenderData *data, METAL_ShaderPipelines *pipelines, SD
     return MakePipelineState(data, cache, [NSString stringWithFormat:@" (blend=custom 0x%x)", blendmode], blendmode);
 }
 
-static SDL_bool
-METAL_ActivateRenderCommandEncoder(SDL_Renderer * renderer, MTLLoadAction load, MTLClearColor *clear_color, id<MTLBuffer> vertex_buffer)
+static SDL_bool METAL_ActivateRenderCommandEncoder(SDL_Renderer * renderer, MTLLoadAction load, MTLClearColor *clear_color, id<MTLBuffer> vertex_buffer)
 {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
 
@@ -497,13 +483,11 @@ METAL_ActivateRenderCommandEncoder(SDL_Renderer * renderer, MTLLoadAction load,
     return SDL_TRUE;
 }
 
-static void
-METAL_WindowEvent(SDL_Renderer * renderer, const SDL_WindowEvent *event)
+static void METAL_WindowEvent(SDL_Renderer * renderer, const SDL_WindowEvent *event)
 {
 }
 
-static int
-METAL_GetOutputSize(SDL_Renderer * renderer, int *w, int *h)
+static int METAL_GetOutputSize(SDL_Renderer * renderer, int *w, int *h)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     if (w) {
@@ -515,8 +499,7 @@ METAL_GetOutputSize(SDL_Renderer * renderer, int *w, int *h)
     return 0;
 }}
 
-static SDL_bool
-METAL_SupportsBlendMode(SDL_Renderer * renderer, SDL_BlendMode blendMode)
+static SDL_bool METAL_SupportsBlendMode(SDL_Renderer * renderer, SDL_BlendMode blendMode)
 {
     SDL_BlendFactor srcColorFactor = SDL_GetBlendModeSrcColorFactor(blendMode);
     SDL_BlendFactor srcAlphaFactor = SDL_GetBlendModeSrcAlphaFactor(blendMode);
@@ -536,8 +519,7 @@ METAL_SupportsBlendMode(SDL_Renderer * renderer, SDL_BlendMode blendMode)
     return SDL_TRUE;
 }
 
-static int
-METAL_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+static int METAL_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     MTLPixelFormat pixfmt;
@@ -645,8 +627,7 @@ METAL_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
     return 0;
 }}
 
-static void
-METAL_UploadTextureData(id<MTLTexture> texture, SDL_Rect rect, int slice,
+static void METAL_UploadTextureData(id<MTLTexture> texture, SDL_Rect rect, int slice,
                         const void * pixels, int pitch)
 {
     [texture replaceRegion:MTLRegionMake2D(rect.x, rect.y, rect.w, rect.h)
@@ -657,8 +638,7 @@ METAL_UploadTextureData(id<MTLTexture> texture, SDL_Rect rect, int slice,
              bytesPerImage:0];
 }
 
-static MTLStorageMode
-METAL_GetStorageMode(id<MTLResource> resource)
+static MTLStorageMode METAL_GetStorageMode(id<MTLResource> resource)
 {
     /* iOS 8 does not have this method. */
     if ([resource respondsToSelector:@selector(storageMode)]) {
@@ -667,8 +647,7 @@ METAL_GetStorageMode(id<MTLResource> resource)
     return MTLStorageModeShared;
 }
 
-static int
-METAL_UpdateTextureInternal(SDL_Renderer * renderer, METAL_TextureData *texturedata,
+static int METAL_UpdateTextureInternal(SDL_Renderer * renderer, METAL_TextureData *texturedata,
                             id<MTLTexture> texture, SDL_Rect rect, int slice,
                             const void * pixels, int pitch)
 {
@@ -736,8 +715,7 @@ METAL_UpdateTextureInternal(SDL_Renderer * renderer, METAL_TextureData *textured
     return 0;
 }
 
-static int
-METAL_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
+static int METAL_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
                     const SDL_Rect * rect, const void *pixels, int pitch)
 { @autoreleasepool {
     METAL_TextureData *texturedata = (__bridge METAL_TextureData *)texture->driverdata;
@@ -782,8 +760,7 @@ METAL_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
 }}
 
 #if SDL_HAVE_YUV
-static int
-METAL_UpdateTextureYUV(SDL_Renderer * renderer, SDL_Texture * texture,
+static int METAL_UpdateTextureYUV(SDL_Renderer * renderer, SDL_Texture * texture,
                     const SDL_Rect * rect,
                     const Uint8 *Yplane, int Ypitch,
                     const Uint8 *Uplane, int Upitch,
@@ -814,8 +791,7 @@ METAL_UpdateTextureYUV(SDL_Renderer * renderer, SDL_Texture * texture,
     return 0;
 }}
 
-static int
-METAL_UpdateTextureNV(SDL_Renderer * renderer, SDL_Texture * texture,
+static int METAL_UpdateTextureNV(SDL_Renderer * renderer, SDL_Texture * texture,
                     const SDL_Rect * rect,
                     const Uint8 *Yplane, int Ypitch,
                     const Uint8 *UVplane, int UVpitch)
@@ -842,8 +818,7 @@ METAL_UpdateTextureNV(SDL_Renderer * renderer, SDL_Texture * texture,
 }}
 #endif
 
-static int
-METAL_LockTexture(SDL_Renderer * renderer, SDL_Texture * texture,
+static int METAL_LockTexture(SDL_Renderer * renderer, SDL_Texture * texture,
                const SDL_Rect * rect, void **pixels, int *pitch)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
@@ -877,8 +852,7 @@ METAL_LockTexture(SDL_Renderer * renderer, SDL_Texture * texture,
     return 0;
 }}
 
-static void
-METAL_UnlockTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+static void METAL_UnlockTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     METAL_TextureData *texturedata = (__bridge METAL_TextureData *)texture->driverdata;
@@ -961,8 +935,7 @@ METAL_UnlockTexture(SDL_Renderer * renderer, SDL_Texture * texture)
     texturedata.hasdata = YES;
 }}
 
-static void
-METAL_SetTextureScaleMode(SDL_Renderer * renderer, SDL_Texture * texture, SDL_ScaleMode scaleMode)
+static void METAL_SetTextureScaleMode(SDL_Renderer * renderer, SDL_Texture * texture, SDL_ScaleMode scaleMode)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     METAL_TextureData *texturedata = (__bridge METAL_TextureData *)texture->driverdata;
@@ -974,8 +947,7 @@ METAL_SetTextureScaleMode(SDL_Renderer * renderer, SDL_Texture * texture, SDL_Sc
     }
 }}
 
-static int
-METAL_SetRenderTarget(SDL_Renderer * renderer, SDL_Texture * texture)
+static int METAL_SetRenderTarget(SDL_Renderer * renderer, SDL_Texture * texture)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
 
@@ -996,8 +968,7 @@ METAL_SetRenderTarget(SDL_Renderer * renderer, SDL_Texture * texture)
 }}
 
 
-static int
-METAL_QueueSetViewport(SDL_Renderer * renderer, SDL_RenderCommand *cmd)
+static int METAL_QueueSetViewport(SDL_Renderer * renderer, SDL_RenderCommand *cmd)
 {
     float projection[4][4];    /* Prepare an orthographic projection */
     const int w = cmd->data.viewport.rect.w;
@@ -1021,8 +992,7 @@ METAL_QueueSetViewport(SDL_Renderer * renderer, SDL_RenderCommand *cmd)
     return 0;
 }
 
-static int
-METAL_QueueSetDrawColor(SDL_Renderer *renderer, SDL_RenderCommand *cmd)
+static int METAL_QueueSetDrawColor(SDL_Renderer *renderer, SDL_RenderCommand *cmd)
 {
     const size_t vertlen = sizeof(float) * 4;
     float *verts = (float *) SDL_AllocateRenderVertices(renderer, vertlen, DEVICE_ALIGN(16), &cmd->data.color.first);
@@ -1040,8 +1010,7 @@ METAL_QueueSetDrawColor(SDL_Renderer *renderer, SDL_RenderCommand *cmd)
     return 0;
 }
 
-static int
-METAL_QueueDrawPoints(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FPoint * points, int count)
+static int METAL_QueueDrawPoints(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FPoint * points, int count)
 {
     const SDL_Color color = {
         cmd->data.draw.r,
@@ -1065,8 +1034,7 @@ METAL_QueueDrawPoints(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL
     return 0;
 }
 
-static int
-METAL_QueueDrawLines(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FPoint * points, int count)
+static int METAL_QueueDrawLines(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FPoint * points, int count)
 {
     const SDL_Color color = {
         cmd->data.draw.r,
@@ -1119,8 +1087,7 @@ METAL_QueueDrawLines(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_
     return 0;
 }
 
-static int
-METAL_QueueGeometry(SDL_Renderer *renderer, SDL_RenderCommand *cmd, SDL_Texture *texture,
+static int METAL_QueueGeometry(SDL_Renderer *renderer, SDL_RenderCommand *cmd, SDL_Texture *texture,
         const float *xy, int xy_stride, const SDL_Color *color, int color_stride, const float *uv, int uv_stride,
         int num_vertices, const void *indices, int num_indices, int size_indices,
         float scale_x, float scale_y)
@@ -1181,8 +1148,7 @@ typedef struct
     size_t color_offset;
 } METAL_DrawStateCache;
 
-static SDL_bool
-SetDrawState(SDL_Renderer *renderer, const SDL_RenderCommand *cmd, const SDL_MetalFragmentFunction shader,
+static SDL_bool SetDrawState(SDL_Renderer *renderer, const SDL_RenderCommand *cmd, const SDL_MetalFragmentFunction shader,
              const size_t constants_offset, id<MTLBuffer> mtlbufvertex, METAL_DrawStateCache *statecache)
 {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
@@ -1262,8 +1228,7 @@ SetDrawState(SDL_Renderer *renderer, const SDL_RenderCommand *cmd, const SDL_Met
     return SDL_TRUE;
 }
 
-static SDL_bool
-SetCopyState(SDL_Renderer *renderer, const SDL_RenderCommand *cmd, const size_t constants_offset,
+static SDL_bool SetCopyState(SDL_Renderer *renderer, const SDL_RenderCommand *cmd, const size_t constants_offset,
              id<MTLBuffer> mtlbufvertex, METAL_DrawStateCache *statecache)
 {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
@@ -1295,8 +1260,7 @@ SetCopyState(SDL_Renderer *renderer, const SDL_RenderCommand *cmd, const size_t
     return SDL_TRUE;
 }
 
-static int
-METAL_RunCommandQueue(SDL_Renderer * renderer, SDL_RenderCommand *cmd, void *vertices, size_t vertsize)
+static int METAL_RunCommandQueue(SDL_Renderer * renderer, SDL_RenderCommand *cmd, void *vertices, size_t vertsize)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     id<MTLBuffer> mtlbufvertex = nil;
@@ -1437,8 +1401,7 @@ METAL_RunCommandQueue(SDL_Renderer * renderer, SDL_RenderCommand *cmd, void *ver
     return 0;
 }}
 
-static int
-METAL_RenderReadPixels(SDL_Renderer * renderer, const SDL_Rect * rect,
+static int METAL_RenderReadPixels(SDL_Renderer * renderer, const SDL_Rect * rect,
                     Uint32 pixel_format, void * pixels, int pitch)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
@@ -1490,8 +1453,7 @@ METAL_RenderReadPixels(SDL_Renderer * renderer, const SDL_Rect * rect,
     return status;
 }}
 
-static int
-METAL_RenderPresent(SDL_Renderer * renderer)
+static int METAL_RenderPresent(SDL_Renderer * renderer)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     SDL_bool ready = SDL_TRUE;
@@ -1528,15 +1490,13 @@ METAL_RenderPresent(SDL_Renderer * renderer)
     return 0;
 }}
 
-static void
-METAL_DestroyTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+static void METAL_DestroyTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 { @autoreleasepool {
     CFBridgingRelease(texture->driverdata);
     texture->driverdata = NULL;
 }}
 
-static void
-METAL_DestroyRenderer(SDL_Renderer * renderer)
+static void METAL_DestroyRenderer(SDL_Renderer * renderer)
 { @autoreleasepool {
     if (renderer->driverdata) {
         METAL_RenderData *data = CFBridgingRelease(renderer->driverdata);
@@ -1557,15 +1517,13 @@ METAL_DestroyRenderer(SDL_Renderer * renderer)
     SDL_free(renderer);
 }}
 
-static void *
-METAL_GetMetalLayer(SDL_Renderer * renderer)
+static void *METAL_GetMetalLayer(SDL_Renderer * renderer)
 { @autoreleasepool {
     METAL_RenderData *data = (__bridge METAL_RenderData *) renderer->driverdata;
     return (__bridge void*)data.mtllayer;
 }}
 
-static void *
-METAL_GetMetalCommandEncoder(SDL_Renderer * renderer)
+static void *METAL_GetMetalCommandEncoder(SDL_Renderer * renderer)
 { @autoreleasepool {
     // note that data.mtlcmdencoder can be nil if METAL_ActivateRenderCommandEncoder fails.
     //  Before SDL 2.0.18, it might have returned a non-nil encoding that might not have been
@@ -1576,8 +1534,7 @@ METAL_GetMetalCommandEncoder(SDL_Renderer * renderer)
     return (__bridge void*)data.mtlcmdencoder;
 }}
 
-static int
-METAL_SetVSync(SDL_Renderer * renderer, const int vsync)
+static int METAL_SetVSync(SDL_Renderer * renderer, const int vsync)
 {
 #if (defined(__MACOSX__) && defined(MAC_OS_X_VERSION_10_13)) || TARGET_OS_MACCATALYST
     if (@available(macOS 10.13, *)) {
@@ -1623,8 +1580,7 @@ static SDL_MetalView GetWindowView(SDL_Window *window)
     return nil;
 }
 
-static SDL_Renderer *
-METAL_CreateRenderer(SDL_Window * window, Uint32 flags)
+static SDL_Renderer *METAL_CreateRenderer(SDL_Window * window, Uint32 flags)
 { @autoreleasepool {
     SDL_Renderer *renderer = NULL;
     METAL_RenderData *data = NULL;
diff --git a/src/render/opengl/SDL_shaders_gl.c b/src/render/opengl/SDL_shaders_gl.c
index a1fa2554c..82b04cea8 100644
--- a/src/render/opengl/SDL_shaders_gl.c
+++ b/src/render/opengl/SDL_shaders_gl.c
@@ -490,8 +490,7 @@ static void DestroyShaderProgram(GL_ShaderContext *ctx, GL_ShaderData *data)
     ctx->glDeleteObjectARB(data->program);
 }
 
-GL_ShaderContext *
-GL_CreateShaderContext(void)
+GL_ShaderContext *GL_CreateShaderContext(void)
 {
     GL_ShaderContext *ctx;
     SDL_bool shaders_supported;
diff --git a/src/render/psp/SDL_render_psp.c b/src/render/psp/SDL_render_psp.c
index 4fb6a64ca..95a48d9ff 100644
--- a/src/render/psp/SDL_render_psp.c
+++ b/src/render/psp/SDL_render_psp.c
@@ -1291,8 +1291,7 @@ static int PSP_SetVSync(SDL_Renderer *renderer, const int vsync)
     return 0;
 }
 
-SDL_Renderer *
-PSP_CreateRenderer(SDL_Window *window, Uint32 flags)
+SDL_Renderer *PSP_CreateRenderer(SDL_Window *window, Uint32 flags)
 {
 
     SDL_Renderer *renderer;
diff --git a/src/render/software/SDL_render_sw.c b/src/render/software/SDL_render_sw.c
index e142909cc..3196844e4 100644
--- a/src/render/software/SDL_render_sw.c
+++ b/src/render/software/SDL_render_sw.c
@@ -986,8 +986,7 @@ static void SW_DestroyRenderer(SDL_Renderer *renderer)
     SDL_free(renderer);
 }
 
-SDL_Renderer *
-SW_CreateRendererForSurface(SDL_Surface *surface)
+SDL_Renderer *SW_CreateRendererForSurface(SDL_Surface *surface)
 {
     SDL_Renderer *renderer;
     SW_RenderData *data;
diff --git a/src/render/software/SDL_rotate.c b/src/render/software/SDL_rotate.c
index 6ebc5e137..d51df2f1f 100644
--- a/src/render/software/SDL_rotate.c
+++ b/src/render/software/SDL_rotate.c
@@ -488,8 +488,7 @@ When using the NONE and MOD modes, color and alpha modulation must be applied be
 
 */
 
-SDL_Surface *
-SDLgfx_rotateSurface(SDL_Surface *src, double angle, int smooth, int flipx, int flipy,
+SDL_Surface *SDLgfx_rotateSurface(SDL_Surface *src, double angle, int smooth, int flipx, int flipy,
                      const SDL_Rect *rect_dest, double cangle, double sangle, const SDL_FPoint *center)
 {
     SDL_Surface *rz_dst;
diff --git a/src/render/vitagxm/SDL_render_vita_gxm.c b/src/render/vitagxm/SDL_render_vita_gxm.c
index cbe8b0405..434a7e425 100644
--- a/src/render/vitagxm/SDL_render_vita_gxm.c
+++ b/src/render/vitagxm/SDL_render_vita_gxm.c
@@ -211,8 +211,7 @@ static int VITA_GXM_SetVSync(SDL_Renderer *renderer, const int vsync)
     return 0;
 }
 
-SDL_Renderer *
-VITA_GXM_CreateRenderer(SDL_Window *window, Uint32 flags)
+SDL_Renderer *VITA_GXM_CreateRenderer(SDL_Window *window, Uint32 flags)
 {
     SDL_Renderer *renderer;
     VITA_GXM_RenderData *data;
diff --git a/src/render/vitagxm/SDL_render_vita_gxm_memory.c b/src/render/vitagxm/SDL_render_vita_gxm_memory.c
index 24e75ba6d..a5a4aacfe 100644
--- a/src/render/vitagxm/SDL_render_vita_gxm_memory.c
+++ b/src/render/vitagxm/SDL_render_vita_gxm_memory.c
@@ -25,8 +25,7 @@
 
 #include "SDL_render_vita_gxm_memory.h"
 
-void *
-vita_mem_alloc(unsigned int type, unsigned int size, unsigned int alignment, unsigned int attribs, SceUID *uid)
+void *vita_mem_alloc(unsigned int type, unsigned int size, unsigned int alignment, unsigned int attribs, SceUID *uid)
 {
     void *mem;
 
@@ -63,8 +62,7 @@ void vita_mem_free(SceUID uid)
     sceKernelFreeMemBlock(uid);
 }
 
-void *
-vita_gpu_mem_alloc(VITA_GXM_RenderData *data, unsigned int size)
+void *vita_gpu_mem_alloc(VITA_GXM_RenderData *data, unsigned int size)
 {
     void *mem;
 
@@ -122,8 +120,7 @@ void vita_gpu_mem_destroy(VITA_GXM_RenderData *data)
     }
 }
 
-void *
-vita_mem_vertex_usse_alloc(unsigned int size, SceUID *uid, unsigned int *usse_offset)
+void *vita_mem_vertex_usse_alloc(unsigned int size, SceUID *uid, unsigned int *usse_offset)
 {
     void *mem = NULL;
 
@@ -150,8 +147,7 @@ void vita_mem_vertex_usse_free(SceUID uid)
     sceKernelFreeMemBlock(uid);
 }
 
-void *
-vita_mem_fragment_usse_alloc(unsigned int size, SceUID *uid, unsigned int *usse_offset)
+void *vita_mem_fragment_usse_alloc(unsigned int size, SceUID *uid, unsigned int *usse_offset)
 {
     void *mem = NULL;
 
diff --git a/src/render/vitagxm/SDL_render_vita_gxm_tools.c b/src/render/vitagxm/SDL_render_vita_gxm_tools.c
index 0e5cc468d..772a703f3 100644
--- a/src/render/vitagxm/SDL_render_vita_gxm_tools.c
+++ b/src/render/vitagxm/SDL_render_vita_gxm_tools.c
@@ -81,8 +81,7 @@ static void patcher_host_free(void *user_data, void *mem)
     SDL_free(mem);
 }
 
-void *
-pool_malloc(VITA_GXM_RenderData *data, unsigned int size)
+void *pool_malloc(VITA_GXM_RenderData *data, unsigned int size)
 {
 
     if ((data->pool_index + size) < VITA_GXM_POOL_SIZE) {
@@ -94,8 +93,7 @@ pool_malloc(VITA_GXM_RenderData *data, unsigned int size)
     return NULL;
 }
 
-void *
-pool_memalign(VITA_GXM_RenderData *data, unsigned int size, unsigned int alignment)
+void *pool_memalign(VITA_GXM_RenderData *data, unsigned int size, unsigned int alignment)
 {
     unsigned int new_index = (data->pool_index + alignment - 1) & ~(alignment - 1);
     if ((new_index + size) < VITA_GXM_POOL_SIZE) {
@@ -959,8 +957,7 @@ gxm_texture_get_format(const gxm_texture *texture)
     return sceGxmTextureGetFormat(&texture->gxm_tex);
 }
 
-void *
-gxm_texture_get_datap(const gxm_texture *texture)
+void *gxm_texture_get_datap(const gxm_texture *texture)
 {
     return sceGxmTextureGetData(&texture->gxm_tex);
 }
@@ -985,8 +982,7 @@ static SceGxmColorFormat tex_format_to_color_format(SceGxmTextureFormat format)
     }
 }
 
-gxm_texture *
-create_gxm_texture(VITA_GXM_RenderData *data, unsigned int w, unsigned int h, SceGxmTextureFormat format, unsigned int isRenderTarget, unsigned int *return_w, unsigned int *return_h, unsigned int *return_pitch, float *return_wscale)
+gxm_texture *create_gxm_texture(VITA_GXM_RenderData *data, unsigned int w, unsigned int h, SceGxmTextureFormat format, unsigned int isRenderTarget, unsigned int *return_w, unsigned int *return_h, unsigned int *return_pitch, float *return_wscale)
 {
     gxm_texture *texture = SDL_calloc(1, sizeof(gxm_texture));
     int aligned_w = ALIGN(w, 8);
diff --git a/src/stdlib/SDL_getenv.c b/src/stdlib/SDL_getenv.c
index e42a70c60..466867ac8 100644
--- a/src/stdlib/SDL_getenv.c
+++ b/src/stdlib/SDL_getenv.c
@@ -168,8 +168,7 @@ int SDL_setenv(const char *name, const char *value, int overwrite)
 
 /* Retrieve a variable named "name" from the environment */
 #if defined(HAVE_GETENV)
-char *
-SDL_getenv(const char *name)
+char *SDL_getenv(const char *name)
 {
 #if defined(__ANDROID__)
     /* Make sure variables from the application manifest are available */
@@ -184,8 +183,7 @@ SDL_getenv(const char *name)
     return getenv(name);
 }
 #elif defined(__WIN32__) || defined(__WINGDK__)
-char *
-SDL_getenv(const char *name)
+char *SDL_getenv(const char *name)
 {
     size_t bufferlen;
 
@@ -211,8 +209,7 @@ SDL_getenv(const char *name)
     return SDL_envmem;
 }
 #else
-char *
-SDL_getenv(const char *name)
+char *SDL_getenv(const char *name)
 {
     size_t len, i;
     char *value;
diff --git a/src/stdlib/SDL_iconv.c b/src/stdlib/SDL_iconv.c
index 2c281e2a1..3ab535b49 100644
--- a/src/stdlib/SDL_iconv.c
+++ b/src/stdlib/SDL_iconv.c
@@ -40,8 +40,7 @@
 
 SDL_COMPILE_TIME_ASSERT(iconv_t, sizeof(iconv_t) <= sizeof(SDL_iconv_t));
 
-SDL_iconv_t
-SDL_iconv_open(const char *tocode, const char *fromcode)
+SDL_iconv_t SDL_iconv_open(const char *tocode, const char *fromcode)
 {
     return (SDL_iconv_t)((uintptr_t)iconv_open(tocode, fromcode));
 }
@@ -51,8 +50,7 @@ int SDL_iconv_close(SDL_iconv_t cd)
     return iconv_close((iconv_t)((uintptr_t)cd));
 }
 
-size_t
-SDL_iconv(SDL_iconv_t cd,
+size_t SDL_iconv(SDL_iconv_t cd,
           const char **inbuf, size_t *inbytesleft,
           char **outbuf, size_t *outbytesleft)
 {
@@ -196,8 +194,7 @@ static const char *getlocale(char *buffer, size_t bufsize)
     return buffer;
 }
 
-SDL_iconv_t
-SDL_iconv_open(const char *tocode, const char *fromcode)
+SDL_iconv_t SDL_iconv_open(const char *tocode, const char *fromcode)
 {
     int src_fmt = ENCODING_UNKNOWN;
     int dst_fmt = ENCODING_UNKNOWN;
@@ -789,9 +786,7 @@ int SDL_iconv_close(SDL_iconv_t cd)
 
 #endif /* !HAVE_ICONV */
 
-char *
-SDL_iconv_string(const char *tocode, const char *fromcode, const char *inbuf,
-                 size_t inbytesleft)
+char *SDL_iconv_string(const char *tocode, const char *fromcode, const char *inbuf, size_t inbytesleft)
 {
     SDL_iconv_t cd;
     char *string;
diff --git a/src/stdlib/SDL_qsort.c b/src/stdlib/SDL_qsort.c
index 17180a9ab..5d1c7ef94 100644
--- a/src/stdlib/SDL_qsort.c
+++ b/src/stdlib/SDL_qsort.c
@@ -28,8 +28,7 @@
 #include "SDL_stdinc.h"
 
 #if defined(HAVE_QSORT)
-void
-SDL_qsort(void *base, size_t nmemb, size_t size, int (*compare) (const void *, const void *))
+void SDL_qsort(void *base, size_t nmemb, size_t size, int (*compare) (const void *, const void *))
 {
     qsort(base, nmemb, size, compare);
 }
@@ -534,8 +533,7 @@ extern void qsortG(void *base, size_t nmemb, size_t size,
 
 #endif /* HAVE_QSORT */
 
-void *
-SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compare)(const void *, const void *))
+void *SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (*compare)(const void *, const void *))
 {
 #if defined(HAVE_BSEARCH)
     return bsearch(key, base, nmemb, size, compare);
diff --git a/src/stdlib/SDL_stdlib.c b/src/stdlib/SDL_stdlib.c
index 9b4ff2835..8c9d196ac 100644
--- a/src/stdlib/SDL_stdlib.c
+++ b/src/stdlib/SDL_stdlib.c
@@ -518,8 +518,7 @@ int SDL_tolower(int x) { return ((x) >= 'A') && ((x) <= 'Z') ? ('a' + ((x) - 'A'
 
 /* This file contains a portable memcpy manipulation function for SDL */
 
-void *
-SDL_memcpy(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)
+void *SDL_memcpy(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)
 {
 #ifdef __GNUC__
     /* Presumably this is well tuned for speed.
@@ -571,8 +570,7 @@ SDL_memcpy(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src,
 #endif /* __GNUC__ */
 }
 
-void *
-SDL_memset(SDL_OUT_BYTECAP(len) void *dst, int c, size_t len)
+void *SDL_memset(SDL_OUT_BYTECAP(len) void *dst, int c, size_t len)
 {
 #if defined(HAVE_MEMSET)
     return memset(dst, c, len);
diff --git a/src/stdlib/SDL_string.c b/src/stdlib/SDL_string.c
index e5c5f15f8..d71f2da97 100644
--- a/src/stdlib/SDL_string.c
+++ b/src/stdlib/SDL_string.c
@@ -55,8 +55,7 @@ static unsigned UTF8_TrailingBytes(unsigned char c)
 }
 
 #if !defined(HAVE_VSSCANF) || !defined(HAVE_STRTOL) || !defined(HAVE_STRTOUL) || !defined(HAVE_STRTOD)
-static size_t
-SDL_ScanLong(const char *text, int count, int radix, long *valuep)
+static size_t SDL_ScanLong(const char *text, int count, int radix, long *valuep)
 {
     const char *textstart = text;
     long value = 0;
@@ -100,8 +99,7 @@ SDL_ScanLong(const char *text, int count, int radix, long *valuep)
 #endif
 
 #if !defined(HAVE_VSSCANF) || !defined(HAVE_STRTOUL) || !defined(HAVE_STRTOD)
-static size_t
-SDL_ScanUnsignedLong(const char *text, int count, int radix, unsigned long *valuep)
+static size_t SDL_ScanUnsignedLong(const char *text, int count, int radix, unsigned long *valuep)
 {
     const char *textstart = text;
     unsigned long value = 0;
@@ -140,8 +138,7 @@ SDL_ScanUnsignedLong(const char *text, int count, int radix, unsigned long *valu
 #endif
 
 #ifndef HAVE_VSSCANF
-static size_t
-SDL_ScanUintPtrT(const char *text, int radix, uintptr_t *valuep)
+static size_t SDL_ScanUintPtrT(const char *text, int radix, uintptr_t *valuep)
 {
     const char *textstart = text;
     uintptr_t value = 0;
@@ -172,8 +169,7 @@ SDL_ScanUintPtrT(const char *text, int radix, uintptr_t *valuep)
 #endif
 
 #if !defined(HAVE_VSSCANF) || !defined(HAVE_STRTOLL) || !defined(HAVE_STRTOULL)
-static size_t
-SDL_ScanLongLong(const char *text, int count, int radix, Sint64 *valuep)
+static size_t SDL_ScanLongLong(const char *text, int count, int radix, Sint64 *valuep)
 {
     const char *textstart = text;
     Sint64 value = 0;
@@ -217,8 +213,7 @@ SDL_ScanLongLong(const char *text, int count, int radix, Sint64 *valuep)
 #endif
 
 #if !defined(HAVE_VSSCANF) || !defined(HAVE_STRTOULL)
-static size_t
-SDL_ScanUnsignedLongLong(const char *text, int count, int radix, Uint64 *valuep)
+static size_t SDL_ScanUnsignedLongLong(const char *text, int count, int radix, Uint64 *valuep)
 {
     const char *textstart = text;
     Uint64 value = 0;
@@ -257,8 +252,7 @@ SDL_ScanUnsignedLongLong(const char *text, int count, int radix, Uint64 *valuep)
 #endif
 
 #if !defined(HAVE_VSSCANF) || !defined(HAVE_STRTOD)
-static size_t
-SDL_ScanFloat(const char *text, double *valuep)
+static size_t SDL_ScanFloat(const char *text, double *valuep)
 {
     const char *textstart = text;
     unsigned long lvalue = 0;
@@ -292,8 +286,7 @@ SDL_ScanFloat(const char *text, double *valuep)
 }
 #endif
 
-void *
-SDL_memmove(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)
+void *SDL_memmove(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)
 {
 #if defined(HAVE_MEMMOVE)
     return memmove(dst, src, len);
@@ -404,8 +397,7 @@ SDL_wcslcat(SDL_INOUT_Z_CAP(maxlen) wchar_t *dst, const wchar_t *src, size_t max
 #endif /* HAVE_WCSLCAT */
 }
 
-wchar_t *
-SDL_wcsdup(const wchar_t *string)
+wchar_t *SDL_wcsdup(const wchar_t *string)
 {
     size_t len = ((SDL_wcslen(string) + 1) * sizeof(wchar_t));
     wchar_t *newstr = (wchar_t *)SDL_malloc(len);
@@ -415,8 +407,7 @@ SDL_wcsdup(const wchar_t *string)
     return newstr;
 }
 
-wchar_t *
-SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle)
+wchar_t *SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle)
 {
 #if defined(HAVE_WCSSTR)
     return SDL_const_cast(wchar_t *, wcsstr(haystack, needle));
@@ -645,8 +636,7 @@ SDL_strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen)
 #endif /* HAVE_STRLCAT */
 }
 
-char *
-SDL_strdup(const char *string)
+char *SDL_strdup(const char *string)
 {
     size_t len = SDL_strlen(string) + 1;
     char *newstr = (char *)SDL_malloc(len);
@@ -656,8 +646,7 @@ SDL_strdup(const char *string)
     return newstr;
 }
 
-char *
-SDL_strrev(char *string)
+char *SDL_strrev(char *string)
 {
 #if defined(HAVE__STRREV)
     return _strrev(string);
@@ -675,8 +664,7 @@ SDL_strrev(char *string)
 #endif /* HAVE__STRREV */
 }
 
-char *
-SDL_strupr(char *string)
+char *SDL_strupr(char *string)
 {
 #if defined(HAVE__STRUPR)
     return _strupr(string);
@@ -690,8 +678,7 @@ SDL_strupr(char *string)
 #endif /* HAVE__STRUPR */
 }
 
-char *
-SDL_strlwr(char *string)
+char *SDL_strlwr(char *string)
 {
 #if defined(HAVE__STRLWR)
     return _strlwr(string);
@@ -705,8 +692,7 @@ SDL_strlwr(char *string)
 #endif /* HAVE__STRLWR */
 }
 
-char *
-SDL_strchr(const char *string, int c)
+char *SDL_strchr(const char *string, int c)
 {
 #ifdef HAVE_STRCHR
     return SDL_const_cast(char *, strchr(string, c));
@@ -726,8 +712,7 @@ SDL_strchr(const char *string, int c)
 #endif /* HAVE_STRCHR */
 }
 
-char *
-SDL_strrchr(const char *string, int c)
+char *SDL_strrchr(const char *string, int c)
 {
 #ifdef HAVE_STRRCHR
     return SDL_const_cast(char *, strrchr(string, c));
@@ -745,8 +730,7 @@ SDL_strrchr(const char *string, int c)
 #endif /* HAVE_STRRCHR */
 }
 
-char *
-SDL_strstr(const char *haystack, const char *needle)
+char *SDL_strstr(const char *haystack, const char *needle)
 {
 #if defined(HAVE_STRSTR)
     return SDL_const_cast(char *, strstr(haystack, needle));
@@ -762,8 +746,7 @@ SDL_strstr(const char *haystack, const char *needle)
 #endif /* HAVE_STRSTR */
 }
 
-char *
-SDL_strcasestr(const char *haystack, const char *needle)
+char *SDL_strcasestr(const char *haystack, const char *needle)
 {
 #if defined(HAVE_STRCASESTR)
     return SDL_const_cast(char *, strcasestr(haystack, needle));
@@ -789,8 +772,7 @@ static const char ntoa_table[] = {
 };
 #endif /* ntoa() conversion table */
 
-char *
-SDL_itoa(int value, char *string, int radix)
+char *SDL_itoa(int value, char *string, int radix)
 {
 #ifdef HAVE_ITOA
     return itoa(value, string, radix);
@@ -799,8 +781,7 @@ SDL_itoa(int value, char *string, int radix)
 #endif /* HAVE_ITOA */
 }
 
-char *
-SDL_uitoa(unsigned int value, char *string, int radix)
+char *SDL_uitoa(unsigned int value, char *string, int radix)
 {
 #ifdef HAVE__UITOA
     return _uitoa(value, string, radix);
@@ -809,8 +790,7 @@ SDL_uitoa(unsigned int value, char *string, int radix)
 #endif /* HAVE__UITOA */
 }
 
-char *
-SDL_ltoa(long value, char *string, int radix)
+char *SDL_ltoa(long value, char *string, int radix)
 {
 #if defined(HAVE__LTOA)
     return _ltoa(value, string, radix);
@@ -828,8 +808,7 @@ SDL_ltoa(long value, char *string, int radix)
 #endif /* HAVE__LTOA */
 }
 
-char *
-SDL_ultoa(unsigned long value, char *string, int radix)
+char *SDL_ultoa(unsigned long value, char *string, int radix)
 {
 #if defined(HAVE__ULTOA)
     return _ultoa(value, string, radix);
@@ -853,8 +832,7 @@ SDL_ultoa(unsigned long value, char *string, int radix)
 #endif /* HAVE__ULTOA */
 }
 
-char *
-SDL_lltoa(Sint64 value, char *string, int radix)
+char *SDL_lltoa(Sint64 value, char *string, int radix)
 {
 #if defined(HAVE__I64TOA)
     return _i64toa(value, string, radix);
@@ -872,8 +850,7 @@ SDL_lltoa(Sint64 value, char *string, int radix)
 #endif /* HAVE__I64TOA */
 }
 
-char *
-SDL_ulltoa(Uint64 value, char *string, int radix)
+char *SDL_ulltoa(Uint64 value, char *string, int radix)
 {
 #if defined(HAVE__UI64TOA)
     return _ui64toa(value, string, radix);
@@ -964,8 +941,7 @@ SDL_strtoul(const char *string, char **endp, int base)
 #endif /* HAVE_STRTOUL */
 }
 
-Sint64
-SDL_strtoll(const char *string, char **endp, int base)
+Sint64 SDL_strtoll(const char *string, char **endp, int base)
 {
 #if defined(HAVE_STRTOLL)
     return strtoll(string, endp, base);
@@ -989,8 +965,7 @@ SDL_strtoll(const char *string, char **endp, int base)
 #endif /* HAVE_STRTOLL */
 }
 
-Uint64
-SDL_strtoull(const char *string, char **endp, int base)
+Uint64 SDL_strtoull(const char *string, char **endp, int base)
 {
 #if defined(HAVE_STRTOULL)
     return strtoull(string, endp, base);
@@ -1491,8 +1466,7 @@ typedef struct
     int precision;
 } SDL_FormatInfo;
 
-static size_t
-SDL_PrintString(char *text, size_t maxlen, SDL_FormatInfo *info, const char *string)
+static size_t SDL_PrintString(char *text, size_t maxlen, SDL_FormatInfo *info, const char *string)
 {
     size_t length = 0;
     size_t slen, sz;
@@ -1577,8 +1551,7 @@ static void SDL_IntPrecisionAdjust(char *num, size_t maxlen, SDL_FormatInfo *inf
     }
 }
 
-static size_t
-SDL_PrintLong(char *text, size_t maxlen, SDL_FormatInfo *info, long value)
+static size_t SDL_PrintLong(char *text, size_t maxlen, SDL_FormatInfo *info, long value)
 {
     char num[130], *p = num;
 
@@ -1591,8 +1564,7 @@ SDL_PrintLong(char *text, size_t maxlen, SDL_FormatInfo *info, long value)
     return SDL_PrintString(text, maxlen, info, num);
 }
 
-static size_t
-SDL_PrintUnsignedLong(char *text, size_t maxlen, SDL_FormatInfo *info, unsigned long value)
+static size_t SDL_PrintUnsignedLong(char *text, size_t maxlen, SDL_FormatInfo *info, unsigned long value)
 {
     char num[130];
 
@@ -1601,8 +1573,7 @@ SDL_PrintUnsignedLong(char *text, size_t maxlen, SDL_FormatInfo *info, unsigned
     return SDL_PrintString(text, maxlen, info, num);
 }
 
-static size_t
-SDL_PrintLongLong(char *text, size_t maxlen, SDL_FormatInfo *info, Sint64 value)
+static size_t SDL_PrintLongLong(char *text, size_t maxlen, SDL_FormatInfo *info, Sint64 value)
 {
     char num[130], *p = num;
 
@@ -1615,8 +1586,7 @@ SDL_PrintLongLong(char *text, size_t maxlen, SDL_FormatInfo *info, Sint64 value)
     return SDL_PrintString(text, maxlen, info, num);
 }
 
-static size_t
-SDL_PrintUnsignedLongLong(char *text, size_t maxlen, SDL_FormatInfo *info, Uint64 value)
+static size_t SDL_PrintUnsignedLongLong(char *text, size_t maxlen, SDL_FormatInfo *info, Uint64 value)
 {
     char num[130];
 
@@ -1625,8 +1595,7 @@ SDL_PrintUnsignedLongLong(char *text, size_t maxlen, SDL_FormatInfo *info, Uint6
     return SDL_PrintString(text, maxlen, info, num);
 }
 
-static size_t
-SDL_PrintFloat(char *text, size_t maxlen, SDL_FormatInfo *info, double arg)
+static size_t SDL_PrintFloat(char *text, size_t maxlen, SDL_FormatInfo *info, double arg)
 {
     size_t length = 0;
 
diff --git a/src/test/SDL_test_common.c b/src/test/SDL_test_common.c
index b06ca7294..8781cc574 100644
--- a/src/test/SDL_test_common.c
+++ b/src/test/SDL_test_common.c
@@ -58,8 +58,7 @@ static void SDL_snprintfcat(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, SDL
     va_end(ap);
 }
 
-SDLTest_CommonState *
-SDLTest_CommonCreateState(char **argv, Uint32 flags)
+SDLTest_CommonState *SDLTest_CommonCreateState(char **argv, Uint32 flags)
 {
     int i;
     SDLTest_CommonState *state;
@@ -630,8 +629,7 @@ static char *common_usage_video = NULL;
 static char *common_usage_audio = NULL;
 static char *common_usage_videoaudio = NULL;
 
-const char *
-SDLTest_CommonUsage(SDLTest_CommonState *state)
+const char *SDLTest_CommonUsage(SDLTest_CommonState *state)
 {
 
     switch (state->flags & (SDL_INIT_VIDEO | SDL_INIT_AUDIO)) {
@@ -646,8 +644,7 @@ SDLTest_CommonUsage(SDLTest_CommonState *state)
     }
 }
 
-SDL_bool
-SDLTest_CommonDefaultArgs(SDLTest_CommonState *state, const int argc, char **argv)
+SDL_bool SDLTest_CommonDefaultArgs(SDLTest_CommonState *state, const int argc, char **argv)
 {
     int i = 1;
     while (i < argc) {
@@ -1052,8 +1049,7 @@ static SDL_HitTestResult SDLCALL SDLTest_ExampleHitTestCallback(SDL_Window *win,
     return SDL_HITTEST_NORMAL;
 }
 
-SDL_bool
-SDLTest_CommonInit(SDLTest_CommonState *state)
+SDL_bool SDLTest_CommonInit(SDLTest_CommonState *state)
 {
     int i, j, m, n, w, h;
     SDL_DisplayMode fullscreen_mode;
diff --git a/src/test/SDL_test_fuzzer.c b/src/test/SDL_test_fuzzer.c
index 1c79b99de..b59cbb32d 100644
--- a/src/test/SDL_test_fuzzer.c
+++ b/src/test/SDL_test_fuzzer.c
@@ -87,40 +87,35 @@ Sint8 SDLTest_RandomSint8()
     return (Sint8)SDLTest_RandomInt(&rndContext) & 0x000000FF;
 }
 
-Uint16
-SDLTest_RandomUint16()
+Uint16 SDLTest_RandomUint16()
 {
     fuzzerInvocationCounter++;
 
     return (Uint16)SDLTest_RandomInt(&rndContext) & 0x0000FFFF;
 }
 
-Sint16
-SDLTest_RandomSint16()
+Sint16 SDLTest_RandomSint16()
 {
     fuzzerInvocationCounter++;
 
     return (Sint16)SDLTest_RandomInt(&rndContext) & 0x0000FFFF;
 }
 
-Sint32
-SDLTest_RandomSint32()
+Sint32 SDLTest_RandomSint32()
 {
     fuzzerInvocationCounter++;
 
     return (Sint32)SDLTest_RandomInt(&rndContext);
 }
 
-Uint32
-SDLTest_RandomUint32()
+Uint32 SDLTest_RandomUint32()
 {
     fuzzerInvocationCounter++;
 
     return (Uint32)SDLTest_RandomInt(&rndContext);
 }
 
-Uint64
-SDLTest_RandomUint64()
+Uint64 SDLTest_RandomUint64()
 {
     union
     {
@@ -137,8 +132,7 @@ SDLTest_RandomUint64()
     return value.v64;
 }
 
-Sint64
-SDLTest_RandomSint64()
+Sint64 SDLTest_RandomSint64()
 {
     union
     {
@@ -155,8 +149,7 @@ SDLTest_RandomSint64()
     return (Sint64)value.v64;
 }
 
-Sint32
-SDLTest_RandomIntegerInRange(Sint32 pMin, Sint32 pMax)
+Sint32 SDLTest_RandomIntegerInRange(Sint32 pMin, Sint32 pMax)
 {
     Sint64 min = pMin;
     Sint64 max = pMax;
@@ -270,8 +263,7 @@ Uint8 SDLTest_RandomUint8BoundaryValue(Uint8 boundary1, Uint8 boundary2, SDL_boo
                                                          validDomain);
 }
 
-Uint16
-SDLTest_RandomUint16BoundaryValue(Uint16 boundary1, Uint16 boundary2, SDL_bool validDomain)
+Uint16 SDLTest_RandomUint16BoundaryValue(Uint16 boundary1, Uint16 boundary2, SDL_bool validDomain)
 {
     /* max value for Uint16 */
     const Uint64 maxValue = USHRT_MAX;
@@ -280,8 +272,7 @@ SDLTest_RandomUint16BoundaryValue(Uint16 boundary1, Uint16 boundary2, SDL_bool v
                                                           validDomain);
 }
 
-Uint32
-SDLTest_RandomUint32BoundaryValue(Uint32 boundary1, Uint32 boundary2, SDL_bool validDomain)
+Uint32 SDLTest_RandomUint32BoundaryValue(Uint32 boundary1, Uint32 boundary2, SDL_bool validDomain)
 {
 /* max value for Uint32 */
 #if ((ULONG_MAX) == (UINT_MAX))
@@ -294,8 +285,7 @@ SDLTest_RandomUint32BoundaryValue(Uint32 boundary1, Uint32 boundary2, SDL_bool v
                                                           validDomain);
 }
 
-Uint64
-SDLTest_RandomUint64BoundaryValue(Uint64 boundary1, Uint64 boundary2, SDL_bool validDomain)
+Uint64 SDLTest_RandomUint64BoundaryValue(Uint64 boundary1, Uint64 boundary2, SDL_bool validDomain)
 {
     /* max value for Uint64 */
     const Uint64 maxValue = UINT64_MAX;
@@ -400,8 +390,7 @@ Sint8 SDLTest_RandomSint8BoundaryValue(Sint8 boundary1, Sint8 boundary2, SDL_boo
                                                        validDomain);
 }
 
-Sint16
-SDLTest_RandomSint16BoundaryValue(Sint16 boundary1, Sint16 boundary2, SDL_bool validDomain)
+Sint16 SDLTest_RandomSint16BoundaryValue(Sint16 boundary1, Sint16 boundary2, SDL_bool validDomain)
 {
     /* min & max values for Sint16 */
     const Sint64 maxValue = SHRT_MAX;
@@ -411,8 +400,7 @@ SDLTest_RandomSint16BoundaryValue(Sint16 boundary1, Sint16 boundary2, SDL_bool v
                                                         validDomain);
 }
 
-Sint32
-SDLTest_RandomSint32BoundaryValue(Sint32 boundary1, Sint32 boundary2, SDL_bool validDomain)
+Sint32 SDLTest_RandomSint32BoundaryValue(Sint32 boundary1, Sint32 boundary2, SDL_bool validDomain)
 {
 /* min & max values for Sint32 */
 #if ((ULONG_MAX) == (UINT_MAX))
@@ -427,8 +415,7 @@ SDLTest_RandomSint32BoundaryValue(Sint32 boundary1, Sint32 boundary2, SDL_bool v
                                                         validDomain);
 }
 
-Sint64
-SDLTest_RandomSint64BoundaryValue(Sint64 boundary1, Sint64 boundary2, SDL_bool validDomain)
+Sint64 SDLTest_RandomSint64BoundaryValue(Sint64 boundary1, Sint64 boundary2, SDL_bool validDomain)
 {
     /* min & max values for Sint64 */
     const Sint64 maxValue = INT64_MAX;
@@ -469,14 +456,12 @@ SDLTest_RandomDouble()
     return r;
 }
 
-char *
-SDLTest_RandomAsciiString()
+char *SDLTest_RandomAsciiString()
 {
     return SDLTest_RandomAsciiStringWithMaximumLength(255);
 }
 
-char *
-SDLTest_RandomAsciiStringWithMaximumLength(int maxLength)
+char *SDLTest_RandomAsciiStringWithMaximumLength(int maxLength)
 {
     int size;
 
@@ -490,8 +475,7 @@ SDLTest_RandomAsciiStringWithMaximumLength(int maxLength)
     return SDLTest_RandomAsciiStringOfSize(size);
 }
 
-char *
-SDLTest_RandomAsciiStringOfSize(int size)
+char *SDLTest_RandomAsciiStringOfSize(int size)
 {
     char *string;
     int counter;
diff --git a/src/test/SDL_test_harness.c b/src/test/SDL_test_harness.c
index 2ce1c1638..614151302 100644
--- a/src/test/SDL_test_harness.c
+++ b/src/test/SDL_test_harness.c
@@ -50,8 +50,7 @@ static Uint32 SDLTest_TestCaseTimeout = 3600;
  *
  * \returns The generated seed string
  */
-char *
-SDLTest_GenerateRunSeed(const int length)
+char *SDLTest_GenerateRunSeed(const int length)
 {
     char *seed = NULL;
     SDLTest_RandomContext randomContext;
diff --git a/src/test/SDL_test_log.c b/src/test/SDL_test_log.c
index fd48b3cf8..d69e3da2c 100644
--- a/src/test/SDL_test_log.c
+++ b/src/test/SDL_test_log.c
@@ -43,8 +43,7 @@
 
 /* work around compiler warning on older GCCs. */
 #if (defined(__GNUC__) && (__GNUC__ <= 2))
-static size_t
-strftime_gcc2_workaround(char *s, size_t max, const char *fmt, const struct tm *tm)
+static size_t strftime_gcc2_workaround(char *s, size_t max, const char *fmt, const struct tm *tm)
 {
     return strftime(s, max, fmt, tm);
 }
diff --git a/src/thread/SDL_thread.c b/src/thread/SDL_thread.c
index 6b26fa116..aa8e2b188 100644
--- a/src/thread/SDL_thread.c
+++ b/src/thread/SDL_thread.c
@@ -28,15 +28,13 @@
 #include "SDL_hints.h"
 #include "../SDL_error_c.h"
 
-SDL_TLSID
-SDL_TLSCreate()
+SDL_TLSID SDL_TLSCreate()
 {
     static SDL_atomic_t SDL_tls_id;
     return SDL_AtomicIncRef(&SDL_tls_id) + 1;
 }
 
-void *
-SDL_TLSGet(SDL_TLSID id)
+void *SDL_TLSGet(SDL_TLSID id)
 {
     SDL_TLSData *storage;
 
@@ -115,8 +113,7 @@ typedef struct SDL_TLSEntry
 static SDL_mutex *SDL_generic_TLS_mutex;
 static SDL_TLSEntry *SDL_generic_TLS;
 
-SDL_TLSData *
-SDL_Generic_GetTLSData(void)
+SDL_TLSData *SDL_Generic_GetTLSData(void)
 {
     SDL_threadID thread = SDL_ThreadID();
     SDL_TLSEntry *entry;
@@ -218,8 +215,7 @@ static void SDLCALL SDL_FreeErrBuf(void *data)
 #endif
 
 /* Routine to get the thread-specific error variable */
-SDL_error *
-SDL_GetErrBuf(void)
+SDL_error *SDL_GetErrBuf(void)
 {
 #if SDL_THREADS_DISABLED
     return SDL_GetStaticErrBuf();
@@ -320,14 +316,12 @@ void SDL_RunThread(SDL_Thread *thread)
 #endif
 
 #ifdef SDL_PASSED_BEGINTHREAD_ENDTHREAD
-SDL_Thread *
-SDL_CreateThreadWithStackSize(int(SDLCALL *fn)(void *),
+SDL_Thread *SDL_CreateThreadWithStackSize(int(SDLCALL *fn)(void *),
                               const char *name, const size_t stacksize, void *data,
                               pfnSDL_CurrentBeginThread pfnBeginThread,
                               pfnSDL_CurrentEndThread pfnEndThread)
 #else
-SDL_Thread *
-SDL_CreateThreadWithStackSize(int(SDLCALL *fn)(void *),
+SDL_Thread *SDL_CreateThreadWithStackSize(int(SDLCALL *fn)(void *),
                               const char *name, const size_t stacksize, void *data)
 #endif
 {
@@ -375,14 +369,12 @@ SDL_CreateThreadWithStackSize(int(SDLCALL *fn)(void *),
 }
 
 #ifdef SDL_PASSED_BEGINTHREAD_ENDTHREAD
-DECLSPEC SDL_Thread *SDLCALL
-SDL_CreateThread(int(SDLCALL *fn)(void *),
+DECLSPEC SDL_Thread *SDLCALL SDL_CreateThread(int(SDLCALL *fn)(void *),
                  const char *name, void *data,
                  pfnSDL_CurrentBeginThread pfnBeginThread,
                  pfnSDL_CurrentEndThread pfnEndThread)
 #else
-DECLSPEC SDL_Thread *SDLCALL
-SDL_CreateThread(int(SDLCALL *fn)(void *),
+DECLSPEC SDL_Thread *SDLCALL SDL_CreateThread(int(SDLCALL *fn)(void *),
                  const char *name, void *data)
 #endif
 {
@@ -408,8 +400,7 @@ SDL_CreateThread(int(SDLCALL *fn)(void *),
 #endif
 }
 
-SDL_Thread *
-SDL_CreateThreadInternal(int(SDLCALL *fn)(void *), const char *name,
+SDL_Thread *SDL_CreateThreadInternal(int(SDLCALL *fn)(void *), const char *name,
                          const size_t stacksize, void *data)
 {
 #ifdef SDL_PASSED_BEGINTHREAD_ENDTHREAD
@@ -419,8 +410,7 @@ SDL_CreateThreadInternal(int(SDLCALL *fn)(void *), const char *name,
 #endif
 }
 
-SDL_threadID
-SDL_GetThreadID(SDL_Thread *thread)
+SDL_threadID SDL_GetThreadID(SDL_Thread *thread)
 {
     SDL_threadID id;
 
@@ -432,8 +422,7 @@ SDL_GetThreadID(SDL_Thread *thread)
     return id;
 }
 
-const char *
-SDL_GetThreadName(SDL_Thread *thread)
+const char *SDL_GetThreadName(SDL_Thread *thread)
 {
     if (thread) {
         return thread->name;
diff --git a/src/thread/generic/SDL_syscond.c b/src/thread/generic/SDL_syscond.c
index 25ead4c2c..a19292970 100644
--- a/src/thread/generic/SDL_syscond.c
+++ b/src/thread/generic/SDL_syscond.c
@@ -53,8 +53,7 @@ typedef struct SDL_cond_generic
 } SDL_cond_generic;
 
 /* Create a condition variable */
-SDL_cond *
-SDL_CreateCond_generic(void)
+SDL_cond *SDL_CreateCond_generic(void)
 {
     SDL_cond_generic *cond;
 
diff --git a/src/thread/generic/SDL_sysmutex.c b/src/thread/generic/SDL_sysmutex.c
index 5f44a60b6..daafbb607 100644
--- a/src/thread/generic/SDL_sysmutex.c
+++ b/src/thread/generic/SDL_sysmutex.c
@@ -33,8 +33,7 @@ struct SDL_mutex
 };
 
 /* Create a mutex */
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     SDL_mutex *mutex;
 
diff --git a/src/thread/generic/SDL_syssem.c b/src/thread/generic/SDL_syssem.c
index d038091d5..fc9794ed4 100644
--- a/src/thread/generic/SDL_syssem.c
+++ b/src/thread/generic/SDL_syssem.c
@@ -28,8 +28,7 @@
 
 #if SDL_THREADS_DISABLED
 
-SDL_sem *
-SDL_CreateSemaphore(Uint32 initial_value)
+SDL_sem *SDL_CreateSemaphore(Uint32 initial_value)
 {
     SDL_SetError("SDL not built with thread support");
     return (SDL_sem *)0;
@@ -54,8 +53,7 @@ int SDL_SemWait(SDL_sem *sem)
     return SDL_SetError("SDL not built with thread support");
 }
 
-Uint32
-SDL_SemValue(SDL_sem *sem)
+Uint32 SDL_SemValue(SDL_sem *sem)
 {
     return 0;
 }
@@ -75,8 +73,7 @@ struct SDL_semaphore
     SDL_cond *count_nonzero;
 };
 
-SDL_sem *
-SDL_CreateSemaphore(Uint32 initial_value)
+SDL_sem *SDL_CreateSemaphore(Uint32 initial_value)
 {
     SDL_sem *sem;
 
@@ -172,8 +169,7 @@ int SDL_SemWait(SDL_sem *sem)
     return SDL_SemWaitTimeout(sem, SDL_MUTEX_MAXWAIT);
 }
 
-Uint32
-SDL_SemValue(SDL_sem *sem)
+Uint32 SDL_SemValue(SDL_sem *sem)
 {
     Uint32 value;
 
diff --git a/src/thread/generic/SDL_systhread.c b/src/thread/generic/SDL_systhread.c
index cc1c8e98b..98c5d65cb 100644
--- a/src/thread/generic/SDL_systhread.c
+++ b/src/thread/generic/SDL_systhread.c
@@ -41,8 +41,7 @@ void SDL_SYS_SetupThread(const char *name)
     return;
 }
 
-SDL_threadID
-SDL_ThreadID(void)
+SDL_threadID SDL_ThreadID(void)
 {
     return 0;
 }
diff --git a/src/thread/generic/SDL_systls.c b/src/thread/generic/SDL_systls.c
index 2e8961ea5..612ad378c 100644
--- a/src/thread/generic/SDL_systls.c
+++ b/src/thread/generic/SDL_systls.c
@@ -22,8 +22,7 @@
 #include "../../SDL_internal.h"
 #include "../SDL_thread_c.h"
 
-SDL_TLSData *
-SDL_SYS_GetTLSData(void)
+SDL_TLSData *SDL_SYS_GetTLSData(void)
 {
     return SDL_Generic_GetTLSData();
 }
diff --git a/src/thread/n3ds/SDL_syscond.c b/src/thread/n3ds/SDL_syscond.c
index 46159416c..05e0462af 100644
--- a/src/thread/n3ds/SDL_syscond.c
+++ b/src/thread/n3ds/SDL_syscond.c
@@ -32,8 +32,7 @@ struct SDL_cond
 };
 
 /* Create a condition variable */
-SDL_cond *
-SDL_CreateCond(void)
+SDL_cond *SDL_CreateCond(void)
 {
     SDL_cond *cond = (SDL_cond *)SDL_malloc(sizeof(SDL_cond));
     if (cond) {
diff --git a/src/thread/n3ds/SDL_sysmutex.c b/src/thread/n3ds/SDL_sysmutex.c
index f45fa7179..09e0e0ae3 100644
--- a/src/thread/n3ds/SDL_sysmutex.c
+++ b/src/thread/n3ds/SDL_sysmutex.c
@@ -27,8 +27,7 @@
 #include "SDL_sysmutex_c.h"
 
 /* Create a mutex */
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     SDL_mutex *mutex;
 
diff --git a/src/thread/n3ds/SDL_systhread.c b/src/thread/n3ds/SDL_systhread.c
index 9d2645e31..4dfb8fc49 100644
--- a/src/thread/n3ds/SDL_systhread.c
+++ b/src/thread/n3ds/SDL_systhread.c
@@ -67,8 +67,7 @@ int SDL_SYS_CreateThread(SDL_Thread *thread)
     return 0;
 }
 
-static size_t
-GetStackSize(size_t requested_size)
+static size_t GetStackSize(size_t requested_size)
 {
     if (requested_size == 0) {
         return N3DS_THREAD_STACK_SIZE_DEFAULT;
@@ -90,8 +89,7 @@ void SDL_SYS_SetupThread(const char *name)
     return;
 }
 
-SDL_threadID
-SDL_ThreadID(void)
+SDL_threadID SDL_ThreadID(void)
 {
     u32 thread_ID = 0;
     svcGetThreadId(&thread_ID, CUR_THREAD_HANDLE);
diff --git a/src/thread/ngage/SDL_sysmutex.cpp b/src/thread/ngage/SDL_sysmutex.cpp
index daeef5e89..72617045f 100644
--- a/src/thread/ngage/SDL_sysmutex.cpp
+++ b/src/thread/ngage/SDL_sysmutex.cpp
@@ -40,8 +40,7 @@ static TInt NewMutex(const TDesC &aName, TAny *aPtr1, TAny *)
 }
 
 /* Create a mutex */
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     RMutex rmutex;
 
@@ -84,8 +83,7 @@ int SDL_LockMutex(SDL_mutex *mutex) SDL_NO_THREAD_SAFETY_ANALYSIS /* clang doesn
 
 /* Try to lock the mutex */
 #if 0
-int
-SDL_TryLockMutex(SDL_mutex *mutex)
+int SDL_TryLockMutex(SDL_mutex *mutex)
 {
     if (mutex == NULL)
     {
diff --git a/src/thread/ngage/SDL_syssem.cpp b/src/thread/ngage/SDL_syssem.cpp
index 0684f51ca..20133c671 100644
--- a/src/thread/ngage/SDL_syssem.cpp
+++ b/src/thread/ngage/SDL_syssem.cpp
@@ -77,8 +77,7 @@ static void WaitAll(SDL_sem *sem)
     }
 }
 
-SDL_sem *
-SDL_CreateSemaphore(Uint32 initial_value)
+SDL_sem *SDL_CreateSemaphore(Uint32 initial_value)
 {
     RSemaphore s;
     TInt status = CreateUnique(NewSema, &s, &initial_value);
@@ -150,8 +149,7 @@ int SDL_SemWait(SDL_sem *sem)
     return SDL_SemWaitTimeout(sem, SDL_MUTEX_MAXWAIT);
 }
 
-Uint32
-SDL_SemValue(SDL_sem *sem)
+Uint32 SDL_SemValue(SDL_sem *sem)
 {
     if (sem == NULL) {
         SDL_InvalidParamError("sem");
diff --git a/src/thread/ngage/SDL_systhread.cpp b/src/thread/ngage/SDL_systhread.cpp
index b0fb5432c..fb2958da8 100644
--- a/src/thread/ngage/SDL_systhread.cpp
+++ b/src/thread/ngage/SDL_systhread.cpp
@@ -80,8 +80,7 @@ void SDL_SYS_SetupThread(const char *name)
     return;
 }
 
-SDL_threadID
-SDL_ThreadID(void)
+SDL_threadID SDL_ThreadID(void)
 {
     RThread current;
     TThreadId id = current.Id();
diff --git a/src/thread/os2/SDL_sysmutex.c b/src/thread/os2/SDL_sysmutex.c
index bb5ff21cc..4a7f6e86e 100644
--- a/src/thread/os2/SDL_sysmutex.c
+++ b/src/thread/os2/SDL_sysmutex.c
@@ -37,8 +37,7 @@ struct SDL_mutex {
 };
 
 /* Create a mutex */
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     ULONG ulRC;
     HMTX  hMtx;
@@ -53,8 +52,7 @@ SDL_CreateMutex(void)
 }
 
 /* Free the mutex */
-void
-SDL_DestroyMutex(SDL_mutex * mutex)
+void SDL_DestroyMutex(SDL_mutex * mutex)
 {
     HMTX  hMtx = (HMTX)mutex;
     if (hMtx != NULLHANDLE) {
@@ -66,8 +64,7 @@ SDL_DestroyMutex(SDL_mutex * mutex)
 }
 
 /* Lock the mutex */
-int
-SDL_LockMutex(SDL_mutex * mutex) SDL_NO_THREAD_SAFETY_ANALYSIS /* clang doesn't know about NULL mutexes */
+int SDL_LockMutex(SDL_mutex * mutex) SDL_NO_THREAD_SAFETY_ANALYSIS /* clang doesn't know about NULL mutexes */
 {
     ULONG ulRC;
     HMTX  hMtx = (HMTX)mutex;
@@ -85,8 +82,7 @@ SDL_LockMutex(SDL_mutex * mutex) SDL_NO_THREAD_SAFETY_ANALYSIS /* clang doesn't
 }
 
 /* try Lock the mutex */
-int
-SDL_TryLockMutex(SDL_mutex * mutex)
+int SDL_TryLockMutex(SDL_mutex * mutex)
 {
     ULONG ulRC;
     HMTX  hMtx = (HMTX)mutex;
@@ -108,8 +104,7 @@ SDL_TryLockMutex(SDL_mutex * mutex)
 }
 
 /* Unlock the mutex */
-int
-SDL_UnlockMutex(SDL_mutex * mutex) SDL_NO_THREAD_SAFETY_ANALYSIS /* clang doesn't know about NULL mutexes */
+int SDL_UnlockMutex(SDL_mutex * mutex) SDL_NO_THREAD_SAFETY_ANALYSIS /* clang doesn't know about NULL mutexes */
 {
     ULONG ulRC;
     HMTX  hMtx = (HMTX)mutex;
diff --git a/src/thread/os2/SDL_syssem.c b/src/thread/os2/SDL_syssem.c
index 3c9cdbd2d..407867d67 100644
--- a/src/thread/os2/SDL_syssem.c
+++ b/src/thread/os2/SDL_syssem.c
@@ -39,8 +39,7 @@ struct SDL_semaphore {
 };
 
 
-SDL_sem *
-SDL_CreateSemaphore(Uint32 initial_value)
+SDL_sem *SDL_CreateSemaphore(Uint32 initial_value)
 {
     ULONG ulRC;
     SDL_sem *pSDLSem = SDL_malloc(sizeof(SDL_sem));
@@ -70,8 +69,7 @@ SDL_CreateSemaphore(Uint32 initial_value)
     return pSDLSem;
 }
 
-void
-SDL_DestroySemaphore(SDL_sem * sem)
+void SDL_DestroySemaphore(SDL_sem * sem)
 {
     if (!sem) return;
 
@@ -80,8 +78,7 @@ SDL_DestroySemaphore(SDL_sem * sem)
     SDL_free(sem);
 }
 
-int
-SDL_SemWaitTimeout(SDL_sem * sem, Uint32 timeout)
+int SDL_SemWaitTimeout(SDL_sem * sem, Uint32 timeout)
 {
     ULONG ulRC;
     ULONG ulStartTime, ulCurTime;
@@ -129,20 +126,17 @@ SDL_SemWaitTimeout(SDL_sem * sem, Uint32 timeout)
     return 0;
 }
 
-int
-SDL_SemTryWait(SDL_sem * sem)
+int SDL_SemTryWait(SDL_sem * sem)
 {
     return SDL_SemWaitTimeout(sem, 0);
 }
 
-int
-SDL_SemWait(SDL_sem * sem)
+int SDL_SemWait(SDL_sem * sem)
 {
     return SDL_SemWaitTimeout(sem, SDL_MUTEX_MAXWAIT);
 }
 
-Uint32
-SDL_SemValue(SDL_sem * sem)
+Uint32 SDL_SemValue(SDL_sem * sem)
 {
     ULONG ulRC;
 
@@ -161,8 +155,7 @@ SDL_SemValue(SDL_sem * sem)
     return ulRC;
 }
 
-int
-SDL_SemPost(SDL_sem * sem)
+int SDL_SemPost(SDL_sem * sem)
 {
     ULONG ulRC;
 
diff --git a/src/thread/os2/SDL_systhread.c b/src/thread/os2/SDL_systhread.c
index 69296ffb2..b2555892c 100644
--- a/src/thread/os2/SDL_systhread.c
+++ b/src/thread/os2/SDL_systhread.c
@@ -54,8 +54,7 @@ static void RunThread(void *data)
         pfnEndThread();
 }
 
-int
-SDL_SYS_CreateThread(SDL_Thread * thread,
+int SDL_SYS_CreateThread(SDL_Thread * thread,
                      pfnSDL_CurrentBeginThread pfnBeginThread,
                      pfnSDL_CurrentEndThread pfnEndThread)
 {
@@ -80,14 +79,12 @@ SDL_SYS_CreateThread(SDL_Thread * thread,
     return 0;
 }
 
-void
-SDL_SYS_SetupThread(const char *name)
+void SDL_SYS_SetupThread(const char *name)
 {
     /* nothing. */
 }
 
-SDL_threadID
-SDL_ThreadID(void)
+SDL_threadID SDL_ThreadID(void)
 {
     PTIB  tib;
     PPIB  pib;
@@ -96,8 +93,7 @@ SDL_ThreadID(void)
     return tib->tib_ptib2->tib2_ultid;
 }
 
-int
-SDL_SYS_SetThreadPriority(SDL_ThreadPriority priority)
+int SDL_SYS_SetThreadPriority(SDL_ThreadPriority priority)
 {
     ULONG ulRC;
 
@@ -112,8 +108,7 @@ SDL_SYS_SetThreadPriority(SDL_ThreadPriority priority)
     return 0;
 }
 
-void
-SDL_SYS_WaitThread(SDL_Thread * thread)
+void SDL_SYS_WaitThread(SDL_Thread * thread)
 {
     ULONG ulRC = DosWaitThread((PTID)&thread->handle, DCWW_WAIT);
 
@@ -122,8 +117,7 @@ SDL_SYS_WaitThread(SDL_Thread * thread)
     }
 }
 
-void
-SDL_SYS_DetachThread(SDL_Thread * thread)
+void SDL_SYS_DetachThread(SDL_Thread * thread)
 {
     /* nothing. */
 }
diff --git a/src/thread/psp/SDL_syscond.c b/src/thread/psp/SDL_syscond.c
index 1f3c0c337..a16187c18 100644
--- a/src/thread/psp/SDL_syscond.c
+++ b/src/thread/psp/SDL_syscond.c
@@ -40,8 +40,7 @@ struct SDL_cond
 };
 
 /* Create a condition variable */
-SDL_cond *
-SDL_CreateCond(void)
+SDL_cond *SDL_CreateCond(void)
 {
     SDL_cond *cond;
 
diff --git a/src/thread/psp/SDL_sysmutex.c b/src/thread/psp/SDL_sysmutex.c
index 82de82f55..3b3cf3786 100644
--- a/src/thread/psp/SDL_sysmutex.c
+++ b/src/thread/psp/SDL_sysmutex.c
@@ -38,8 +38,7 @@ struct SDL_mutex
 };
 
 /* Create a mutex */
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     SDL_mutex *mutex = NULL;
     SceInt32 res = 0;
diff --git a/src/thread/pthread/SDL_syscond.c b/src/thread/pthread/SDL_syscond.c
index 6069f7fd8..5b8aeb4ad 100644
--- a/src/thread/pthread/SDL_syscond.c
+++ b/src/thread/pthread/SDL_syscond.c
@@ -35,8 +35,7 @@ struct SDL_cond
 };
 
 /* Create a condition variable */
-SDL_cond *
-SDL_CreateCond(void)
+SDL_cond *SDL_CreateCond(void)
 {
     SDL_cond *cond;
 
diff --git a/src/thread/pthread/SDL_sysmutex.c b/src/thread/pthread/SDL_sysmutex.c
index 6f39471d2..9b24e1605 100644
--- a/src/thread/pthread/SDL_sysmutex.c
+++ b/src/thread/pthread/SDL_sysmutex.c
@@ -39,8 +39,7 @@ struct SDL_mutex
 #endif
 };
 
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     SDL_mutex *mutex;
     pthread_mutexattr_t attr;
diff --git a/src/thread/pthread/SDL_syssem.c b/src/thread/pthread/SDL_syssem.c
index 90e386c6a..fee50bb86 100644
--- a/src/thread/pthread/SDL_syssem.c
+++ b/src/thread/pthread/SDL_syssem.c
@@ -42,8 +42,7 @@ struct SDL_semaphore
 };
 
 /* Create a semaphore, initialized with value */
-SDL_sem *
-SDL_CreateSemaphore(Uint32 initial_value)
+SDL_sem *SDL_CreateSemaphore(Uint32 initial_value)
 {
     SDL_sem *sem = (SDL_sem *)SDL_malloc(sizeof(SDL_sem));
     if (sem != NULL) {
@@ -172,8 +171,7 @@ int SDL_SemWaitTimeout(SDL_sem *sem, Uint32 timeout)
     return retval;
 }
 
-Uint32
-SDL_SemValue(SDL_sem *sem)
+Uint32 SDL_SemValue(SDL_sem *sem)
 {
     int ret = 0;
 
diff --git a/src/thread/pthread/SDL_systhread.c b/src/thread/pthread/SDL_systhread.c
index 3bf1f58d2..531680705 100644
--- a/src/thread/pthread/SDL_systhread.c
+++ b/src/thread/pthread/SDL_systhread.c
@@ -181,8 +181,7 @@ void SDL_SYS_SetupThread(const char *name)
 #endif
 }
 
-SDL_threadID
-SDL_ThreadID(void)
+SDL_threadID SDL_ThreadID(void)
 {
     return (SDL_threadID)pthread_self();
 }
diff --git a/src/thread/pthread/SDL_systls.c b/src/thread/pthread/SDL_systls.c
index f436f1f43..f0be2f840 100644
--- a/src/thread/pthread/SDL_systls.c
+++ b/src/thread/pthread/SDL_systls.c
@@ -30,8 +30,7 @@
 static pthread_key_t thread_local_storage = INVALID_PTHREAD_KEY;
 static SDL_bool generic_local_storage = SDL_FALSE;
 
-SDL_TLSData *
-SDL_SYS_GetTLSData(void)
+SDL_TLSData *SDL_SYS_GetTLSData(void)
 {
     if (thread_local_storage == INVALID_PTHREAD_KEY && !generic_local_storage) {
         static SDL_SpinLock lock;
diff --git a/src/thread/vita/SDL_syscond.c b/src/thread/vita/SDL_syscond.c
index 74d82469f..632756506 100644
--- a/src/thread/vita/SDL_syscond.c
+++ b/src/thread/vita/SDL_syscond.c
@@ -40,8 +40,7 @@ struct SDL_cond
 };
 
 /* Create a condition variable */
-SDL_cond *
-SDL_CreateCond(void)
+SDL_cond *SDL_CreateCond(void)
 {
     SDL_cond *cond;
 
diff --git a/src/thread/vita/SDL_sysmutex.c b/src/thread/vita/SDL_sysmutex.c
index 26052c7c1..232ae0479 100644
--- a/src/thread/vita/SDL_sysmutex.c
+++ b/src/thread/vita/SDL_sysmutex.c
@@ -34,8 +34,7 @@ struct SDL_mutex
 };
 
 /* Create a mutex */
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     SDL_mutex *mutex = NULL;
     SceInt32 res = 0;
diff --git a/src/thread/windows/SDL_syscond_cv.c b/src/thread/windows/SDL_syscond_cv.c
index 4e6792553..905d416b8 100644
--- a/src/thread/windows/SDL_syscond_cv.c
+++ b/src/thread/windows/SDL_syscond_cv.c
@@ -218,8 +218,7 @@ static const SDL_cond_impl_t SDL_cond_impl_generic = {
     &SDL_CondWaitTimeout_generic,
 };
 
-SDL_cond *
-SDL_CreateCond(void)
+SDL_cond *SDL_CreateCond(void)
 {
     if (SDL_cond_impl_active.Create == NULL) {
         /* Default to generic implementation, works with all mutex implementations */
diff --git a/src/thread/windows/SDL_sysmutex.c b/src/thread/windows/SDL_sysmutex.c
index 1231aa309..70fd0ed1a 100644
--- a/src/thread/windows/SDL_sysmutex.c
+++ b/src/thread/windows/SDL_sysmutex.c
@@ -243,8 +243,7 @@ static const SDL_mutex_impl_t SDL_mutex_impl_cs = {
  * Runtime selection and redirection
  */
 
-SDL_mutex *
-SDL_CreateMutex(void)
+SDL_mutex *SDL_CreateMutex(void)
 {
     if (SDL_mutex_impl_active.Create == NULL) {
         /* Default to fallback implementation */
diff --git a/src/thread/windows/SDL_syssem.c b/src/thread/windows/SDL_syssem.c
index b1b609d33..6853549b6 100644
--- a/src/thread/windows/SDL_syssem.c
+++ b/src/thread/windows/SDL_syssem.c
@@ -377,8 +377,7 @@ static const SDL_sem_impl_t SDL_sem_impl_kern = {
  * Runtime selection and redirection
  */
 
-SDL_sem *
-SDL_CreateSemaphore(Uint32 initial_value)
+SDL_sem *SDL_CreateSemaphore(Uint32 initial_value)
 {
     if (SDL_sem_impl_active.Create == NULL) {
         /* Default to fallback implementation */
@@ -436,8 +435,7 @@ int SDL_SemWait(SDL_sem *sem)
     return SDL_sem_impl_active.Wait(sem);
 }
 
-Uint32
-SDL_SemValue(SDL_sem *sem)
+Uint32 SDL_SemValue(SDL_sem *sem)
 {
     return SDL_sem_impl_active.Value(sem);
 }
diff --git a/src/thread/windows/SDL_systhread.c b/src/thread/windows/SDL_systhread.c
index 95cba20e6..1691469c8 100644
--- a/src/thread/windows/SDL_systhread.c
+++ b/src/thread/windows/SDL_systhread.c
@@ -164,8 +164,7 @@ void SDL_SYS_SetupThread(const char *name)
     }
 }
 
-SDL_threadID
-SDL_ThreadID(void)
+SDL_threadID SDL_ThreadID(void)
 {
     return (SDL_threadID)GetCurrentThreadId();
 }
diff --git a/src/thread/windows/SDL_systls.c b/src/thread/windows/SDL_systls.c
index 998a63745..b4be434fd 100644
--- a/src/thread/windows/SDL_systls.c
+++ b/src/thread/windows/SDL_systls.c
@@ -43,8 +43,7 @@
 static DWORD thread_local_storage = TLS_OUT_OF_INDEXES;
 static SDL_bool generic_local_storage = SDL_FALSE;
 
-SDL_TLSData *
-SDL_SYS_GetTLSData(void)
+SDL_TLSData *SDL_SYS_GetTLSData(void)
 {
     if (thread_local_storage == TLS_OUT_OF_INDEXES && !generic_local_storage) {
         static SDL_SpinLock lock;
diff --git a/src/timer/SDL_timer.c b/src/timer/SDL_timer.c
index bfd55af4f..874f15462 100644
--- a/src/timer/SDL_timer.c
+++ b/src/timer/SDL_timer.c
@@ -274,8 +274,7 @@ void SDL_TimerQuit(void)
     }
 }
 
-SDL_TimerID
-SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param)
+SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param)
 {
     SDL_TimerData *data = &SDL_timer_data;
     SDL_Timer *timer;
@@ -337,8 +336,7 @@ SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param)
     return entry->timerID;
 }
 
-SDL_bool
-SDL_RemoveTimer(SDL_TimerID id)
+SDL_bool SDL_RemoveTimer(SDL_TimerID id)
 {
     SDL_TimerData *data = &SDL_timer_data;
     SDL_TimerMap *prev, *entry;
@@ -420,8 +418,7 @@ void SDL_TimerQuit(void)
     }
 }
 
-SDL_TimerID
-SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param)
+SDL_TimerID SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param)
 {
     SDL_TimerData *data = &SDL_timer_data;
     SDL_TimerMap *entry;
@@ -446,8 +443,7 @@ SDL_AddTimer(Uint32 interval, SDL_TimerCallback callback, void *param)
     return entry->timerID;
 }
 
-SDL_bool
-SDL_RemoveTimer(SDL_TimerID id)
+SDL_bool SDL_RemoveTimer(SDL_TimerID id)
 {
     SDL_TimerData *data = &SDL_timer_data;
     SDL_TimerMap *prev, *entry;
@@ -480,8 +476,7 @@ SDL_RemoveTimer(SDL_TimerID id)
    which wraps back to zero every ~49 days. The newer SDL_GetTicks64()
    doesn't have this problem, so we just wrap that function and clamp to
    the low 32-bits for binary compatibility. */
-Uint32
-SDL_GetTicks(void)
+Uint32 SDL_GetTicks(void)
 {
     return (Uint32)(SDL_GetTicks64() & 0xFFFFFFFF);
 }
diff --git a/src/timer/dummy/SDL_systimer.c b/src/timer/dummy/SDL_systimer.c
index a7a62c755..8b3235792 100644
--- a/src/timer/dummy/SDL_systimer.c
+++ b/src/timer/dummy/SDL_systimer.c
@@ -39,8 +39,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     if (!ticks_started) {
         SDL_TicksInit();
@@ -50,14 +49,12 @@ SDL_GetTicks64(void)
     return 0;
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return SDL_GetTicks();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return 1000;
 }
diff --git a/src/timer/haiku/SDL_systimer.c b/src/timer/haiku/SDL_systimer.c
index ebe4d4949..1c2970bb4 100644
--- a/src/timer/haiku/SDL_systimer.c
+++ b/src/timer/haiku/SDL_systimer.c
@@ -45,8 +45,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     if (!ticks_started) {
         SDL_TicksInit();
@@ -55,14 +54,12 @@ SDL_GetTicks64(void)
     return (Uint64)((system_time() - start) / 1000);
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return system_time();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return 1000000;
 }
diff --git a/src/timer/n3ds/SDL_systimer.c b/src/timer/n3ds/SDL_systimer.c
index d1570b936..2a9c38b8c 100644
--- a/src/timer/n3ds/SDL_systimer.c
+++ b/src/timer/n3ds/SDL_systimer.c
@@ -44,8 +44,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     u64 elapsed;
     if (!ticks_started) {
@@ -56,14 +55,12 @@ SDL_GetTicks64(void)
     return elapsed / CPU_TICKS_PER_MSEC;
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return svcGetSystemTick();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return SYSCLOCK_ARM11;
 }
diff --git a/src/timer/ngage/SDL_systimer.cpp b/src/timer/ngage/SDL_systimer.cpp
index 8f21b28f3..e2a45ce50 100644
--- a/src/timer/ngage/SDL_systimer.cpp
+++ b/src/timer/ngage/SDL_systimer.cpp
@@ -56,8 +56,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     if (!ticks_started) {
         SDL_TicksInit();
@@ -69,14 +68,12 @@ SDL_GetTicks64(void)
     return (Uint64)(deltaTics * tickPeriodMilliSeconds);
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return (Uint64)User::TickCount();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return 1000000;
 }
diff --git a/src/timer/os2/SDL_systimer.c b/src/timer/os2/SDL_systimer.c
index 0f2c67094..0828300ab 100644
--- a/src/timer/os2/SDL_systimer.c
+++ b/src/timer/os2/SDL_systimer.c
@@ -43,8 +43,7 @@ static SDL_bool ticks_started = SDL_FALSE;
 static ULONG    ulTmrFreq = 0;
 static ULLONG   ullTmrStart = 0;
 
-void
-SDL_TicksInit(void)
+void SDL_TicksInit(void)
 {
     ULONG ulTmrStart;  /* for 32-bit fallback. */
     ULONG ulRC;
@@ -70,14 +69,12 @@ SDL_TicksInit(void)
     ullTmrStart = (ULLONG) ulTmrStart;
 }
 
-void
-SDL_TicksQuit(void)
+void SDL_TicksQuit(void)
 {
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     Uint64 ui64Result;
     ULLONG ullTmrNow;
@@ -99,8 +96,7 @@ SDL_GetTicks64(void)
     return ui64Result;
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     QWORD   qwTmrNow;
 
@@ -110,14 +106,12 @@ SDL_GetPerformanceCounter(void)
     return *((Uint64 *)&qwTmrNow);
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return (ulTmrFreq == 0)? 1000 : (Uint64)ulTmrFreq;
 }
 
-void
-SDL_Delay(Uint32 ms)
+void SDL_Delay(Uint32 ms)
 {
     HTIMER  hTimer = NULLHANDLE;
     ULONG   ulRC;
diff --git a/src/timer/ps2/SDL_systimer.c b/src/timer/ps2/SDL_systimer.c
index 133b3508d..910f7a675 100644
--- a/src/timer/ps2/SDL_systimer.c
+++ b/src/timer/ps2/SDL_systimer.c
@@ -49,8 +49,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     uint64_t now;
 
@@ -62,14 +61,12 @@ SDL_GetTicks64(void)
     return (Uint64)((now - start) / (kBUSCLK / CLOCKS_PER_SEC));
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return SDL_GetTicks64();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return 1000;
 }
diff --git a/src/timer/psp/SDL_systimer.c b/src/timer/psp/SDL_systimer.c
index b93483443..5337c771f 100644
--- a/src/timer/psp/SDL_systimer.c
+++ b/src/timer/psp/SDL_systimer.c
@@ -49,8 +49,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     struct timeval now;
 
@@ -62,14 +61,12 @@ SDL_GetTicks64(void)
     return (Uint64)(((Sint64)(now.tv_sec - start.tv_sec) * 1000) + ((now.tv_usec - start.tv_usec) / 1000));
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return SDL_GetTicks64();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return 1000;
 }
diff --git a/src/timer/unix/SDL_systimer.c b/src/timer/unix/SDL_systimer.c
index a62536533..5fe367e13 100644
--- a/src/timer/unix/SDL_systimer.c
+++ b/src/timer/unix/SDL_systimer.c
@@ -101,8 +101,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     if (!ticks_started) {
         SDL_TicksInit();
@@ -127,8 +126,7 @@ SDL_GetTicks64(void)
     }
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     Uint64 ticks;
     if (!ticks_started) {
@@ -160,8 +158,7 @@ SDL_GetPerformanceCounter(void)
     return ticks;
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     if (!ticks_started) {
         SDL_TicksInit();
diff --git a/src/timer/vita/SDL_systimer.c b/src/timer/vita/SDL_systimer.c
index e5815edd8..f954bb747 100644
--- a/src/timer/vita/SDL_systimer.c
+++ b/src/timer/vita/SDL_systimer.c
@@ -49,8 +49,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     uint64_t now;
 
@@ -62,14 +61,12 @@ SDL_GetTicks64(void)
     return (Uint64)((now - start) / 1000);
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     return sceKernelGetProcessTimeWide();
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     return 1000000;
 }
diff --git a/src/timer/windows/SDL_systimer.c b/src/timer/windows/SDL_systimer.c
index ad4c0b46d..e51c891d7 100644
--- a/src/timer/windows/SDL_systimer.c
+++ b/src/timer/windows/SDL_systimer.c
@@ -106,8 +106,7 @@ void SDL_TicksQuit(void)
     ticks_started = SDL_FALSE;
 }
 
-Uint64
-SDL_GetTicks64(void)
+Uint64 SDL_GetTicks64(void)
 {
     LARGE_INTEGER now;
     BOOL rc;
@@ -121,8 +120,7 @@ SDL_GetTicks64(void)
     return (Uint64)(((now.QuadPart - start_ticks.QuadPart) * 1000) / ticks_per_second.QuadPart);
 }
 
-Uint64
-SDL_GetPerformanceCounter(void)
+Uint64 SDL_GetPerformanceCounter(void)
 {
     LARGE_INTEGER counter;
     const BOOL rc = QueryPerformanceCounter(&counter);
@@ -130,8 +128,7 @@ SDL_GetPerformanceCounter(void)
     return (Uint64)counter.QuadPart;
 }
 
-Uint64
-SDL_GetPerformanceFrequency(void)
+Uint64 SDL_GetPerformanceFrequency(void)
 {
     LARGE_INTEGER frequency;
     const BOOL rc = QueryPerformanceFrequency(&frequency);
diff --git a/src/video/SDL_blit_0.c b/src/video/SDL_blit_0.c
index 358909fd3..9b303c4d9 100644
--- a/src/video/SDL_blit_0.c
+++ b/src/video/SDL_blit_0.c
@@ -507,8 +507,7 @@ static void Blit4bto4Key(SDL_BlitInfo *info)
     }
 }
 
-SDL_BlitFunc
-SDL_CalculateBlit0(SDL_Surface *surface)
+SDL_BlitFunc SDL_CalculateBlit0(SDL_Surface *surface)
 {
     int which;
 
diff --git a/src/video/SDL_blit_1.c b/src/video/SDL_blit_1.c
index f7c5b8099..a616067e3 100644
--- a/src/video/SDL_blit_1.c
+++ b/src/video/SDL_blit_1.c
@@ -514,8 +514,7 @@ static const SDL_BlitFunc one_blitkey[] = {
     (SDL_BlitFunc)NULL, Blit1to1Key, Blit1to2Key, Blit1to3Key, Blit1to4Key
 };
 
-SDL_BlitFunc
-SDL_CalculateBlit1(SDL_Surface *surface)
+SDL_BlitFunc SDL_CalculateBlit1(SDL_Surface *surface)
 {
     int which;
     SDL_PixelFormat *dstfmt;
diff --git a/src/video/SDL_blit_A.c b/src/video/SDL_blit_A.c
index eae1706b8..316f3f369 100644
--- a/src/video/SDL_blit_A.c
+++ b/src/video/SDL_blit_A.c
@@ -1417,8 +1417,7 @@ static void BlitNtoNPixelAlpha(SDL_BlitInfo *info)
     }
 }
 
-SDL_BlitFunc
-SDL_CalculateBlitA(SDL_Surface *surface)
+SDL_BlitFunc SDL_CalculateBlitA(SDL_Surface *surface)
 {
     SDL_PixelFormat *sf = surface->format;
     SDL_PixelFormat *df = surface->map->dst->format;
diff --git a/src/video/SDL_blit_N.c b/src/video/SDL_blit_N.c
index fafb0e36d..7c0b0106d 100644
--- a/src/video/SDL_blit_N.c
+++ b/src/video/SDL_blit_N.c
@@ -54,8 +54,7 @@ enum blit_features
 #endif
 #ifdef __MACOSX__
 #include <sys/sysctl.h>
-static size_t
-GetL3CacheSize(void)
+static size_t GetL3CacheSize(void)
 {
     const char key[] = "hw.l3cachesize";
     u_int64_t result = 0;
@@ -69,8 +68,7 @@ GetL3CacheSize(void)
     return result;
 }
 #else
-static size_t
-GetL3CacheSize(void)
+static size_t GetL3CacheSize(void)
 {
     /* XXX: Just guess G4 */
     return 2097152;
@@ -3344,8 +3342,7 @@ static const struct blit_table *const normal_blit[] = {
 /* Mask matches table, or table entry is zero */
 #define MASKOK(x, y) (((x) == (y)) || ((y) == 0x00000000))
 
-SDL_BlitFunc
-SDL_CalculateBlitN(SDL_Surface *surface)
+SDL_BlitFunc SDL_CalculateBlitN(SDL_Surface *surface)
 {
     SDL_PixelFormat *srcfmt;
     SDL_PixelFormat *dstfmt;
diff --git a/src/video/SDL_bmp.c b/src/video/SDL_bmp.c
index 244cc7960..82147a583 100644
--- a/src/video/SDL_bmp.c
+++ b/src/video/SDL_bmp.c
@@ -195,8 +195,7 @@ static void CorrectAlphaChannel(SDL_Surface *surface)
     }
 }
 
-SDL_Surface *
-SDL_LoadBMP_RW(SDL_RWops *src, int freesrc)
+SDL_Surface *SDL_LoadBMP_RW(SDL_RWops *src, int freesrc)
 {
     SDL_bool was_error;
     Sint64 fp_offset = 0;
diff --git a/src/video/SDL_clipboard.c b/src/video/SDL_clipboard.c
index 6e6ac0d45..e18668cea 100644
--- a/src/video/SDL_clipboard.c
+++ b/src/video/SDL_clipboard.c
@@ -63,8 +63,7 @@ int SDL_SetPrimarySelectionText(const char *text)
     }
 }
 
-char *
-SDL_GetClipboardText(void)
+char *SDL_GetClipboardText(void)
 {
     SDL_VideoDevice *_this = SDL_GetVideoDevice();
 
@@ -84,8 +83,7 @@ SDL_GetClipboardText(void)
     }
 }
 
-char *
-SDL_GetPrimarySelectionText(void)
+char *SDL_GetPrimarySelectionText(void)
 {
     SDL_VideoDevice *_this = SDL_GetVideoDevice();
 
@@ -105,8 +103,7 @@ SDL_GetPrimarySelectionText(void)
     }
 }
 
-SDL_bool
-SDL_HasClipboardText(void)
+SDL_bool SDL_HasClipboardText(void)
 {
     SDL_VideoDevice *_this = SDL_GetVideoDevice();
 
@@ -126,8 +123,7 @@ SDL_HasClipboardText(void)
     }
 }
 
-SDL_bool
-SDL_HasPrimarySelectionText(void)
+SDL_bool SDL_HasPrimarySelectionText(void)
 {
     SDL_VideoDevice *_this = SDL_GetVideoDevice();
 
diff --git a/src/video/SDL_egl.c b/src/video/SDL_egl.c
index 6e6ae491e..8e5f165b5 100644
--- a/src/video/SDL_egl.c
+++ b/src/video/SDL_egl.c
@@ -242,8 +242,7 @@ SDL_bool SDL_EGL_HasExtension(_THIS, SDL_EGL_ExtensionType type, const char *ext
     return SDL_FALSE;
 }
 
-void *
-SDL_EGL_GetProcAddress(_THIS, const char *proc)
+void *SDL_EGL_GetProcAddress(_THIS, const char *proc)
 {
     void *retval = NULL;
     if (_this->egl_data != NULL) {
@@ -934,8 +933,7 @@ int SDL_EGL_ChooseConfig(_THIS)
     return SDL_EGL_SetError("Couldn't find matching EGL config", "eglChooseConfig");
 }
 
-SDL_GLContext
-SDL_EGL_CreateContext(_THIS, EGLSurface egl_surface)
+SDL_GLContext SDL_EGL_CreateContext(_THIS, EGLSurface egl_surface)
 {
     /* max 14 values plus terminator. */
     EGLint attribs[15];
@@ -1179,8 +1177,7 @@ void SDL_EGL_DeleteContext(_THIS, SDL_GLContext context)
     }
 }
 
-EGLSurface *
-SDL_EGL_CreateSurface(_THIS, NativeWindowType nw)
+EGLSurface *SDL_EGL_CreateSurface(_THIS, NativeWindowType nw)
 {
 #if SDL_VIDEO_DRIVER_ANDROID
     EGLint format_wanted;
diff --git a/src/video/SDL_pixels.c b/src/video/SDL_pixels.c
index 6b48f7267..81892e7a0 100644
--- a/src/video/SDL_pixels.c
+++ b/src/video/SDL_pixels.c
@@ -85,8 +85,7 @@ Uint8 *SDL_expand_byte[9] = {
 #define CASE(X) \
     case X:     \
         return #X;
-const char *
-SDL_GetPixelFormatName(Uint32 format)
+const char *SDL_GetPixelFormatName(Uint32 format)
 {
     switch (format) {
 
@@ -136,9 +135,8 @@ SDL_GetPixelFormatName(Uint32 format)
 }
 #undef CASE
 
-SDL_bool
-SDL_PixelFormatEnumToMasks(Uint32 format, int *bpp, Uint32 *Rmask,
-                           Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask)
+SDL_bool SDL_PixelFormatEnumToMasks(Uint32 format, int *bpp, Uint32 *Rmask,
+                                    Uint32 *Gmask, Uint32 *Bmask, Uint32 *Amask)
 {
     Uint32 masks[4];
 
@@ -295,9 +293,7 @@ SDL_PixelFormatEnumToMasks(Uint32 format, int *bpp, Uint32 *Rmask,
     return SDL_TRUE;
 }
 
-Uint32
-SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask,
-                           Uint32 Amask)
+Uint32 SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)
 {
     switch (bpp) {
     case 1:
@@ -505,8 +501,7 @@ SDL_MasksToPixelFormatEnum(int bpp, Uint32 Rmask, Uint32 Gmask, Uint32 Bmask,
 static SDL_PixelFormat *formats;
 static SDL_SpinLock formats_lock = 0;
 
-SDL_PixelFormat *
-SDL_AllocFormat(Uint32 pixel_format)
+SDL_PixelFormat *SDL_AllocFormat(Uint32 pixel_format)
 {
     SDL_PixelFormat *format;
 
@@ -653,8 +648,7 @@ void SDL_FreeFormat(SDL_PixelFormat *format)
     SDL_free(format);
 }
 
-SDL_Palette *
-SDL_AllocPalette(int ncolors)
+SDL_Palette *SDL_AllocPalette(int ncolors)
 {
     SDL_Palette *palette;
 
@@ -856,8 +850,7 @@ void SDL_DetectPalette(SDL_Palette *pal, SDL_bool *is_opaque, SDL_bool *has_alph
 }
 
 /* Find the opaque pixel value corresponding to an RGB triple */
-Uint32
-SDL_MapRGB(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b)
+Uint32 SDL_MapRGB(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b)
 {
     if (format->palette == NULL) {
         return (r >> format->Rloss) << format->Rshift | (g >> format->Gloss) << format->Gshift | (b >> format->Bloss) << format->Bshift | format->Amask;
@@ -867,9 +860,7 @@ SDL_MapRGB(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b)
 }
 
 /* Find the pixel value corresponding to an RGBA quadruple */
-Uint32
-SDL_MapRGBA(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b,
-            Uint8 a)
+Uint32 SDL_MapRGBA(const SDL_PixelFormat *format, Uint8 r, Uint8 g, Uint8 b, Uint8 a)
 {
     if (format->palette == NULL) {
         return (r >> format->Rloss) << format->Rshift | (g >> format->Gloss) << format->Gshift | (b >> format->Bloss) << format->Bshift | ((Uint32)(a >> format->Aloss) << format->Ashift & format->Amask);
@@ -997,8 +988,7 @@ static Uint8 *MapNto1(SDL_PixelFormat *src, SDL_PixelFormat *dst, int *identical
     return Map1to1(&dithered, pal, identical);
 }
 
-SDL_BlitMap *
-SDL_AllocBlitMap(void)
+SDL_BlitMap *SDL_AllocBlitMap(void)
 {
     SDL_BlitMap *map;
 
@@ -1137,8 +1127,7 @@ void SDL_FreeBlitMap(SDL_BlitMap *map)
     }
 }
 
-void
-SDL_CalculateGammaRamp(float gamma, Uint16 * ramp)
+void SDL_CalculateGammaRamp(float gamma, Uint16 * ramp)
 {
     int i;
 
diff --git a/src/video/SDL_rect.c b/src/video/SDL_rect.c
index 02596529f..1b461d230 100644
--- a/src/video/SDL_rect.c
+++ b/src/video/SDL_rect.c
@@ -25,8 +25,7 @@
 
 /* There's no float version of this at the moment, because it's not a public API
    and internally we only need the int version. */
-SDL_bool
-SDL_GetSpanEnclosingRect(int width, int height,
+SDL_bool SDL_GetSpanEnclosingRect(int width, int height,
                          int numrects, const SDL_Rect *rects, SDL_Rect *span)
 {
     int i;
diff --git a/src/video/SDL_rect_impl.h b/src/video/SDL_rect_impl.h
index a3e6d160e..b0e3901b1 100644
--- a/src/video/SDL_rect_impl.h
+++ b/src/video/SDL_rect_impl.h
@@ -21,8 +21,7 @@
 
 /* This file is #included twice to support int and float versions with the same code. */
 
-SDL_bool
-SDL_HASINTERSECTION(const RECTTYPE *A, const RECTTYPE *B)
+SDL_bool SDL_HASINTERSECTION(const RECTTYPE *A, const RECTTYPE *B)
 {
     SCALARTYPE Amin, Amax, Bmin, Bmax;
 
@@ -67,8 +66,7 @@ SDL_HASINTERSECTION(const RECTTYPE *A, const RECTTYPE *B)
     return SDL_TRUE;
 }
 
-SDL_bool
-SDL_INTERSECTRECT(const RECTTYPE *A, const RECTTYPE *B, RECTTYPE *result)
+SDL_bool SDL_INTERSECTRECT(const RECTTYPE *A, const RECTTYPE *B, RECTTYPE *result)
 {
     SCALARTYPE Amin, Amax, Bmin, Bmax;
 
@@ -289,9 +287,7 @@ static int COMPUTEOUTCODE(const RECTTYPE *rect, SCALARTYPE x, SCALARTYPE y)
     return code;
 }
 
-SDL_bool
-SDL_INTERSECTRECTANDLINE(const RECTTYPE *rect, SCALARTYPE *X1, SCALARTYPE *Y1, SCALARTYPE *X2,
-                         SCALARTYPE *Y2)
+SDL_bool SDL_INTERSECTRECTANDLINE(const RECTTYPE *rect, SCALARTYPE *X1, SCALARTYPE *Y1, SCALARTYPE *X2, SCALARTYPE *Y2)
 {
     SCALARTYPE x = 0;
     SCALARTYPE y = 0;
diff --git a/src/video/SDL_shape.c b/src/video/SDL_shape.c
index 509f029a5..a0b977b6e 100644
--- a/src/video/SDL_shape.c
+++ b/src/video/SDL_shape.c
@@ -28,8 +28,7 @@
 #include "SDL_shape.h"
 #include "SDL_shape_internals.h"
 
-SDL_Window *
-SDL_CreateShapedWindow(const char *title, unsigned int x, unsigned int y, unsigned int w, unsigned int h, Uint32 flags)
+SDL_Window *SDL_CreateShapedWindow(const char *title, unsigned int x, unsigned int y, unsigned int w, unsigned int h, Uint32 flags)
 {
     SDL_Window *result = NULL;
     result = SDL_CreateWindow(title, -1000, -1000, w, h, (flags | SDL_WINDOW_BORDERLESS) & (~SDL_WINDOW_FULLSCREEN) & (~SDL_WINDOW_RESIZABLE) /* & (~SDL_WINDOW_SHOWN) */);
@@ -54,8 +53,7 @@ SDL_CreateShapedWindow(const char *title, unsigned int x, unsigned int y, unsign
     return NULL;
 }
 
-SDL_bool
-SDL_IsShapedWindow(const SDL_Window *window)
+SDL_bool SDL_IsShapedWindow(const SDL_Window *window)
 {
     if (window == NULL) {
         return SDL_FALSE;
@@ -217,8 +215,7 @@ static SDL_ShapeTree *RecursivelyCalculateShapeTree(SDL_WindowShapeMode mode, SD
     return result;
 }
 
-SDL_ShapeTree *
-SDL_CalculateShapeTree(SDL_WindowShapeMode mode, SDL_Surface *shape)
+SDL_ShapeTree *SDL_CalculateShapeTree(SDL_WindowShapeMode mode, SDL_Surface *shape)
 {
     SDL_Rect dimensions;
     SDL_ShapeTree *result = NULL;
diff --git a/src/video/SDL_stretch.c b/src/video/SDL_stretch.c
index da46bb2e6..ec2bed5cc 100644
--- a/src/video/SDL_stretch.c
+++ b/src/video/SDL_stretch.c
@@ -193,8 +193,7 @@ static int SDL_UpperSoftStretch(SDL_Surface *src, const SDL_Rect *srcrect,
 // OK with clang 12.0.0 / Xcode
 __attribute__((noinline))
 #endif
-static void
-get_scaler_datas(int src_nb, int dst_nb, int *fp_start, int *fp_step, int *left_pad, int *right_pad)
+static void get_scaler_datas(int src_nb, int dst_nb, int *fp_start, int *fp_step, int *left_pad, int *right_pad)
 {
 
     int step = FIXED_POINT(src_nb) / (dst_nb); /* source step in fixed point */
@@ -575,8 +574,7 @@ static SDL_INLINE void INTERPOL_BILINEAR_NEON(const Uint32 *s0, const Uint32 *s1
     *dst = vget_lane_u32(CAST_uint32x2_t e0, 0);
 }
 
-static int
-scale_mat_NEON(const Uint32 *src, int src_w, int src_h, int src_pitch, Uint32 *dst, int dst_w, int dst_h, int dst_pitch)
+static int scale_mat_NEON(const Uint32 *src, int src_w, int src_h, int src_pitch, Uint32 *dst, int dst_w, int dst_h, int dst_pitch)
 {
     BILINEAR___START
 
diff --git a/src/video/SDL_surface.c b/src/video/SDL_surface.c
index a3d2dd3ee..a81ff7bd5 100644
--- a/src/video/SDL_surface.c
+++ b/src/video/SDL_surface.c
@@ -42,8 +42,7 @@ SDL_COMPILE_TIME_ASSERT(can_indicate_overflow, SDL_SIZE_MAX > SDL_MAX_SINT32);
  *
  * for FOURCC, use SDL_CalculateYUVSize()
  */
-static size_t
-SDL_CalculatePitch(Uint32 format, size_t width, SDL_bool minimal)
+static size_t SDL_CalculatePitch(Uint32 format, size_t width, SDL_bool minimal)
 {
     size_t pitch;
 
@@ -75,8 +74,7 @@ SDL_CalculatePitch(Uint32 format, size_t width, SDL_bool minimal)
  * Create an empty RGB surface of the appropriate depth using the given
  * enum SDL_PIXELFORMAT_* format
  */
-SDL_Surface *
-SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth,
+SDL_Surface *SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth,
                                Uint32 format)
 {
     size_t pitch;
@@ -187,8 +185,7 @@ SDL_CreateRGBSurfaceWithFormat(Uint32 flags, int width, int height, int depth,
 /*
  * Create an empty RGB surface of the appropriate depth
  */
-SDL_Surface *
-SDL_CreateRGBSurface(Uint32 flags,
+SDL_Surface *SDL_CreateRGBSurface(Uint32 flags,
                      int width, int height, int depth,
                      Uint32 Rmask, Uint32 Gmask, Uint32 Bmask, Uint32 Amask)
 {
@@ -207,8 +204,7 @@ SDL_CreateRGBSurface(Uint32 flags,
 /*
  * Create an RGB surface from an existing memory buffer
  */
-SDL_Surface *
-SDL_CreateRGBSurfaceFrom(void *pixels,
+SDL_Surface *SDL_CreateRGBSurfaceFrom(void *pixels,
                          int width, int height, int depth, int pitch,
                          Uint32 Rmask, Uint32 Gmask, Uint32 Bmask,
                          Uint32 Amask)
@@ -258,8 +254,7 @@ SDL_CreateRGBSurfaceFrom(void *pixels,
  * Create an RGB surface from an existing memory buffer using the given given
  * enum SDL_PIXELFORMAT_* format
  */
-SDL_Surface *
-SDL_CreateRGBSurfaceWithFormatFrom(void *pixels,
+SDL_Surface *SDL_CreateRGBSurfaceWithFormatFrom(void *pixels,
                          int width, int height, int depth, int pitch,
                          Uint32 format)
 {
@@ -333,8 +328,7 @@ int SDL_SetSurfaceRLE(SDL_Surface *surface, int flag)
     return 0;
 }
 
-SDL_bool
-SDL_HasSurfaceRLE(SDL_Surface *surface)
+SDL_bool SDL_HasSurfaceRLE(SDL_Surface *surface)
 {
     if (surface == NULL) {
         return SDL_FALSE;
@@ -377,8 +371,7 @@ int SDL_SetColorKey(SDL_Surface *surface, int flag, Uint32 key)
     return 0;
 }
 
-SDL_bool
-SDL_HasColorKey(SDL_Surface *surface)
+SDL_bool SDL_HasColorKey(SDL_Surface *surface)
 {
     if (surface == NULL) {
         return SDL_FALSE;
@@ -643,8 +636,7 @@ int SDL_GetSurfaceBlendMode(SDL_Surface *surface, SDL_BlendMode *blendMode)
     return 0;
 }
 
-SDL_bool
-SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect)
+SDL_bool SDL_SetClipRect(SDL_Surface *surface, const SDL_Rect *rect)
 {
     SDL_Rect full_rect;
 
@@ -1132,8 +1124,7 @@ void SDL_UnlockSurface(SDL_Surface *surface)
 /*
  * Creates a new surface identical to the existing surface
  */
-SDL_Surface *
-SDL_DuplicateSurface(SDL_Surface *surface)
+SDL_Surface *SDL_DuplicateSurface(SDL_Surface *surface)
 {
     return SDL_ConvertSurface(surface, surface->format, surface->flags);
 }
@@ -1141,8 +1132,7 @@ SDL_DuplicateSurface(SDL_Surface *surface)
 /*
  * Convert a surface into the specified pixel format.
  */
-SDL_Surface *
-SDL_ConvertSurface(SDL_Surface * surface, const SDL_PixelFormat * format,
+SDL_Surface *SDL_ConvertSurface(SDL_Surface * surface, const SDL_PixelFormat * format,
                    Uint32 flags)
 {
     SDL_Surface *convert;
@@ -1373,8 +1363,7 @@ SDL_ConvertSurface(SDL_Surface * surface, const SDL_PixelFormat * format,
     return convert;
 }
 
-SDL_Surface *
-SDL_ConvertSurfaceFormat(SDL_Surface * surface, Uint32 pixel_format,
+SDL_Surface *SDL_ConvertSurfaceFormat(SDL_Surface * surface, Uint32 pixel_format,
                          Uint32 flags)
 {
     SDL_PixelFormat *fmt;
diff --git a/src/video/SDL_video.c b/src/video/SDL_video.c
index 455d05845..73a4d2c0d 100644
--- a/src/video/SDL_video.c
+++ b/src/video/SDL_video.c
@@ -409,8 +409,7 @@ int SDL_GetNumVideoDrivers(void)
     return SDL_arraysize(bootstrap) - 1;
 }
 
-const char *
-SDL_GetVideoDriver(int index)
+const char *SDL_GetVideoDriver(int index)
 {
     if (index >= 0 && index < SDL_GetNumVideoDrivers()) {
         return bootstrap[index]->name;
@@ -564,8 +563,7 @@ pre_driver_error:
     return -1;
 }
 
-const char *
-SDL_GetCurrentVideoDriver()
+const char *SDL_GetCurrentVideoDriver()
 {
     if (_this == NULL) {
         SDL_UninitializedVideo();
@@ -574,14 +572,12 @@ SDL_GetCurrentVideoDriver()
     return _this->name;
 }
 
-SDL_VideoDevice *
-SDL_GetVideoDevice(void)
+SDL_VideoDevice *SDL_GetVideoDevice(void)
 {
     return _this;
 }
 
-SDL_bool
-SDL_OnVideoThread()
+SDL_bool SDL_OnVideoThread()
 {
     return (_this && SDL_ThreadID() == _this->thread) ? SDL_TRUE : SDL_FALSE;
 }
@@ -669,22 +665,19 @@ int SDL_GetIndexOfDisplay(SDL_VideoDisplay *display)
     return 0;
 }
 
-void *
-SDL_GetDisplayDriverData(int displayIndex)
+void *SDL_GetDisplayDriverData(int displayIndex)
 {
     CHECK_DISPLAY_INDEX(displayIndex, NULL);
 
     return _this->displays[displayIndex].driverdata;
 }
 
-SDL_bool
-SDL_IsVideoContextExternal(void)
+SDL_bool SDL_IsVideoContextExternal(void)
 {
     return SDL_GetHintBoolean(SDL_HINT_VIDEO_EXTERNAL_CONTEXT, SDL_FALSE);
 }
 
-const char *
-SDL_GetDisplayName(int displayIndex)
+const char *SDL_GetDisplayName(int displayIndex)
 {
     CHECK_DISPLAY_INDEX(displayIndex, NULL);
 
@@ -773,8 +766,7 @@ int SDL_GetDisplayDPI(int displayIndex, float *ddpi, float *hdpi, float *vdpi)
     return -1;
 }
 
-SDL_DisplayOrientation
-SDL_GetDisplayOrientation(int displayIndex)
+SDL_DisplayOrientation SDL_GetDisplayOrientation(int displayIndex)
 {
     SDL_VideoDisplay *display;
 
@@ -784,8 +776,7 @@ SDL_GetDisplayOrientation(int displayIndex)
     return display->orientation;
 }
 
-SDL_bool
-SDL_AddDisplayMode(SDL_VideoDisplay *display, const SDL_DisplayMode *mode)
+SDL_bool SDL_AddDisplayMode(SDL_VideoDisplay *display, const SDL_DisplayMode *mode)
 {
     SDL_DisplayMode *modes;
     int i, nmodes;
@@ -1013,8 +1004,7 @@ static SDL_DisplayMode *SDL_GetClosestDisplayModeForDisplay(SDL_VideoDisplay *di
     return NULL;
 }
 
-SDL_DisplayMode *
-SDL_GetClosestDisplayMode(int displayIndex,
+SDL_DisplayMode *SDL_GetClosestDisplayMode(int displayIndex,
                           const SDL_DisplayMode *mode,
                           SDL_DisplayMode *closest)
 {
@@ -1082,8 +1072,7 @@ static int SDL_SetDisplayModeForDisplay(SDL_VideoDisplay *display, const SDL_Dis
     return 0;
 }
 
-SDL_VideoDisplay *
-SDL_GetDisplay(int displayIndex)
+SDL_VideoDisplay *SDL_GetDisplay(int displayIndex)
 {
     CHECK_DISPLAY_INDEX(displayIndex, NULL);
 
@@ -1227,8 +1216,7 @@ int SDL_GetWindowDisplayIndex(SDL_Window *window)
     }
 }
 
-SDL_VideoDisplay *
-SDL_GetDisplayForWindow(SDL_Window *window)
+SDL_VideoDisplay *SDL_GetDisplayForWindow(SDL_Window *window)
 {
     int displayIndex = SDL_GetWindowDisplayIndex(window);
     if (displayIndex >= 0) {
@@ -1302,8 +1290,7 @@ int SDL_GetWindowDisplayMode(SDL_Window *window, SDL_DisplayMode *mode)
     return 0;
 }
 
-void *
-SDL_GetWindowICCProfile(SDL_Window *window, size_t *size)
+void *SDL_GetWindowICCProfile(SDL_Window *window, size_t *size)
 {
     if (!_this->GetWindowICCProfile) {
         SDL_Unsupported();
@@ -1312,8 +1299,7 @@ SDL_GetWindowICCProfile(SDL_Window *window, size_t *size)
     return _this->GetWindowICCProfile(_this, window, size);
 }
 
-Uint32
-SDL_GetWindowPixelFormat(SDL_Window *window)
+Uint32 SDL_GetWindowPixelFormat(SDL_Window *window)
 {
     SDL_VideoDisplay *display;
 
@@ -1589,8 +1575,7 @@ static int SDL_DllNotSupported(const char *name)
     return SDL_SetError("No dynamic %s support in current SDL video driver (%s)", name, _this->name);
 }
 
-SDL_Window *
-SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags)
+SDL_Window *SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags)
 {
     SDL_Window *window;
     Uint32 type_flags, graphics_flags;
@@ -1791,8 +1776,7 @@ SDL_CreateWindow(const char *title, int x, int y, int w, int h, Uint32 flags)
     return window;
 }
 
-SDL_Window *
-SDL_CreateWindowFrom(const void *data)
+SDL_Window *SDL_CreateWindowFrom(const void *data)
 {
     SDL_Window *window;
     Uint32 flags = SDL_WINDOW_FOREIGN;
@@ -2000,22 +1984,19 @@ int SDL_RecreateWindow(SDL_Window *window, Uint32 flags)
     return 0;
 }
 
-SDL_bool
-SDL_HasWindows(void)
+SDL_bool SDL_HasWindows(void)
 {
     return _this && _this->windows != NULL;
 }
 
-Uint32
-SDL_GetWindowID(SDL_Window *window)
+Uint32 SDL_GetWindowID(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, 0);
 
     return window->id;
 }
 
-SDL_Window *
-SDL_GetWindowFromID(Uint32 id)
+SDL_Window *SDL_GetWindowFromID(Uint32 id)
 {
     SDL_Window *window;
 
@@ -2030,8 +2011,7 @@ SDL_GetWindowFromID(Uint32 id)
     return NULL;
 }
 
-Uint32
-SDL_GetWindowFlags(SDL_Window *window)
+Uint32 SDL_GetWindowFlags(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, 0);
 
@@ -2054,8 +2034,7 @@ void SDL_SetWindowTitle(SDL_Window *window, const char *title)
     }
 }
 
-const char *
-SDL_GetWindowTitle(SDL_Window *window)
+const char *SDL_GetWindowTitle(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, "");
 
@@ -2083,8 +2062,7 @@ void SDL_SetWindowIcon(SDL_Window *window, SDL_Surface *icon)
     }
 }
 
-void *
-SDL_SetWindowData(SDL_Window *window, const char *name, void *userdata)
+void *SDL_SetWindowData(SDL_Window *window, const char *name, void *userdata)
 {
     SDL_WindowUserData *prev, *data;
 
@@ -2130,8 +2108,7 @@ SDL_SetWindowData(SDL_Window *window, const char *name, void *userdata)
     return NULL;
 }
 
-void *
-SDL_GetWindowData(SDL_Window *window, const char *name)
+void *SDL_GetWindowData(SDL_Window *window, const char *name)
 {
     SDL_WindowUserData *data;
 
@@ -2693,8 +2670,7 @@ static SDL_Surface *SDL_CreateWindowFramebuffer(SDL_Window *window)
     return SDL_CreateRGBSurfaceFrom(pixels, window->w, window->h, bpp, pitch, Rmask, Gmask, Bmask, Amask);
 }
 
-SDL_Surface *
-SDL_GetWindowSurface(SDL_Window *window)
+SDL_Surface *SDL_GetWindowSurface(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, NULL);
 
@@ -2740,8 +2716,7 @@ int SDL_UpdateWindowSurfaceRects(SDL_Window *window, const SDL_Rect *rects,
     return _this->UpdateWindowFramebuffer(_this, window, rects, numrects);
 }
 
-int
-SDL_SetWindowBrightness(SDL_Window * window, float brightness)
+int SDL_SetWindowBrightness(SDL_Window * window, float brightness)
 {
     Uint16 ramp[256];
     int status;
@@ -2756,16 +2731,14 @@ SDL_SetWindowBrightness(SDL_Window * window, float brightness)
     return status;
 }
 
-float
-SDL_GetWindowBrightness(SDL_Window * window)
+float SDL_GetWindowBrightness(SDL_Window * window)
 {
     CHECK_WINDOW_MAGIC(window, 1.0f);
 
     return window->brightness;
 }
 
-int
-SDL_SetWindowOpacity(SDL_Window * window, float opacity)
+int SDL_SetWindowOpacity(SDL_Window * window, float opacity)
 {
     int retval;
     CHECK_WINDOW_MAGIC(window, -1);
@@ -2823,8 +2796,7 @@ int SDL_SetWindowInputFocus(SDL_Window *window)
 }
 
 
-int
-SDL_SetWindowGammaRamp(SDL_Window * window, const Uint16 * red,
+int SDL_SetWindowGammaRamp(SDL_Window * window, const Uint16 * red,
                                             const Uint16 * green,
                                             const Uint16 * blue)
 {
@@ -2857,8 +2829,7 @@ SDL_SetWindowGammaRamp(SDL_Window * window, const Uint16 * red,
     }
 }
 
-int
-SDL_GetWindowGammaRamp(SDL_Window * window, Uint16 * red,
+int SDL_GetWindowGammaRamp(SDL_Window * window, Uint16 * red,
                                             Uint16 * green,
                                             Uint16 * blue)
 {
@@ -2902,8 +2873,7 @@ SDL_GetWindowGammaRamp(SDL_Window * window, Uint16 * red,
     return 0;
 }
 
-void
-SDL_UpdateWindowGrab(SDL_Window * window)
+void SDL_UpdateWindowGrab(SDL_Window * window)
 {
     SDL_bool keyboard_grabbed, mouse_grabbed;
 
@@ -2989,28 +2959,24 @@ void SDL_SetWindowMouseGrab(SDL_Window *window, SDL_bool grabbed)
     SDL_UpdateWindowGrab(window);
 }
 
-SDL_bool
-SDL_GetWindowGrab(SDL_Window *window)
+SDL_bool SDL_GetWindowGrab(SDL_Window *window)
 {
     return SDL_GetWindowKeyboardGrab(window) || SDL_GetWindowMouseGrab(window);
 }
 
-SDL_bool
-SDL_GetWindowKeyboardGrab(SDL_Window *window)
+SDL_bool SDL_GetWindowKeyboardGrab(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, SDL_FALSE);
     return window == _this->grabbed_window && (_this->grabbed_window->flags & SDL_WINDOW_KEYBOARD_GRABBED);
 }
 
-SDL_bool
-SDL_GetWindowMouseGrab(SDL_Window *window)
+SDL_bool SDL_GetWindowMouseGrab(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, SDL_FALSE);
     return window == _this->grabbed_window && (_this->grabbed_window->flags & SDL_WINDOW_MOUSE_GRABBED);
 }
 
-SDL_Window *
-SDL_GetGrabbedWindow(void)
+SDL_Window *SDL_GetGrabbedWindow(void)
 {
     if (_this->grabbed_window &&
         (_this->grabbed_window->flags & (SDL_WINDOW_MOUSE_GRABBED | SDL_WINDOW_KEYBOARD_GRABBED))) {
@@ -3036,8 +3002,7 @@ int SDL_SetWindowMouseRect(SDL_Window *window, const SDL_Rect *rect)
     return 0;
 }
 
-const SDL_Rect *
-SDL_GetWindowMouseRect(SDL_Window *window)
+const SDL_Rect *SDL_GetWindowMouseRect(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, NULL);
 
@@ -3198,8 +3163,7 @@ void SDL_OnWindowFocusLost(SDL_Window *window)
 
 /* !!! FIXME: is this different than SDL_GetKeyboardFocus()?
    !!! FIXME:  Also, SDL_GetKeyboardFocus() is O(1), this isn't. */
-SDL_Window *
-SDL_GetFocusWindow(void)
+SDL_Window *SDL_GetFocusWindow(void)
 {
     SDL_Window *window;
 
@@ -3308,8 +3272,7 @@ void SDL_DestroyWindow(SDL_Window *window)
     SDL_free(window);
 }
 
-SDL_bool
-SDL_IsScreenSaverEnabled()
+SDL_bool SDL_IsScreenSaverEnabled()
 {
     if (_this == NULL) {
         return SDL_TRUE;
@@ -3417,8 +3380,7 @@ int SDL_GL_LoadLibrary(const char *path)
     return retval;
 }
 
-void *
-SDL_GL_GetProcAddress(const char *proc)
+void *SDL_GL_GetProcAddress(const char *proc)
 {
     void *func;
 
@@ -3439,8 +3401,7 @@ SDL_GL_GetProcAddress(const char *proc)
     return func;
 }
 
-void
-SDL_GL_UnloadLibrary(void)
+void SDL_GL_UnloadLibrary(void)
 {
     if (_this == NULL) {
         SDL_UninitializedVideo();
@@ -3463,8 +3424,7 @@ static SDL_INLINE SDL_bool isAtLeastGL3(const char *verstr)
 }
 #endif
 
-SDL_bool
-SDL_GL_ExtensionSupported(const char *extension)
+SDL_bool SDL_GL_ExtensionSupported(const char *extension)
 {
 #if SDL_VIDEO_OPENGL || SDL_VIDEO_OPENGL_ES || SDL_VIDEO_OPENGL_ES2
     const GLubyte *(APIENTRY * glGetStringFunc)(GLenum);
@@ -3580,8 +3540,7 @@ void SDL_GL_DeduceMaxSupportedESProfile(int *major, int *minor)
 #endif
 }
 
-void
-SDL_GL_ResetAttributes()
+void SDL_GL_ResetAttributes()
 {
     if (_this == NULL) {
         return;
@@ -4020,8 +3979,7 @@ int SDL_GL_GetAttribute(SDL_GLattr attr, int *value)
 
 #define NOT_AN_OPENGL_WINDOW "The specified window isn't an OpenGL window"
 
-SDL_GLContext
-SDL_GL_CreateContext(SDL_Window *window)
+SDL_GLContext SDL_GL_CreateContext(SDL_Window *window)
 {
     SDL_GLContext ctx = NULL;
     CHECK_WINDOW_MAGIC(window, NULL);
@@ -4079,8 +4037,7 @@ int SDL_GL_MakeCurrent(SDL_Window *window, SDL_GLContext context)
     return retval;
 }
 
-SDL_Window *
-SDL_GL_GetCurrentWindow(void)
+SDL_Window *SDL_GL_GetCurrentWindow(void)
 {
     if (_this == NULL) {
         SDL_UninitializedVideo();
@@ -4089,8 +4046,7 @@ SDL_GL_GetCurrentWindow(void)
     return (SDL_Window *)SDL_TLSGet(_this->current_glwin_tls);
 }
 
-SDL_GLContext
-SDL_GL_GetCurrentContext(void)
+SDL_GLContext SDL_GL_GetCurrentContext(void)
 {
     if (_this == NULL) {
         SDL_UninitializedVideo();
@@ -4238,8 +4194,7 @@ static void CreateMaskFromColorKeyOrAlpha(SDL_Surface * icon, Uint8 * mask, int
 /*
  * Sets the window manager icon for the display window.
  */
-void
-SDL_WM_SetIcon(SDL_Surface * icon, Uint8 * mask)
+void SDL_WM_SetIcon(SDL_Surface * icon, Uint8 * mask)
 {
     if (icon && _this->SetIcon) {
         /* Generate a mask if necessary, and create the icon! */
@@ -4267,8 +4222,7 @@ SDL_WM_SetIcon(SDL_Surface * icon, Uint8 * mask)
 }
 #endif
 
-SDL_bool
-SDL_GetWindowWMInfo(SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool SDL_GetWindowWMInfo(SDL_Window * window, struct SDL_SysWMinfo *info)
 {
     CHECK_WINDOW_MAGIC(window, SDL_FALSE);
 
@@ -4314,8 +4268,7 @@ void SDL_ClearComposition(void)
     }
 }
 
-SDL_bool
-SDL_IsTextInputShown(void)
+SDL_bool SDL_IsTextInputShown(void)
 {
     if (_this && _this->IsTextInputShown) {
         return _this->IsTextInputShown(_this);
@@ -4324,8 +4277,7 @@ SDL_IsTextInputShown(void)
     return SDL_FALSE;
 }
 
-SDL_bool
-SDL_IsTextInputActive(void)
+SDL_bool SDL_IsTextInputActive(void)
 {
     return SDL_GetEventState(SDL_TEXTINPUT) == SDL_ENABLE;
 }
@@ -4359,8 +4311,7 @@ void SDL_SetTextInputRect(const SDL_Rect *rect)
     }
 }
 
-SDL_bool
-SDL_HasScreenKeyboardSupport(void)
+SDL_bool SDL_HasScreenKeyboardSupport(void)
 {
     if (_this && _this->HasScreenKeyboardSupport) {
         return _this->HasScreenKeyboardSupport(_this);
@@ -4368,8 +4319,7 @@ SDL_HasScreenKeyboardSupport(void)
     return SDL_FALSE;
 }
 
-SDL_bool
-SDL_IsScreenKeyboardShown(SDL_Window *window)
+SDL_bool SDL_IsScreenKeyboardShown(SDL_Window *window)
 {
     if (window && _this && _this->IsScreenKeyboardShown) {
         return _this->IsScreenKeyboardShown(_this, window);
@@ -4614,8 +4564,7 @@ int SDL_ShowSimpleMessageBox(Uint32 flags, const char *title, const char *messag
 #endif
 }
 
-SDL_bool
-SDL_ShouldAllowTopmost(void)
+SDL_bool SDL_ShouldAllowTopmost(void)
 {
     return SDL_GetHintBoolean(SDL_HINT_ALLOW_TOPMOST, SDL_TRUE);
 }
@@ -4803,8 +4752,7 @@ void SDL_Vulkan_GetDrawableSize(SDL_Window *window, int *w, int *h)
     }
 }
 
-SDL_MetalView
-SDL_Metal_CreateView(SDL_Window *window)
+SDL_MetalView SDL_Metal_CreateView(SDL_Window *window)
 {
     CHECK_WINDOW_MAGIC(window, NULL);
 
@@ -4831,8 +4779,7 @@ void SDL_Metal_DestroyView(SDL_MetalView view)
     }
 }
 
-void *
-SDL_Metal_GetLayer(SDL_MetalView view)
+void *SDL_Metal_GetLayer(SDL_MetalView view)
 {
     if (_this && _this->Metal_GetLayer) {
         if (view) {
diff --git a/src/video/android/SDL_androidclipboard.c b/src/video/android/SDL_androidclipboard.c
index 54461adab..bd80a0100 100644
--- a/src/video/android/SDL_androidclipboard.c
+++ b/src/video/android/SDL_androidclipboard.c
@@ -31,8 +31,7 @@ int Android_SetClipboardText(_THIS, const char *text)
     return Android_JNI_SetClipboardText(text);
 }
 
-char *
-Android_GetClipboardText(_THIS)
+char *Android_GetClipboardText(_THIS)
 {
     return Android_JNI_GetClipboardText();
 }
diff --git a/src/video/android/SDL_androidgl.c b/src/video/android/SDL_androidgl.c
index 7dada1486..e54dbbed1 100644
--- a/src/video/android/SDL_androidgl.c
+++ b/src/video/android/SDL_androidgl.c
@@ -45,8 +45,7 @@ int Android_GLES_MakeCurrent(_THIS, SDL_Window *window, SDL_GLContext context)
     }
 }
 
-SDL_GLContext
-Android_GLES_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext Android_GLES_CreateContext(_THIS, SDL_Window *window)
 {
     SDL_GLContext ret;
 
diff --git a/src/video/android/SDL_androidkeyboard.c b/src/video/android/SDL_androidkeyboard.c
index 9c8698d5e..ba652019a 100644
--- a/src/video/android/SDL_androidkeyboard.c
+++ b/src/video/android/SDL_androidkeyboard.c
@@ -336,14 +336,12 @@ int Android_OnKeyUp(int keycode)
     return SDL_SendKeyboardKey(SDL_RELEASED, TranslateKeycode(keycode));
 }
 
-SDL_bool
-Android_HasScreenKeyboardSupport(_THIS)
+SDL_bool Android_HasScreenKeyboardSupport(_THIS)
 {
     return SDL_TRUE;
 }
 
-SDL_bool
-Android_IsScreenKeyboardShown(_THIS, SDL_Window *window)
+SDL_bool Android_IsScreenKeyboardShown(_THIS, SDL_Window *window)
 {
     return Android_JNI_IsScreenKeyboardShown();
 }
diff --git a/src/video/android/SDL_androidwindow.c b/src/video/android/SDL_androidwindow.c
index d9eaf5fa1..9b3573973 100644
--- a/src/video/android/SDL_androidwindow.c
+++ b/src/video/android/SDL_androidwindow.c
@@ -197,8 +197,7 @@ void Android_DestroyWindow(_THIS, SDL_Window *window)
     SDL_UnlockMutex(Android_ActivityMutex);
 }
 
-SDL_bool
-Android_GetWindowWMInfo(_THIS, SDL_Window *window, SDL_SysWMinfo *info)
+SDL_bool Android_GetWindowWMInfo(_THIS, SDL_Window *window, SDL_SysWMinfo *info)
 {
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
 
diff --git a/src/video/cocoa/SDL_cocoaclipboard.m b/src/video/cocoa/SDL_cocoaclipboard.m
index ca50bd780..c64f2e476 100644
--- a/src/video/cocoa/SDL_cocoaclipboard.m
+++ b/src/video/cocoa/SDL_cocoaclipboard.m
@@ -25,8 +25,7 @@
 #include "SDL_cocoavideo.h"
 #include "../../events/SDL_clipboardevents_c.h"
 
-int
-Cocoa_SetClipboardText(_THIS, const char *text)
+int Cocoa_SetClipboardText(_THIS, const char *text)
 { @autoreleasepool
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
@@ -44,8 +43,7 @@ Cocoa_SetClipboardText(_THIS, const char *text)
     return 0;
 }}
 
-char *
-Cocoa_GetClipboardText(_THIS)
+char *Cocoa_GetClipboardText(_THIS)
 { @autoreleasepool
 {
     NSPasteboard *pasteboard;
@@ -73,8 +71,7 @@ Cocoa_GetClipboardText(_THIS)
     return text;
 }}
 
-SDL_bool
-Cocoa_HasClipboardText(_THIS)
+SDL_bool Cocoa_HasClipboardText(_THIS)
 {
     SDL_bool result = SDL_FALSE;
     char *text = Cocoa_GetClipboardText(_this);
@@ -85,8 +82,7 @@ Cocoa_HasClipboardText(_THIS)
     return result;
 }
 
-void
-Cocoa_CheckClipboardUpdate(SDL_VideoData * data)
+void Cocoa_CheckClipboardUpdate(SDL_VideoData * data)
 { @autoreleasepool
 {
     NSPasteboard *pasteboard;
diff --git a/src/video/cocoa/SDL_cocoaevents.m b/src/video/cocoa/SDL_cocoaevents.m
index b929389a8..99db10c69 100644
--- a/src/video/cocoa/SDL_cocoaevents.m
+++ b/src/video/cocoa/SDL_cocoaevents.m
@@ -314,8 +314,7 @@ static void Cocoa_DispatchEvent(NSEvent *theEvent)
 
 static SDLAppDelegate *appDelegate = nil;
 
-static NSString *
-GetApplicationName(void)
+static NSString *GetApplicationName(void)
 {
     NSString *appName;
 
@@ -332,8 +331,7 @@ GetApplicationName(void)
     return appName;
 }
 
-static bool
-LoadMainMenuNibIfAvailable(void)
+static bool LoadMainMenuNibIfAvailable(void)
 {
 #if MAC_OS_X_VERSION_MAX_ALLOWED >= 1080
     NSDictionary *infoDict;
@@ -346,20 +344,19 @@ LoadMainMenuNibIfAvailable(void)
     infoDict = [[NSBundle mainBundle] infoDictionary];
     if (infoDict) {
         mainNibFileName = [infoDict valueForKey:@"NSMainNibFile"];
-        
+
         if (mainNibFileName) {
             success = [[NSBundle mainBundle] loadNibNamed:mainNibFileName owner:[NSApplication sharedApplication] topLevelObjects:nil];
         }
     }
-    
+
     return success;
 #else
     return false;
 #endif
 }
 
-static void
-CreateApplicationMenus(void)
+static void CreateApplicationMenus(void)
 {
     NSString *appName;
     NSString *title;
@@ -372,7 +369,7 @@ CreateApplicationMenus(void)
     if (NSApp == nil) {
         return;
     }
-    
+
     mainMenu = [[NSMenu alloc] init];
 
     /* Create the main menu bar */
@@ -430,7 +427,7 @@ CreateApplicationMenus(void)
     [windowMenu addItemWithTitle:@"Minimize" action:@selector(performMiniaturize:) keyEquivalent:@"m"];
 
     [windowMenu addItemWithTitle:@"Zoom" action:@selector(performZoom:) keyEquivalent:@""];
-    
+
     /* Add the fullscreen toggle menu option. */
     /* Cocoa should update the title to Enter or Exit Full Screen automatically.
      * But if not, then just fallback to Toggle Full Screen.
@@ -448,8 +445,7 @@ CreateApplicationMenus(void)
     [NSApp setWindowsMenu:windowMenu];
 }
 
-void
-Cocoa_RegisterApp(void)
+void Cocoa_RegisterApp(void)
 { @autoreleasepool
 {
     /* This can get called more than once! Be careful what you initialize! */
@@ -470,7 +466,7 @@ Cocoa_RegisterApp(void)
          */
         if ([NSApp mainMenu] == nil) {
             bool nibLoaded;
-            
+
             nibLoaded = LoadMainMenuNibIfAvailable();
             if (!nibLoaded) {
                 CreateApplicationMenus();
@@ -507,8 +503,7 @@ Cocoa_RegisterApp(void)
     }
 }}
 
-int
-Cocoa_PumpEventsUntilDate(_THIS, NSDate *expiration, bool accumulate)
+int Cocoa_PumpEventsUntilDate(_THIS, NSDate *expiration, bool accumulate)
 {
     for ( ; ; ) {
         NSEvent *event = [NSApp nextEventMatchingMask:NSEventMaskAny untilDate:expiration inMode:NSDefaultRunLoopMode dequeue:YES ];
@@ -529,8 +524,7 @@ Cocoa_PumpEventsUntilDate(_THIS, NSDate *expiration, bool accumulate)
     return 1;
 }
 
-int
-Cocoa_WaitEventTimeout(_THIS, int timeout)
+int Cocoa_WaitEventTimeout(_THIS, int timeout)
 { @autoreleasepool
 {
     if (timeout > 0) {
@@ -545,8 +539,7 @@ Cocoa_WaitEventTimeout(_THIS, int timeout)
     return 1;
 }}
 
-void
-Cocoa_PumpEvents(_THIS)
+void Cocoa_PumpEvents(_THIS)
 { @autoreleasepool
 {
     Cocoa_PumpEventsUntilDate(_this, [NSDate distantPast], true);
@@ -568,8 +561,7 @@ void Cocoa_SendWakeupEvent(_THIS, SDL_Window *window)
     [NSApp postEvent: event atStart: YES];
 }}
 
-void
-Cocoa_SuspendScreenSaver(_THIS)
+void Cocoa_SuspendScreenSaver(_THIS)
 { @autoreleasepool
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *)_this->driverdata;
diff --git a/src/video/cocoa/SDL_cocoakeyboard.m b/src/video/cocoa/SDL_cocoakeyboard.m
index 9c49deb6a..08ee18d50 100644
--- a/src/video/cocoa/SDL_cocoakeyboard.m
+++ b/src/video/cocoa/SDL_cocoakeyboard.m
@@ -197,8 +197,7 @@ static bool IsModifierKeyPressed(unsigned int flags,
     return target_pressed;
 }
 
-static void
-HandleModifiers(_THIS, SDL_Scancode code, unsigned int modifierFlags)
+static void HandleModifiers(_THIS, SDL_Scancode code, unsigned int modifierFlags)
 {
     bool pressed = false;
 
@@ -237,8 +236,7 @@ HandleModifiers(_THIS, SDL_Scancode code, unsigned int modifierFlags)
     }
 }
 
-static void
-UpdateKeymap(SDL_VideoData *data, SDL_bool send_event)
+static void UpdateKeymap(SDL_VideoData *data, SDL_bool send_event)
 {
     TISInputSourceRef key_layout;
     const void *chr_data;
@@ -280,7 +278,7 @@ UpdateKeymap(SDL_VideoData *data, SDL_bool send_event)
                 continue;
             }
 
-            /* 
+            /*
              * Swap the scancode for these two wrongly translated keys
              * UCKeyTranslate() function does not do its job properly for ISO layout keyboards, where the key '@',
              * which is located in the top left corner of the keyboard right under the Escape key, and the additional
@@ -313,8 +311,7 @@ cleanup:
     CFRelease(key_layout);
 }
 
-void
-Cocoa_InitKeyboard(_THIS)
+void Cocoa_InitKeyboard(_THIS)
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
 
@@ -332,8 +329,7 @@ Cocoa_InitKeyboard(_THIS)
     SDL_ToggleModState(KMOD_CAPS, (data.modifierFlags & NSEventModifierFlagCapsLock) ? SDL_TRUE : SDL_FALSE);
 }
 
-void
-Cocoa_StartTextInput(_THIS)
+void Cocoa_StartTextInput(_THIS)
 { @autoreleasepool
 {
     NSView *parentView;
@@ -364,8 +360,7 @@ Cocoa_StartTextInput(_THIS)
     }
 }}
 
-void
-Cocoa_StopTextInput(_THIS)
+void Cocoa_StopTextInput(_THIS)
 { @autoreleasepool
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
@@ -376,8 +371,7 @@ Cocoa_StopTextInput(_THIS)
     }
 }}
 
-void
-Cocoa_SetTextInputRect(_THIS, const SDL_Rect *rect)
+void Cocoa_SetTextInputRect(_THIS, const SDL_Rect *rect)
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
 
@@ -389,8 +383,7 @@ Cocoa_SetTextInputRect(_THIS, const SDL_Rect *rect)
     [data.fieldEdit setInputRect:rect];
 }
 
-void
-Cocoa_HandleKeyEvent(_THIS, NSEvent *event)
+void Cocoa_HandleKeyEvent(_THIS, NSEvent *event)
 {
     unsigned short scancode;
     SDL_Scancode code;
@@ -452,8 +445,7 @@ Cocoa_HandleKeyEvent(_THIS, NSEvent *event)
     }
 }
 
-void
-Cocoa_QuitKeyboard(_THIS)
+void Cocoa_QuitKeyboard(_THIS)
 {
 }
 
@@ -466,8 +458,7 @@ typedef enum {
 extern CGSConnection _CGSDefaultConnection(void);
 extern CGError CGSSetGlobalHotKeyOperatingMode(CGSConnection connection, CGSGlobalHotKeyOperatingMode mode);
 
-void
-Cocoa_SetWindowKeyboardGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
+void Cocoa_SetWindowKeyboardGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
 {
 #if SDL_MAC_NO_SANDBOX
     CGSSetGlobalHotKeyOperatingMode(_CGSDefaultConnection(), grabbed ? CGSGlobalHotKeyDisable : CGSGlobalHotKeyEnable);
diff --git a/src/video/cocoa/SDL_cocoamessagebox.m b/src/video/cocoa/SDL_cocoamessagebox.m
index a8d8943a6..a8f29a9b8 100644
--- a/src/video/cocoa/SDL_cocoamessagebox.m
+++ b/src/video/cocoa/SDL_cocoamessagebox.m
@@ -69,8 +69,7 @@
 @end
 
 
-static void
-Cocoa_ShowMessageBoxImpl(const SDL_MessageBoxData *messageboxdata, int *buttonid, int *returnValue)
+static void Cocoa_ShowMessageBoxImpl(const SDL_MessageBoxData *messageboxdata, int *buttonid, int *returnValue)
 {
     NSAlert* alert;
     const SDL_MessageBoxButtonData *buttons = messageboxdata->buttons;
@@ -130,8 +129,7 @@ Cocoa_ShowMessageBoxImpl(const SDL_MessageBoxData *messageboxdata, int *buttonid
 }
 
 /* Display a Cocoa message box */
-int
-Cocoa_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid)
+int Cocoa_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid)
 { @autoreleasepool
 {
     __block int returnValue = 0;
diff --git a/src/video/cocoa/SDL_cocoametalview.m b/src/video/cocoa/SDL_cocoametalview.m
index 2f1b73ba3..fab4652e7 100644
--- a/src/video/cocoa/SDL_cocoametalview.m
+++ b/src/video/cocoa/SDL_cocoametalview.m
@@ -131,8 +131,7 @@ SDL_MetalViewEventWatch(void *userdata, SDL_Event *event)
 
 @end
 
-SDL_MetalView
-Cocoa_Metal_CreateView(_THIS, SDL_Window * window)
+SDL_MetalView Cocoa_Metal_CreateView(_THIS, SDL_Window * window)
 { @autoreleasepool {
     SDL_WindowData* data = (__bridge SDL_WindowData *)window->driverdata;
     NSView *view = data.nswindow.contentView;
@@ -159,22 +158,19 @@ Cocoa_Metal_CreateView(_THIS, SDL_Window * window)
     return metalview;
 }}
 
-void
-Cocoa_Metal_DestroyView(_THIS, SDL_MetalView view)
+void Cocoa_Metal_DestroyView(_THIS, SDL_MetalView view)
 { @autoreleasepool {
     SDL_cocoametalview *metalview = CFBridgingRelease(view);
     [metalview removeFromSuperview];
 }}
 
-void *
-Cocoa_Metal_GetLayer(_THIS, SDL_MetalView view)
+void *Cocoa_Metal_GetLayer(_THIS, SDL_MetalView view)
 { @autoreleasepool {
     SDL_cocoametalview *cocoaview = (__bridge SDL_cocoametalview *)view;
     return (__bridge void *)cocoaview.layer;
 }}
 
-void
-Cocoa_Metal_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
+void Cocoa_Metal_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
 { @autoreleasepool {
     SDL_WindowData *data = (__bridge SDL_WindowData *)window->driverdata;
     NSView *contentView = data.sdlContentView;
diff --git a/src/video/cocoa/SDL_cocoamodes.m b/src/video/cocoa/SDL_cocoamodes.m
index 7f36625a0..0517302af 100644
--- a/src/video/cocoa/SDL_cocoamodes.m
+++ b/src/video/cocoa/SDL_cocoamodes.m
@@ -42,8 +42,7 @@
 #endif
 
 
-static int
-CG_SetError(const char *prefix, CGDisplayErr result)
+static int CG_SetError(const char *prefix, CGDisplayErr result)
 {
     const char *error;
 
@@ -85,8 +84,7 @@ CG_SetError(const char *prefix, CGDisplayErr result)
     return SDL_SetError("%s: %s", prefix, error);
 }
 
-static int
-GetDisplayModeRefreshRate(CGDisplayModeRef vidmode, CVDisplayLinkRef link)
+static int GetDisplayModeRefreshRate(CGDisplayModeRef vidmode, CVDisplayLinkRef link)
 {
     int refreshRate = (int) (CGDisplayModeGetRefreshRate(vidmode) + 0.5);
 
@@ -101,8 +99,7 @@ GetDisplayModeRefreshRate(CGDisplayModeRef vidmode, CVDisplayLinkRef link)
     return refreshRate;
 }
 
-static SDL_bool
-HasValidDisplayModeFlags(CGDisplayModeRef vidmode)
+static SDL_bool HasValidDisplayModeFlags(CGDisplayModeRef vidmode)
 {
     uint32_t ioflags = CGDisplayModeGetIOFlags(vidmode);
 
@@ -119,8 +116,7 @@ HasValidDisplayModeFlags(CGDisplayModeRef vidmode)
     return SDL_TRUE;
 }
 
-static Uint32
-GetDisplayModePixelFormat(CGDisplayModeRef vidmode)
+static Uint32 GetDisplayModePixelFormat(CGDisplayModeRef vidmode)
 {
     /* This API is deprecated in 10.11 with no good replacement (as of 10.15). */
     CFStringRef fmt = CGDisplayModeCopyPixelEncoding(vidmode);
@@ -144,8 +140,7 @@ GetDisplayModePixelFormat(CGDisplayModeRef vidmode)
     return pixelformat;
 }
 
-static SDL_bool
-GetDisplayMode(_THIS, CGDisplayModeRef vidmode, SDL_bool vidmodeCurrent, CFArrayRef modelist, CVDisplayLinkRef link, SDL_DisplayMode *mode)
+static SDL_bool GetDisplayMode(_THIS, CGDisplayModeRef vidmode, SDL_bool vidmodeCurrent, CFArrayRef modelist, CVDisplayLinkRef link, SDL_DisplayMode *mode)
 {
     SDL_DisplayModeData *data;
     bool usableForGUI = CGDisplayModeIsUsableForDesktopGUI(vidmode);
@@ -283,8 +278,7 @@ GetDisplayMode(_THIS, CGDisplayModeRef vidmode, SDL_bool vidmodeCurrent, CFArray
     return SDL_TRUE;
 }
 
-static const char *
-Cocoa_GetDisplayName(CGDirectDisplayID displayID)
+static const char *Cocoa_GetDisplayName(CGDirectDisplayID displayID)
 {
     /* This API is deprecated in 10.9 with no good replacement (as of 10.15). */
     io_service_t servicePort = CGDisplayIOServicePort(displayID);
@@ -299,8 +293,7 @@ Cocoa_GetDisplayName(CGDirectDisplayID displayID)
     return displayName;
 }
 
-void
-Cocoa_InitModes(_THIS)
+void Cocoa_InitModes(_THIS)
 { @autoreleasepool
 {
     CGDisplayErr result;
@@ -384,8 +377,7 @@ Cocoa_InitModes(_THIS)
     SDL_small_free(displays, isstack);
 }}
 
-int
-Cocoa_GetDisplayBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
+int Cocoa_GetDisplayBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
 {
     SDL_DisplayData *displaydata = (SDL_DisplayData *) display->driverdata;
     CGRect cgrect;
@@ -398,8 +390,7 @@ Cocoa_GetDisplayBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
     return 0;
 }
 
-int
-Cocoa_GetDisplayUsableBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
+int Cocoa_GetDisplayUsableBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
 {
     SDL_DisplayData *displaydata = (SDL_DisplayData *) display->driverdata;
     const CGDirectDisplayID cgdisplay = displaydata->display;
@@ -431,8 +422,7 @@ Cocoa_GetDisplayUsableBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
     return 0;
 }
 
-int
-Cocoa_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdpi, float * vdpi)
+int Cocoa_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdpi, float * vdpi)
 { @autoreleasepool
 {
     const float MM_IN_INCH = 25.4f;
@@ -445,7 +435,7 @@ Cocoa_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdp
     NSSize displayNativeSize;
     displayNativeSize.width = (int) CGDisplayPixelsWide(data->display);
     displayNativeSize.height = (int) CGDisplayPixelsHigh(data->display);
-    
+
     for (NSScreen *screen in screens) {
         const CGDirectDisplayID dpyid = (const CGDirectDisplayID ) [[[screen deviceDescription] objectForKey:@"NSScreenNumber"] unsignedIntValue];
         if (dpyid == data->display) {
@@ -462,7 +452,7 @@ Cocoa_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdp
                     CGFloat width = CGDisplayModeGetPixelWidth(m);
                     CGFloat height = CGDisplayModeGetPixelHeight(m);
                     CGFloat HiDPIWidth = CGDisplayModeGetWidth(m);
-                    
+
                     //Only check 1x mode
                     if(width == HiDPIWidth) {
                         if (CGDisplayModeGetIOFlags(m) & kDisplayModeNativeFlag) {
@@ -470,7 +460,7 @@ Cocoa_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdp
                             displayNativeSize.height = height;
                             break;
                         }
-                        
+
                         //Get the largest size even if kDisplayModeNativeFlag is not present e.g. iMac 27-Inch with 5K Retina
                         if(width > displayNativeSize.width) {
                             displayNativeSize.width = width;
@@ -510,8 +500,7 @@ Cocoa_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdp
     return 0;
 }}
 
-void
-Cocoa_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
+void Cocoa_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
 {
     SDL_DisplayData *data = (SDL_DisplayData *) display->driverdata;
     CVDisplayLinkRef link = NULL;
@@ -591,8 +580,7 @@ Cocoa_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
     CVDisplayLinkRelease(link);
 }
 
-static CGError
-SetDisplayModeForDisplay(CGDirectDisplayID display, SDL_DisplayModeData *data)
+static CGError SetDisplayModeForDisplay(CGDirectDisplayID display, SDL_DisplayModeData *data)
 {
     /* SDL_DisplayModeData can contain multiple CGDisplayModes to try (with
      * identical properties), some of which might not work. See GetDisplayMode.
@@ -610,8 +598,7 @@ SetDisplayModeForDisplay(CGDirectDisplayID display, SDL_DisplayModeData *data)
     return result;
 }
 
-int
-Cocoa_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+int Cocoa_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
 {
     SDL_DisplayData *displaydata = (SDL_DisplayData *) display->driverdata;
     SDL_DisplayModeData *data = (SDL_DisplayModeData *) mode->driverdata;
@@ -676,8 +663,7 @@ ERR_NO_CAPTURE:
     return -1;
 }
 
-void
-Cocoa_QuitModes(_THIS)
+void Cocoa_QuitModes(_THIS)
 {
     int i, j;
 
diff --git a/src/video/cocoa/SDL_cocoamouse.m b/src/video/cocoa/SDL_cocoamouse.m
index a7f59a021..0321c6c80 100644
--- a/src/video/cocoa/SDL_cocoamouse.m
+++ b/src/video/cocoa/SDL_cocoamouse.m
@@ -63,8 +63,7 @@
 @end
 
 
-static SDL_Cursor *
-Cocoa_CreateDefaultCursor()
+static SDL_Cursor *Cocoa_CreateDefaultCursor()
 { @autoreleasepool
 {
     NSCursor *nscursor;
@@ -82,8 +81,7 @@ Cocoa_CreateDefaultCursor()
     return cursor;
 }}
 
-static SDL_Cursor *
-Cocoa_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
+static SDL_Cursor *Cocoa_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
 { @autoreleasepool
 {
     NSImage *nsimage;
@@ -108,8 +106,7 @@ Cocoa_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
 /* there are .pdf files of some of the cursors we need, installed by default on macOS, but not available through NSCursor.
    If we can load them ourselves, use them, otherwise fallback to something standard but not super-great.
    Since these are under /System, they should be available even to sandboxed apps. */
-static NSCursor *
-LoadHiddenSystemCursor(NSString *cursorName, SEL fallback)
+static NSCursor *LoadHiddenSystemCursor(NSString *cursorName, SEL fallback)
 {
     NSString *cursorPath = [@"/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework/Versions/A/Resources/cursors" stringByAppendingPathComponent:cursorName];
     NSDictionary *info = [NSDictionary dictionaryWithContentsOfFile:[cursorPath stringByAppendingPathComponent:@"info.plist"]];
@@ -146,8 +143,7 @@ LoadHiddenSystemCursor(NSString *cursorName, SEL fallback)
     return cursor;
 }
 
-static SDL_Cursor *
-Cocoa_CreateSystemCursor(SDL_SystemCursor id)
+static SDL_Cursor *Cocoa_CreateSystemCursor(SDL_SystemCursor id)
 { @autoreleasepool
 {
     NSCursor *nscursor = NULL;
@@ -206,16 +202,14 @@ Cocoa_CreateSystemCursor(SDL_SystemCursor id)
     return cursor;
 }}
 
-static void
-Cocoa_FreeCursor(SDL_Cursor * cursor)
+static void Cocoa_FreeCursor(SDL_Cursor * cursor)
 { @autoreleasepool
 {
     CFBridgingRelease(cursor->driverdata);
     SDL_free(cursor);
 }}
 
-static int
-Cocoa_ShowCursor(SDL_Cursor * cursor)
+static int Cocoa_ShowCursor(SDL_Cursor * cursor)
 { @autoreleasepool
 {
     SDL_VideoDevice *device = SDL_GetVideoDevice();
@@ -231,8 +225,7 @@ Cocoa_ShowCursor(SDL_Cursor * cursor)
     return 0;
 }}
 
-static SDL_Window *
-SDL_FindWindowAtPoint(const int x, const int y)
+static SDL_Window *SDL_FindWindowAtPoint(const int x, const int y)
 {
     const SDL_Point pt = { x, y };
     SDL_Window *i;
@@ -246,8 +239,7 @@ SDL_FindWindowAtPoint(const int x, const int y)
     return NULL;
 }
 
-static int
-Cocoa_WarpMouseGlobal(int x, int y)
+static int Cocoa_WarpMouseGlobal(int x, int y)
 {
     CGPoint point;
     SDL_Mouse *mouse = SDL_GetMouse();
@@ -288,14 +280,12 @@ Cocoa_WarpMouseGlobal(int x, int y)
     return 0;
 }
 
-static void
-Cocoa_WarpMouse(SDL_Window * window, int x, int y)
+static void Cocoa_WarpMouse(SDL_Window * window, int x, int y)
 {
     Cocoa_WarpMouseGlobal(window->x + x, window->y + y);
 }
 
-static int
-Cocoa_SetRelativeMouseMode(SDL_bool enabled)
+static int Cocoa_SetRelativeMouseMode(SDL_bool enabled)
 {
     CGError result;
     SDL_Window *window;
@@ -338,16 +328,14 @@ Cocoa_SetRelativeMouseMode(SDL_bool enabled)
     return 0;
 }
 
-static int
-Cocoa_CaptureMouse(SDL_Window *window)
+static int Cocoa_CaptureMouse(SDL_Window *window)
 {
     /* our Cocoa event code already tracks the mouse outside the window,
         so all we have to do here is say "okay" and do what we always do. */
     return 0;
 }
 
-static Uint32
-Cocoa_GetGlobalMouseState(int *x, int *y)
+static Uint32 Cocoa_GetGlobalMouseState(int *x, int *y)
 {
     const NSUInteger cocoaButtons = [NSEvent pressedMouseButtons];
     const NSPoint cocoaLocation = [NSEvent mouseLocation];
@@ -365,8 +353,7 @@ Cocoa_GetGlobalMouseState(int *x, int *y)
     return retval;
 }
 
-int
-Cocoa_InitMouse(_THIS)
+int Cocoa_InitMouse(_THIS)
 {
     NSPoint location;
     SDL_Mouse *mouse = SDL_GetMouse();
@@ -394,8 +381,7 @@ Cocoa_InitMouse(_THIS)
     return 0;
 }
 
-static void
-Cocoa_HandleTitleButtonEvent(_THIS, NSEvent *event)
+static void Cocoa_HandleTitleButtonEvent(_THIS, NSEvent *event)
 {
     SDL_Window *window;
     NSWindow *nswindow = [event window];
@@ -428,8 +414,7 @@ Cocoa_HandleTitleButtonEvent(_THIS, NSEvent *event)
     }
 }
 
-void
-Cocoa_HandleMouseEvent(_THIS, NSEvent *event)
+void Cocoa_HandleMouseEvent(_THIS, NSEvent *event)
 {
     SDL_Mouse *mouse;
     SDL_MouseData *driverdata;
@@ -508,8 +493,7 @@ Cocoa_HandleMouseEvent(_THIS, NSEvent *event)
     SDL_SendMouseMotion(mouse->focus, mouseID, 1, (int)deltaX, (int)deltaY);
 }
 
-void
-Cocoa_HandleMouseWheel(SDL_Window *window, NSEvent *event)
+void Cocoa_HandleMouseWheel(SDL_Window *window, NSEvent *event)
 {
     SDL_MouseID mouseID;
     SDL_MouseWheelDirection direction;
@@ -546,8 +530,7 @@ Cocoa_HandleMouseWheel(SDL_Window *window, NSEvent *event)
     SDL_SendMouseWheel(window, mouseID, x, y, direction);
 }
 
-void
-Cocoa_HandleMouseWarp(CGFloat x, CGFloat y)
+void Cocoa_HandleMouseWarp(CGFloat x, CGFloat y)
 {
     /* This makes Cocoa_HandleMouseEvent ignore the delta caused by the warp,
      * since it gets included in the next movement event.
@@ -560,8 +543,7 @@ Cocoa_HandleMouseWarp(CGFloat x, CGFloat y)
     DLog("(%g, %g)", x, y);
 }
 
-void
-Cocoa_QuitMouse(_THIS)
+void Cocoa_QuitMouse(_THIS)
 {
     SDL_Mouse *mouse = SDL_GetMouse();
     if (mouse) {
diff --git a/src/video/cocoa/SDL_cocoaopengl.m b/src/video/cocoa/SDL_cocoaopengl.m
index 46a973a73..0ac8e3e24 100644
--- a/src/video/cocoa/SDL_cocoaopengl.m
+++ b/src/video/cocoa/SDL_cocoaopengl.m
@@ -62,8 +62,7 @@ SDL_OpenGLAsyncDispatchChanged(void *userdata, const char *name, const char *old
     SDL_opengl_async_dispatch = SDL_GetStringBoolean(hint, SDL_FALSE);
 }
 
-static CVReturn
-DisplayLinkCallback(CVDisplayLinkRef displayLink, const CVTimeStamp* now, const CVTimeStamp* outputTime, CVOptionFlags flagsIn, CVOptionFlags* flagsOut, void* displayLinkContext)
+static CVReturn DisplayLinkCallback(CVDisplayLinkRef displayLink, const CVTimeStamp* now, const CVTimeStamp* outputTime, CVOptionFlags flagsIn, CVOptionFlags* flagsOut, void* displayLinkContext)
 {
     SDLOpenGLContext *nscontext = (__bridge SDLOpenGLContext *) displayLinkContext;
 
@@ -224,8 +223,7 @@ DisplayLinkCallback(CVDisplayLinkRef displayLink, const CVTimeStamp* now, const
 @end
 
 
-int
-Cocoa_GL_LoadLibrary(_THIS, const char *path)
+int Cocoa_GL_LoadLibrary(_THIS, const char *path)
 {
     /* Load the OpenGL library */
     if (path == NULL) {
@@ -243,21 +241,18 @@ Cocoa_GL_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-void *
-Cocoa_GL_GetProcAddress(_THIS, const char *proc)
+void *Cocoa_GL_GetProcAddress(_THIS, const char *proc)
 {
     return SDL_LoadFunction(_this->gl_config.dll_handle, proc);
 }
 
-void
-Cocoa_GL_UnloadLibrary(_THIS)
+void Cocoa_GL_UnloadLibrary(_THIS)
 {
     SDL_UnloadObject(_this->gl_config.dll_handle);
     _this->gl_config.dll_handle = NULL;
 }
 
-SDL_GLContext
-Cocoa_GL_CreateContext(_THIS, SDL_Window * window)
+SDL_GLContext Cocoa_GL_CreateContext(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -287,7 +282,7 @@ Cocoa_GL_CreateContext(_THIS, SDL_Window * window)
         _this->GL_GetSwapInterval = Cocoa_GLES_GetSwapInterval;
         _this->GL_SwapWindow = Cocoa_GLES_SwapWindow;
         _this->GL_DeleteContext = Cocoa_GLES_DeleteContext;
-        
+
         if (Cocoa_GLES_LoadLibrary(_this, NULL) != 0) {
             return NULL;
         }
@@ -433,8 +428,7 @@ Cocoa_GL_CreateContext(_THIS, SDL_Window * window)
     return sdlcontext;
 }}
 
-int
-Cocoa_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
+int Cocoa_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
 { @autoreleasepool
 {
     if (context) {
@@ -451,8 +445,7 @@ Cocoa_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
     return 0;
 }}
 
-int
-Cocoa_GL_SetSwapInterval(_THIS, int interval)
+int Cocoa_GL_SetSwapInterval(_THIS, int interval)
 { @autoreleasepool
 {
     SDLOpenGLContext *nscontext = (__bridge SDLOpenGLContext *) SDL_GL_GetCurrentContext();
@@ -471,16 +464,14 @@ Cocoa_GL_SetSwapInterval(_THIS, int interval)
     return status;
 }}
 
-int
-Cocoa_GL_GetSwapInterval(_THIS)
+int Cocoa_GL_GetSwapInterval(_THIS)
 { @autoreleasepool
 {
     SDLOpenGLContext* nscontext = (__bridge SDLOpenGLContext*)SDL_GL_GetCurrentContext();
     return nscontext ? SDL_AtomicGet(&nscontext->swapIntervalSetting) : 0;
 }}
 
-int
-Cocoa_GL_SwapWindow(_THIS, SDL_Window * window)
+int Cocoa_GL_SwapWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDLOpenGLContext* nscontext = (__bridge SDLOpenGLContext*)SDL_GL_GetCurrentContext();
@@ -516,8 +507,7 @@ Cocoa_GL_SwapWindow(_THIS, SDL_Window * window)
     return 0;
 }}
 
-void
-Cocoa_GL_DeleteContext(_THIS, SDL_GLContext context)
+void Cocoa_GL_DeleteContext(_THIS, SDL_GLContext context)
 { @autoreleasepool
 {
     SDLOpenGLContext *nscontext = (__bridge SDLOpenGLContext *)context;
diff --git a/src/video/cocoa/SDL_cocoaopengles.m b/src/video/cocoa/SDL_cocoaopengles.m
index 27091c5dc..17f0b4cb7 100644
--- a/src/video/cocoa/SDL_cocoaopengles.m
+++ b/src/video/cocoa/SDL_cocoaopengles.m
@@ -28,8 +28,7 @@
 
 /* EGL implementation of SDL OpenGL support */
 
-int
-Cocoa_GLES_LoadLibrary(_THIS, const char *path)
+int Cocoa_GLES_LoadLibrary(_THIS, const char *path)
 {
     /* If the profile requested is not GL ES, switch over to WIN_GL functions  */
     if (_this->gl_config.profile_mask != SDL_GL_CONTEXT_PROFILE_ES) {
@@ -57,8 +56,7 @@ Cocoa_GLES_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-SDL_GLContext
-Cocoa_GLES_CreateContext(_THIS, SDL_Window * window)
+SDL_GLContext Cocoa_GLES_CreateContext(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_GLContext context;
@@ -90,29 +88,25 @@ Cocoa_GLES_CreateContext(_THIS, SDL_Window * window)
     return context;
 }}
 
-void
-Cocoa_GLES_DeleteContext(_THIS, SDL_GLContext context)
+void Cocoa_GLES_DeleteContext(_THIS, SDL_GLContext context)
 { @autoreleasepool
 {
     SDL_EGL_DeleteContext(_this, context);
 }}
 
-int
-Cocoa_GLES_SwapWindow(_THIS, SDL_Window * window)
+int Cocoa_GLES_SwapWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     return SDL_EGL_SwapBuffers(_this, ((__bridge SDL_WindowData *) window->driverdata).egl_surface);
 }}
 
-int
-Cocoa_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
+int Cocoa_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
 { @autoreleasepool
 {
     return SDL_EGL_MakeCurrent(_this, window ? ((__bridge SDL_WindowData *) window->driverdata).egl_surface : EGL_NO_SURFACE, context);
 }}
 
-int
-Cocoa_GLES_SetupWindow(_THIS, SDL_Window * window)
+int Cocoa_GLES_SetupWindow(_THIS, SDL_Window * window)
 {
     NSView* v;
     /* The current context is lost in here; save it and reset it. */
diff --git a/src/video/cocoa/SDL_cocoashape.m b/src/video/cocoa/SDL_cocoashape.m
index 8dd78b0bd..2fd9f5946 100644
--- a/src/video/cocoa/SDL_cocoashape.m
+++ b/src/video/cocoa/SDL_cocoashape.m
@@ -39,8 +39,7 @@
 @implementation SDL_CocoaClosure
 @end
 
-SDL_WindowShaper*
-Cocoa_CreateShaper(SDL_Window* window)
+SDL_WindowShaper *Cocoa_CreateShaper(SDL_Window* window)
 { @autoreleasepool
 {
     SDL_WindowShaper* result;
@@ -77,8 +76,7 @@ Cocoa_CreateShaper(SDL_Window* window)
     return result;
 }}
 
-void
-ConvertRects(SDL_ShapeTree* tree, void* closure)
+static void ConvertRects(SDL_ShapeTree* tree, void* closure)
 {
     SDL_CocoaClosure* data = (__bridge SDL_CocoaClosure*)closure;
     if(tree->kind == OpaqueShape) {
@@ -87,8 +85,7 @@ ConvertRects(SDL_ShapeTree* tree, void* closure)
     }
 }
 
-int
-Cocoa_SetWindowShape(SDL_WindowShaper *shaper, SDL_Surface *shape, SDL_WindowShapeMode *shape_mode)
+int Cocoa_SetWindowShape(SDL_WindowShaper *shaper, SDL_Surface *shape, SDL_WindowShapeMode *shape_mode)
 { @autoreleasepool
 {
     SDL_ShapeData* data = (__bridge SDL_ShapeData*)shaper->driverdata;
@@ -118,8 +115,7 @@ Cocoa_SetWindowShape(SDL_WindowShaper *shaper, SDL_Surface *shape, SDL_WindowSha
     return 0;
 }}
 
-int
-Cocoa_ResizeWindowShape(SDL_Window *window)
+int Cocoa_ResizeWindowShape(SDL_Window *window)
 { @autoreleasepool {
     SDL_ShapeData* data = (__bridge SDL_ShapeData*)window->shaper->driverdata;
     SDL_assert(data != NULL);
diff --git a/src/video/cocoa/SDL_cocoavideo.m b/src/video/cocoa/SDL_cocoavideo.m
index db113e139..a626b1b40 100644
--- a/src/video/cocoa/SDL_cocoavideo.m
+++ b/src/video/cocoa/SDL_cocoavideo.m
@@ -44,8 +44,7 @@ static void Cocoa_VideoQuit(_THIS);
 
 /* Cocoa driver bootstrap functions */
 
-static void
-Cocoa_DeleteDevice(SDL_VideoDevice * device)
+static void Cocoa_DeleteDevice(SDL_VideoDevice * device)
 { @autoreleasepool
 {
     if (device->wakeup_lock) {
@@ -55,8 +54,7 @@ Cocoa_DeleteDevice(SDL_VideoDevice * device)
     SDL_free(device);
 }}
 
-static SDL_VideoDevice *
-Cocoa_CreateDevice(void)
+static SDL_VideoDevice *Cocoa_CreateDevice(void)
 { @autoreleasepool
 {
     SDL_VideoDevice *device;
@@ -185,8 +183,7 @@ VideoBootStrap COCOA_bootstrap = {
 };
 
 
-int
-Cocoa_VideoInit(_THIS)
+int Cocoa_VideoInit(_THIS)
 { @autoreleasepool
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
@@ -208,8 +205,7 @@ Cocoa_VideoInit(_THIS)
     return 0;
 }}
 
-void
-Cocoa_VideoQuit(_THIS)
+void Cocoa_VideoQuit(_THIS)
 { @autoreleasepool
 {
     SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
@@ -221,8 +217,7 @@ Cocoa_VideoQuit(_THIS)
 }}
 
 /* This function assumes that it's called from within an autorelease pool */
-NSImage *
-Cocoa_CreateImage(SDL_Surface * surface)
+NSImage *Cocoa_CreateImage(SDL_Surface * surface)
 {
     SDL_Surface *converted;
     NSBitmapImageRep *imgrep;
diff --git a/src/video/cocoa/SDL_cocoawindow.m b/src/video/cocoa/SDL_cocoawindow.m
index 634f8553b..f586bdb61 100644
--- a/src/video/cocoa/SDL_cocoawindow.m
+++ b/src/video/cocoa/SDL_cocoawindow.m
@@ -257,8 +257,7 @@ static void ConvertNSRect(NSScreen *screen, BOOL fullscreen, NSRect *r)
     r->origin.y = CGDisplayPixelsHigh(kCGDirectMainDisplay) - r->origin.y - r->size.height;
 }
 
-static void
-ScheduleContextUpdates(SDL_WindowData *data)
+static void ScheduleContextUpdates(SDL_WindowData *data)
 {
     /* We still support OpenGL as long as Apple offers it, deprecated or not, so disable deprecation warnings about it. */
     #if SDL_VIDEO_OPENGL
@@ -294,14 +293,12 @@ ScheduleContextUpdates(SDL_WindowData *data)
 }
 
 /* !!! FIXME: this should use a hint callback. */
-static int
-GetHintCtrlClickEmulateRightClick()
+static int GetHintCtrlClickEmulateRightClick()
 {
     return SDL_GetHintBoolean(SDL_HINT_MAC_CTRL_CLICK_EMULATE_RIGHT_CLICK, SDL_FALSE);
 }
 
-static NSUInteger
-GetWindowWindowedStyle(SDL_Window * window)
+static NSUInteger GetWindowWindowedStyle(SDL_Window * window)
 {
     /* IF YOU CHANGE ANY FLAGS IN HERE, PLEASE READ
        the NSWindowStyleMaskBorderless comments in SetupWindowData()! */
@@ -321,8 +318,7 @@ GetWindowWindowedStyle(SDL_Window * window)
     return style;
 }
 
-static NSUInteger
-GetWindowStyle(SDL_Window * window)
+static NSUInteger GetWindowStyle(SDL_Window * window)
 {
     NSUInteger style = 0;
 
@@ -334,8 +330,7 @@ GetWindowStyle(SDL_Window * window)
     return style;
 }
 
-static SDL_bool
-SetWindowStyle(SDL_Window * window, NSUInteger style)
+static SDL_bool SetWindowStyle(SDL_Window * window, NSUInteger style)
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
     NSWindow *nswindow = data.nswindow;
@@ -355,8 +350,7 @@ SetWindowStyle(SDL_Window * window, NSUInteger style)
     return SDL_TRUE;
 }
 
-static SDL_bool
-ShouldAdjustCoordinatesForGrab(SDL_Window * window)
+static SDL_bool ShouldAdjustCoordinatesForGrab(SDL_Window * window)
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
 
@@ -374,8 +368,7 @@ ShouldAdjustCoordinatesForGrab(SDL_Window * window)
     return SDL_FALSE;
 }
 
-static SDL_bool
-AdjustCoordinatesForGrab(SDL_Window * window, int x, int y, CGPoint *adjusted)
+static SDL_bool AdjustCoordinatesForGrab(SDL_Window * window, int x, int y, CGPoint *adjusted)
 {
     if (window->mouse_rect.w > 0 && window->mouse_rect.h > 0) {
         SDL_Rect window_rect;
@@ -414,8 +407,7 @@ AdjustCoordinatesForGrab(SDL_Window * window, int x, int y, CGPoint *adjusted)
     return SDL_FALSE;
 }
 
-static void
-Cocoa_UpdateClipCursor(SDL_Window * window)
+static void Cocoa_UpdateClipCursor(SDL_Window * window)
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
 
@@ -959,7 +951,7 @@ Cocoa_UpdateClipCursor(SDL_Window * window)
 
     isFullscreenSpace = NO;
     inFullscreenTransition = NO;
-    
+
     [self windowDidExitFullScreen:nil];
 }
 
@@ -1009,16 +1001,16 @@ Cocoa_UpdateClipCursor(SDL_Window * window)
 - (void)windowDidFailToExitFullScreen:(NSNotification *)aNotification
 {
     SDL_Window *window = _data.window;
-    
+
     if (window->is_destroying) {
         return;
     }
 
     SetWindowStyle(window, (NSWindowStyleMaskTitled|NSWindowStyleMaskClosable|NSWindowStyleMaskMiniaturizable|NSWindowStyleMaskResizable));
-    
+
     isFullscreenSpace = YES;
     inFullscreenTransition = NO;
-    
+
     [self windowDidEnterFullScreen:nil];
 }
 
@@ -1192,8 +1184,7 @@ Cocoa_UpdateClipCursor(SDL_Window * window)
     return NO;  /* not a special area, carry on. */
 }
 
-static int
-Cocoa_SendMouseButtonClicks(SDL_Mouse * mouse, NSEvent *theEvent, SDL_Window * window, const Uint8 state, const Uint8 button)
+static int Cocoa_SendMouseButtonClicks(SDL_Mouse * mouse, NSEvent *theEvent, SDL_Window * window, const Uint8 state, const Uint8 button)
 {
     const SDL_MouseID mouseID = mouse->mouseID;
     const int clicks = (int) [theEvent clickCount];
@@ -1622,8 +1613,7 @@ Cocoa_SendMouseButtonClicks(SDL_Mouse * mouse, NSEvent *theEvent, SDL_Window * w
 }
 @end
 
-static int
-SetupWindowData(_THIS, SDL_Window * window, NSWindow *nswindow, NSView *nsview, SDL_bool created)
+static int SetupWindowData(_THIS, SDL_Window * window, NSWindow *nswindow, NSView *nsview, SDL_bool created)
 { @autoreleasepool
 {
     SDL_VideoData *videodata = (__bridge SDL_VideoData *) _this->driverdata;
@@ -1716,8 +1706,7 @@ SetupWindowData(_THIS, SDL_Window * window, NSWindow *nswindow, NSView *nsview,
     return 0;
 }}
 
-int
-Cocoa_CreateWindow(_THIS, SDL_Window * window)
+int Cocoa_CreateWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_VideoData *videodata = (__bridge SDL_VideoData *) _this->driverdata;
@@ -1816,7 +1805,7 @@ Cocoa_CreateWindow(_THIS, SDL_Window * window)
     if (!(window->flags & SDL_WINDOW_OPENGL)) {
         return 0;
     }
-    
+
     /* The rest of this macro mess is for OpenGL or OpenGL ES windows */
 #if SDL_VIDEO_OPENGL_ES2
     if (_this->gl_config.profile_mask == SDL_GL_CONTEXT_PROFILE_ES) {
@@ -1834,8 +1823,7 @@ Cocoa_CreateWindow(_THIS, SDL_Window * window)
     return 0;
 }}
 
-int
-Cocoa_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
+int Cocoa_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
 { @autoreleasepool
 {
     NSView* nsview = nil;
@@ -1875,8 +1863,7 @@ Cocoa_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
     return SetupWindowData(_this, window, nswindow, nsview, SDL_FALSE);
 }}
 
-void
-Cocoa_SetWindowTitle(_THIS, SDL_Window * window)
+void Cocoa_SetWindowTitle(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     const char *title = window->title ? window->title : "";
@@ -1885,8 +1872,7 @@ Cocoa_SetWindowTitle(_THIS, SDL_Window * window)
     [nswindow setTitle:string];
 }}
 
-void
-Cocoa_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
+void Cocoa_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
 { @autoreleasepool
 {
     NSImage *nsimage = Cocoa_CreateImage(icon);
@@ -1896,8 +1882,7 @@ Cocoa_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
     }
 }}
 
-void
-Cocoa_SetWindowPosition(_THIS, SDL_Window * window)
+void Cocoa_SetWindowPosition(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -1919,8 +1904,7 @@ Cocoa_SetWindowPosition(_THIS, SDL_Window * window)
     ScheduleContextUpdates(windata);
 }}
 
-void
-Cocoa_SetWindowSize(_THIS, SDL_Window * window)
+void Cocoa_SetWindowSize(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -1946,8 +1930,7 @@ Cocoa_SetWindowSize(_THIS, SDL_Window * window)
     ScheduleContextUpdates(windata);
 }}
 
-void
-Cocoa_SetWindowMinimumSize(_THIS, SDL_Window * window)
+void Cocoa_SetWindowMinimumSize(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -1959,8 +1942,7 @@ Cocoa_SetWindowMinimumSize(_THIS, SDL_Window * window)
     [windata.nswindow setContentMinSize:minSize];
 }}
 
-void
-Cocoa_SetWindowMaximumSize(_THIS, SDL_Window * window)
+void Cocoa_SetWindowMaximumSize(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -1972,8 +1954,7 @@ Cocoa_SetWindowMaximumSize(_THIS, SDL_Window * window)
     [windata.nswindow setContentMaxSize:maxSize];
 }}
 
-void
-Cocoa_GetWindowSizeInPixels(_THIS, SDL_Window * window, int *w, int *h)
+void Cocoa_GetWindowSizeInPixels(_THIS, SDL_Window * window, int *w, int *h)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -1990,8 +1971,7 @@ Cocoa_GetWindowSizeInPixels(_THIS, SDL_Window * window, int *w, int *h)
 }}
 
 
-void
-Cocoa_ShowWindow(_THIS, SDL_Window * window)
+void Cocoa_ShowWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windowData = ((__bridge SDL_WindowData *) window->driverdata);
@@ -2004,8 +1984,7 @@ Cocoa_ShowWindow(_THIS, SDL_Window * window)
     }
 }}
 
-void
-Cocoa_HideWindow(_THIS, SDL_Window * window)
+void Cocoa_HideWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     NSWindow *nswindow = ((__bridge SDL_WindowData *) window->driverdata).nswindow;
@@ -2013,8 +1992,7 @@ Cocoa_HideWindow(_THIS, SDL_Window * window)
     [nswindow orderOut:nil];
 }}
 
-void
-Cocoa_RaiseWindow(_THIS, SDL_Window * window)
+void Cocoa_RaiseWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windowData = ((__bridge SDL_WindowData *) window->driverdata);
@@ -2031,8 +2009,7 @@ Cocoa_RaiseWindow(_THIS, SDL_Window * window)
     [windowData.listener resumeVisibleObservation];
 }}
 
-void
-Cocoa_MaximizeWindow(_THIS, SDL_Window * window)
+void Cocoa_MaximizeWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -2043,8 +2020,7 @@ Cocoa_MaximizeWindow(_THIS, SDL_Window * window)
     ScheduleContextUpdates(windata);
 }}
 
-void
-Cocoa_MinimizeWindow(_THIS, SDL_Window * window)
+void Cocoa_MinimizeWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -2056,8 +2032,7 @@ Cocoa_MinimizeWindow(_THIS, SDL_Window * window)
     }
 }}
 
-void
-Cocoa_RestoreWindow(_THIS, SDL_Window * window)
+void Cocoa_RestoreWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     NSWindow *nswindow = ((__bridge SDL_WindowData *) window->driverdata).nswindow;
@@ -2069,8 +2044,7 @@ Cocoa_RestoreWindow(_THIS, SDL_Window * window)
     }
 }}
 
-void
-Cocoa_SetWindowBordered(_THIS, SDL_Window * window, SDL_bool bordered)
+void Cocoa_SetWindowBordered(_THIS, SDL_Window * window, SDL_bool bordered)
 { @autoreleasepool
 {
     if (SetWindowStyle(window, GetWindowStyle(window))) {
@@ -2080,8 +2054,7 @@ Cocoa_SetWindowBordered(_THIS, SDL_Window * window, SDL_bool bordered)
     }
 }}
 
-void
-Cocoa_SetWindowResizable(_THIS, SDL_Window * window, SDL_bool resizable)
+void Cocoa_SetWindowResizable(_THIS, SDL_Window * window, SDL_bool resizable)
 { @autoreleasepool
 {
     /* Don't set this if we're in a space!
@@ -2105,8 +2078,7 @@ Cocoa_SetWindowResizable(_THIS, SDL_Window * window, SDL_bool resizable)
     }
 }}
 
-void
-Cocoa_SetWindowAlwaysOnTop(_THIS, SDL_Window * window, SDL_bool on_top)
+void Cocoa_SetWindowAlwaysOnTop(_THIS, SDL_Window * window, SDL_bool on_top)
 { @autoreleasepool
     {
         NSWindow *nswindow = ((__bridge SDL_WindowData *) window->driverdata).nswindow;
@@ -2117,8 +2089,7 @@ Cocoa_SetWindowAlwaysOnTop(_THIS, SDL_Window * window, SDL_bool on_top)
         }
     }}
 
-void
-Cocoa_SetWindowFullscreen(_THIS, SDL_Window * window, SDL_VideoDisplay * display, SDL_bool fullscreen)
+void Cocoa_SetWindowFullscreen(_THIS, SDL_Window * window, SDL_VideoDisplay * display, SDL_bool fullscreen)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -2206,8 +2177,7 @@ Cocoa_SetWindowFullscreen(_THIS, SDL_Window * window, SDL_VideoDisplay * display
     ScheduleContextUpdates(data);
 }}
 
-int
-Cocoa_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
+int Cocoa_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
 { @autoreleasepool
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -2233,8 +2203,7 @@ Cocoa_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
     return 0;
 }}
 
-void*
-Cocoa_GetWindowICCProfile(_THIS, SDL_Window * window, size_t * size)
+void *Cocoa_GetWindowICCProfile(_THIS, SDL_Window * window, size_t * size)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -2270,8 +2239,7 @@ Cocoa_GetWindowICCProfile(_THIS, SDL_Window * window, size_t * size)
     return retIccProfileData;
 }}
 
-int
-Cocoa_GetWindowDisplayIndex(_THIS, SDL_Window * window)
+int Cocoa_GetWindowDisplayIndex(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     NSScreen *screen;
@@ -2309,8 +2277,7 @@ Cocoa_GetWindowDisplayIndex(_THIS, SDL_Window * window)
     return SDL_SetError("Couldn't find the display where the window is located.");
 }}
 
-int
-Cocoa_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
+int Cocoa_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     CGDirectDisplayID display_id = ((SDL_DisplayData *)display->driverdata)->display;
@@ -2333,14 +2300,12 @@ Cocoa_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
     return 0;
 }
 
-void
-Cocoa_SetWindowMouseRect(_THIS, SDL_Window * window)
+void Cocoa_SetWindowMouseRect(_THIS, SDL_Window * window)
 {
     Cocoa_UpdateClipCursor(window);
 }
 
-void
-Cocoa_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
+void Cocoa_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -2361,8 +2326,7 @@ Cocoa_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
     }
 }}
 
-void
-Cocoa_DestroyWindow(_THIS, SDL_Window * window)
+void Cocoa_DestroyWindow(_THIS, SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *data = (SDL_WindowData *) CFBridgingRelease(window->driverdata);
@@ -2384,7 +2348,7 @@ Cocoa_DestroyWindow(_THIS, SDL_Window * window)
 
         contexts = [data.nscontexts copy];
         for (SDLOpenGLContext *context in contexts) {
-            /* Calling setWindow:NULL causes the context to remove itself from the context list. */            
+            /* Calling setWindow:NULL causes the context to remove itself from the context list. */
             [context setWindow:NULL];
         }
 
@@ -2399,8 +2363,7 @@ Cocoa_DestroyWindow(_THIS, SDL_Window * window)
     window->driverdata = NULL;
 }}
 
-SDL_bool
-Cocoa_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
+SDL_bool Cocoa_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 { @autoreleasepool
 {
     NSWindow *nswindow = ((__bridge SDL_WindowData *) window->driverdata).nswindow;
@@ -2416,8 +2379,7 @@ Cocoa_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
     }
 }}
 
-SDL_bool
-Cocoa_IsWindowInFullscreenSpace(SDL_Window * window)
+SDL_bool Cocoa_IsWindowInFullscreenSpace(SDL_Window * window)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -2429,8 +2391,7 @@ Cocoa_IsWindowInFullscreenSpace(SDL_Window * window)
     }
 }}
 
-SDL_bool
-Cocoa_SetWindowFullscreenSpace(SDL_Window * window, SDL_bool state)
+SDL_bool Cocoa_SetWindowFullscreenSpace(SDL_Window * window, SDL_bool state)
 { @autoreleasepool
 {
     SDL_bool succeeded = SDL_FALSE;
@@ -2472,14 +2433,12 @@ Cocoa_SetWindowFullscreenSpace(SDL_Window * window, SDL_bool state)
     return succeeded;
 }}
 
-int
-Cocoa_SetWindowHitTest(SDL_Window * window, SDL_bool enabled)
+int Cocoa_SetWindowHitTest(SDL_Window * window, SDL_bool enabled)
 {
     return 0;  /* just succeed, the real work is done elsewhere. */
 }
 
-void
-Cocoa_AcceptDragAndDrop(SDL_Window * window, SDL_bool accept)
+void Cocoa_AcceptDragAndDrop(SDL_Window * window, SDL_bool accept)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -2490,8 +2449,7 @@ Cocoa_AcceptDragAndDrop(SDL_Window * window, SDL_bool accept)
     }
 }}
 
-int
-Cocoa_FlashWindow(_THIS, SDL_Window *window, SDL_FlashOperation operation)
+int Cocoa_FlashWindow(_THIS, SDL_Window *window, SDL_FlashOperation operation)
 { @autoreleasepool
 {
     /* Note that this is app-wide and not window-specific! */
@@ -2518,8 +2476,7 @@ Cocoa_FlashWindow(_THIS, SDL_Window *window, SDL_FlashOperation operation)
     return 0;
 }}
 
-int
-Cocoa_SetWindowOpacity(_THIS, SDL_Window * window, float opacity)
+int Cocoa_SetWindowOpacity(_THIS, SDL_Window * window, float opacity)
 { @autoreleasepool
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
diff --git a/src/video/directfb/SDL_DirectFB_WM.c b/src/video/directfb/SDL_DirectFB_WM.c
index cf9aa108e..f185cac33 100644
--- a/src/video/directfb/SDL_DirectFB_WM.c
+++ b/src/video/directfb/SDL_DirectFB_WM.c
@@ -51,8 +51,7 @@ static DFB_Theme theme_none = {
     NULL
 };
 
-static void
-DrawTriangle(IDirectFBSurface * s, int down, int x, int y, int w)
+static void DrawTriangle(IDirectFBSurface * s, int down, int x, int y, int w)
 {
     int x1, x2, x3;
     int y1, y2, y3;
@@ -75,8 +74,7 @@ DrawTriangle(IDirectFBSurface * s, int down, int x, int y, int w)
     s->FillTriangle(s, x1, y1, x2, y2, x3, y3);
 }
 
-static void
-LoadFont(_THIS, SDL_Window * window)
+static void LoadFont(_THIS, SDL_Window * window)
 {
     SDL_DFB_DEVICEDATA(_this);
     SDL_DFB_WINDOWDATA(window);
@@ -101,8 +99,7 @@ LoadFont(_THIS, SDL_Window * window)
     }
 }
 
-static void
-DrawCraption(_THIS, IDirectFBSurface * s, int x, int y, char *text)
+static void DrawCraption(_THIS, IDirectFBSurface * s, int x, int y, char *text)
 {
     DFBSurfaceTextFlags flags;
 
@@ -111,8 +108,7 @@ DrawCraption(_THIS, IDirectFBSurface * s, int x, int y, char *text)
     s->DrawString(s, text, -1, x, y, flags);
 }
 
-void
-DirectFB_WM_RedrawLayout(_THIS, SDL_Window * window)
+void DirectFB_WM_RedrawLayout(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     IDirectFBSurface *s = windata->window_surface;
@@ -180,8 +176,7 @@ DirectFB_WM_RedrawLayout(_THIS, SDL_Window * window)
     windata->wm_needs_redraw = 0;
 }
 
-DFBResult
-DirectFB_WM_GetClientSize(_THIS, SDL_Window * window, int *cw, int *ch)
+DFBResult DirectFB_WM_GetClientSize(_THIS, SDL_Window * window, int *cw, int *ch)
 {
     SDL_DFB_WINDOWDATA(window);
     IDirectFBWindow *dfbwin = windata->dfbwin;
@@ -195,8 +190,7 @@ DirectFB_WM_GetClientSize(_THIS, SDL_Window * window, int *cw, int *ch)
     return DFB_OK;
 }
 
-void
-DirectFB_WM_AdjustWindowLayout(SDL_Window * window, int flags, int w, int h)
+void DirectFB_WM_AdjustWindowLayout(SDL_Window * window, int flags, int w, int h)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -241,8 +235,7 @@ enum
     WM_POS_BOTTOM = 0x40,
 };
 
-static int
-WMIsClient(DFB_WindowData * p, int x, int y)
+static int WMIsClient(DFB_WindowData * p, int x, int y)
 {
     x -= p->client.x;
     y -= p->client.y;
@@ -253,8 +246,7 @@ WMIsClient(DFB_WindowData * p, int x, int y)
     return 1;
 }
 
-static int
-WMPos(DFB_WindowData * p, int x, int y)
+static int WMPos(DFB_WindowData * p, int x, int y)
 {
     int pos = WM_POS_NONE;
 
@@ -284,8 +276,7 @@ WMPos(DFB_WindowData * p, int x, int y)
     return pos;
 }
 
-int
-DirectFB_WM_ProcessEvent(_THIS, SDL_Window * window, DFBWindowEvent * evt)
+int DirectFB_WM_ProcessEvent(_THIS, SDL_Window * window, DFBWindowEvent * evt)
 {
     SDL_DFB_WINDOWDATA(window);
     SDL_Window *grabbed_window = SDL_GetGrabbedWindow();
diff --git a/src/video/directfb/SDL_DirectFB_dyn.c b/src/video/directfb/SDL_DirectFB_dyn.c
index e14880204..02ed371a9 100644
--- a/src/video/directfb/SDL_DirectFB_dyn.c
+++ b/src/video/directfb/SDL_DirectFB_dyn.c
@@ -45,8 +45,7 @@ DFB_SYMS
 
 static void *handle = NULL;
 
-int
-SDL_DirectFB_LoadLibrary(void)
+int SDL_DirectFB_LoadLibrary(void)
 {
     int retval = 0;
 
@@ -92,8 +91,7 @@ SDL_DirectFB_LoadLibrary(void)
     return retval;
 }
 
-void
-SDL_DirectFB_UnLoadLibrary(void)
+void SDL_DirectFB_UnLoadLibrary(void)
 {
     if (handle != NULL) {
         SDL_UnloadObject(handle);
@@ -102,16 +100,16 @@ SDL_DirectFB_UnLoadLibrary(void)
 }
 
 #else
-int
-SDL_DirectFB_LoadLibrary(void)
+
+int SDL_DirectFB_LoadLibrary(void)
 {
     return 1;
 }
 
-void
-SDL_DirectFB_UnLoadLibrary(void)
+void SDL_DirectFB_UnLoadLibrary(void)
 {
 }
+
 #endif
 
 #endif /* SDL_VIDEO_DRIVER_DIRECTFB */
diff --git a/src/video/directfb/SDL_DirectFB_events.c b/src/video/directfb/SDL_DirectFB_events.c
index ca6901747..47a8e6206 100644
--- a/src/video/directfb/SDL_DirectFB_events.c
+++ b/src/video/directfb/SDL_DirectFB_events.c
@@ -91,8 +91,7 @@ static void UnicodeToUtf8( Uint16 w , char *utf8buf)
     }
 }
 
-static void
-FocusAllMice(_THIS, SDL_Window *window)
+static void FocusAllMice(_THIS, SDL_Window *window)
 {
 #if USE_MULTI_API
     SDL_DFB_DEVICEDATA(_this);
@@ -106,8 +105,7 @@ FocusAllMice(_THIS, SDL_Window *window)
 }
 
 
-static void
-FocusAllKeyboards(_THIS, SDL_Window *window)
+static void FocusAllKeyboards(_THIS, SDL_Window *window)
 {
 #if USE_MULTI_API
     SDL_DFB_DEVICEDATA(_this);
@@ -120,8 +118,7 @@ FocusAllKeyboards(_THIS, SDL_Window *window)
 #endif
 }
 
-static void
-MotionAllMice(_THIS, int x, int y)
+static void MotionAllMice(_THIS, int x, int y)
 {
 #if USE_MULTI_API
     SDL_DFB_DEVICEDATA(_this);
@@ -136,8 +133,7 @@ MotionAllMice(_THIS, int x, int y)
 #endif
 }
 
-static int
-KbdIndex(_THIS, int id)
+static int KbdIndex(_THIS, int id)
 {
     SDL_DFB_DEVICEDATA(_this);
     int index;
@@ -149,8 +145,7 @@ KbdIndex(_THIS, int id)
     return -1;
 }
 
-static int
-ClientXY(DFB_WindowData * p, int *x, int *y)
+static int ClientXY(DFB_WindowData * p, int *x, int *y)
 {
     int cx, cy;
 
@@ -169,8 +164,7 @@ ClientXY(DFB_WindowData * p, int *x, int *y)
     return 1;
 }
 
-static void
-ProcessWindowEvent(_THIS, SDL_Window *sdlwin, DFBWindowEvent * evt)
+static void ProcessWindowEvent(_THIS, SDL_Window *sdlwin, DFBWindowEvent * evt)
 {
     SDL_DFB_DEVICEDATA(_this);
     SDL_DFB_WINDOWDATA(sdlwin);
@@ -303,8 +297,7 @@ ProcessWindowEvent(_THIS, SDL_Window *sdlwin, DFBWindowEvent * evt)
         printf("Event Clazz %d\n", evt->clazz);
 }
 
-static void
-ProcessInputEvent(_THIS, DFBInputEvent * ievt)
+static void ProcessInputEvent(_THIS, DFBInputEvent * ievt)
 {
     SDL_DFB_DEVICEDATA(_this);
     SDL_Keysym keysym;
@@ -406,8 +399,7 @@ ProcessInputEvent(_THIS, DFBInputEvent * ievt)
     }
 }
 
-void
-DirectFB_PumpEventsWindow(_THIS)
+void DirectFB_PumpEventsWindow(_THIS)
 {
     SDL_DFB_DEVICEDATA(_this);
     DFBInputEvent ievt;
@@ -448,8 +440,7 @@ DirectFB_PumpEventsWindow(_THIS)
     }
 }
 
-void
-DirectFB_InitOSKeymap(_THIS, SDL_Scancode * keymap, int numkeys)
+void DirectFB_InitOSKeymap(_THIS, SDL_Scancode * keymap, int numkeys)
 {
     int i;
 
@@ -576,8 +567,7 @@ DirectFB_InitOSKeymap(_THIS, SDL_Scancode * keymap, int numkeys)
 
 }
 
-static SDL_Keysym *
-DirectFB_TranslateKey(_THIS, DFBWindowEvent * evt, SDL_Keysym * keysym, Uint32 *unicode)
+static SDL_Keysym *DirectFB_TranslateKey(_THIS, DFBWindowEvent * evt, SDL_Keysym * keysym, Uint32 *unicode)
 {
     SDL_DFB_DEVICEDATA(_this);
     int kbd_idx = 0; /* Window events lag the device source KbdIndex(_this, evt->device_id); */
@@ -606,8 +596,7 @@ DirectFB_TranslateKey(_THIS, DFBWindowEvent * evt, SDL_Keysym * keysym, Uint32 *
     return keysym;
 }
 
-static SDL_Keysym *
-DirectFB_TranslateKeyInputEvent(_THIS, DFBInputEvent * evt,
+static SDL_Keysym *DirectFB_TranslateKeyInputEvent(_THIS, DFBInputEvent * evt,
                                 SDL_Keysym * keysym, Uint32 *unicode)
 {
     SDL_DFB_DEVICEDATA(_this);
@@ -636,8 +625,7 @@ DirectFB_TranslateKeyInputEvent(_THIS, DFBInputEvent * evt,
     return keysym;
 }
 
-static int
-DirectFB_TranslateButton(DFBInputDeviceButtonIdentifier button)
+static int DirectFB_TranslateButton(DFBInputDeviceButtonIdentifier button)
 {
     switch (button) {
     case DIBI_LEFT:
@@ -651,9 +639,7 @@ DirectFB_TranslateButton(DFBInputDeviceButtonIdentifier button)
     }
 }
 
-static DFBEnumerationResult
-EnumKeyboards(DFBInputDeviceID device_id,
-                DFBInputDeviceDescription desc, void *callbackdata)
+static DFBEnumerationResult EnumKeyboards(DFBInputDeviceID device_id, DFBInputDeviceDescription desc, void *callbackdata)
 {
     cb_data *cb = callbackdata;
     DFB_DeviceData *devdata = cb->devdata;
@@ -700,8 +686,7 @@ EnumKeyboards(DFBInputDeviceID device_id,
     return DFENUM_OK;
 }
 
-void
-DirectFB_InitKeyboard(_THIS)
+void DirectFB_InitKeyboard(_THIS)
 {
     SDL_DFB_DEVICEDATA(_this);
     cb_data cb;
@@ -730,8 +715,7 @@ DirectFB_InitKeyboard(_THIS)
     }
 }
 
-void
-DirectFB_QuitKeyboard(_THIS)
+void DirectFB_QuitKeyboard(_THIS)
 {
     /* SDL_DFB_DEVICEDATA(_this); */
 }
diff --git a/src/video/directfb/SDL_DirectFB_modes.c b/src/video/directfb/SDL_DirectFB_modes.c
index 7d853b313..135b0843a 100644
--- a/src/video/directfb/SDL_DirectFB_modes.c
+++ b/src/video/directfb/SDL_DirectFB_modes.c
@@ -42,8 +42,7 @@ struct modes_callback_t
     SDL_DisplayMode *modelist;
 };
 
-static DFBEnumerationResult
-EnumModesCallback(int width, int height, int bpp, void *data)
+static DFBEnumerationResult EnumModesCallback(int width, int height, int bpp, void *data)
 {
     struct modes_callback_t *modedata = (struct modes_callback_t *) data;
     SDL_DisplayMode mode;
@@ -61,9 +60,7 @@ EnumModesCallback(int width, int height, int bpp, void *data)
     return DFENUM_OK;
 }
 
-static DFBEnumerationResult
-EnumScreensCallback(DFBScreenID screen_id, DFBScreenDescription desc,
-          void *callbackdata)
+static DFBEnumerationResult EnumScreensCallback(DFBScreenID screen_id, DFBScreenDescription desc, void *callbackdata)
 {
     struct screen_callback_t *devdata = (struct screen_callback_t *) callbackdata;
 
@@ -71,9 +68,7 @@ EnumScreensCallback(DFBScreenID screen_id, DFBScreenDescription desc,
     return DFENUM_OK;
 }
 
-static DFBEnumerationResult
-EnumLayersCallback(DFBDisplayLayerID layer_id, DFBDisplayLayerDescription desc,
-         void *callbackdata)
+static DFBEnumerationResult EnumLayersCallback(DFBDisplayLayerID layer_id, DFBDisplayLayerDescription desc, void *callbackdata)
 {
     struct screen_callback_t *devdata = (struct screen_callback_t *) callbackdata;
 
@@ -89,8 +84,7 @@ EnumLayersCallback(DFBDisplayLayerID layer_id, DFBDisplayLayerDescription desc,
     return DFENUM_OK;
 }
 
-static void
-CheckSetDisplayMode(_THIS, SDL_VideoDisplay * display, DFB_DisplayData * data, SDL_DisplayMode * mode)
+static void CheckSetDisplayMode(_THIS, SDL_VideoDisplay * display, DFB_DisplayData * data, SDL_DisplayMode * mode)
 {
     SDL_DFB_DEVICEDATA(_this);
     DFBDisplayLayerConfig config;
@@ -125,8 +119,7 @@ CheckSetDisplayMode(_THIS, SDL_VideoDisplay * display, DFB_DisplayData * data, S
 }
 
 
-void
-DirectFB_SetContext(_THIS, SDL_Window *window)
+void DirectFB_SetContext(_THIS, SDL_Window *window)
 {
 #if (DFB_VERSION_ATLEAST(1,0,0))
     /* FIXME: does not work on 1.0/1.2 with radeon driver
@@ -144,8 +137,7 @@ DirectFB_SetContext(_THIS, SDL_Window *window)
 #endif
 }
 
-void
-DirectFB_InitModes(_THIS)
+void DirectFB_InitModes(_THIS)
 {
     SDL_DFB_DEVICEDATA(_this);
     IDirectFBDisplayLayer *layer = NULL;
@@ -269,8 +261,7 @@ DirectFB_InitModes(_THIS)
     return;
 }
 
-void
-DirectFB_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
+void DirectFB_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
 {
     SDL_DFB_DEVICEDATA(_this);
     DFB_DisplayData *dispdata = (DFB_DisplayData *) display->driverdata;
@@ -304,8 +295,7 @@ error:
     return;
 }
 
-int
-DirectFB_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+int DirectFB_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
 {
     /*
      * FIXME: video mode switch is currently broken for 1.2.0
@@ -375,8 +365,7 @@ DirectFB_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mod
     return -1;
 }
 
-void
-DirectFB_QuitModes(_THIS)
+void DirectFB_QuitModes(_THIS)
 {
     SDL_DisplayMode tmode;
     int i;
diff --git a/src/video/directfb/SDL_DirectFB_mouse.c b/src/video/directfb/SDL_DirectFB_mouse.c
index 4d5915701..d0e1f291c 100644
--- a/src/video/directfb/SDL_DirectFB_mouse.c
+++ b/src/video/directfb/SDL_DirectFB_mouse.c
@@ -74,8 +74,7 @@ static const char *arrow[] = {
     "                                ",
 };
 
-static SDL_Cursor *
-DirectFB_CreateDefaultCursor(void)
+static SDL_Cursor *DirectFB_CreateDefaultCursor(void)
 {
     SDL_VideoDevice *dev = SDL_GetVideoDevice();
 
@@ -127,8 +126,7 @@ DirectFB_CreateDefaultCursor(void)
 }
 
 /* Create a cursor from a surface */
-static SDL_Cursor *
-DirectFB_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
+static SDL_Cursor *DirectFB_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
 {
     SDL_VideoDevice *dev = SDL_GetVideoDevice();
 
@@ -174,8 +172,7 @@ DirectFB_CreateCursor(SDL_Surface * surface, int hot_x, int hot_y)
 }
 
 /* Show the specified cursor, or hide if cursor is NULL */
-static int
-DirectFB_ShowCursor(SDL_Cursor * cursor)
+static int DirectFB_ShowCursor(SDL_Cursor * cursor)
 {
     SDL_DFB_CURSORDATA(cursor);
     SDL_Window *window;
@@ -215,8 +212,7 @@ DirectFB_ShowCursor(SDL_Cursor * cursor)
 }
 
 /* Free a window manager cursor */
-static void
-DirectFB_FreeCursor(SDL_Cursor * cursor)
+static void DirectFB_FreeCursor(SDL_Cursor * cursor)
 {
     SDL_DFB_CURSORDATA(cursor);
 
@@ -226,8 +222,7 @@ DirectFB_FreeCursor(SDL_Cursor * cursor)
 }
 
 /* Warp the mouse to (x,y) */
-static void
-DirectFB_WarpMouse(SDL_Window * window, int x, int y)
+static void DirectFB_WarpMouse(SDL_Window * window, int x, int y)
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     DFB_DisplayData *dispdata = (DFB_DisplayData *) display->driverdata;
@@ -252,9 +247,7 @@ static void DirectFB_FreeMouse(SDL_Mouse * mouse);
 
 static int id_mask;
 
-static DFBEnumerationResult
-EnumMice(DFBInputDeviceID device_id, DFBInputDeviceDescription desc,
-         void *callbackdata)
+static DFBEnumerationResult EnumMice(DFBInputDeviceID device_id, DFBInputDeviceDescription desc, void *callbackdata)
 {
     DFB_DeviceData *devdata = callbackdata;
 
@@ -277,8 +270,7 @@ EnumMice(DFBInputDeviceID device_id, DFBInputDeviceDescription desc,
     return DFENUM_OK;
 }
 
-void
-DirectFB_InitMouse(_THIS)
+void DirectFB_InitMouse(_THIS)
 {
     SDL_DFB_DEVICEDATA(_this);
 
@@ -310,8 +302,7 @@ DirectFB_InitMouse(_THIS)
     }
 }
 
-void
-DirectFB_QuitMouse(_THIS)
+void DirectFB_QuitMouse(_THIS)
 {
     SDL_DFB_DEVICEDATA(_this);
 
@@ -324,15 +315,13 @@ DirectFB_QuitMouse(_THIS)
 
 
 /* This is called when a mouse motion event occurs */
-static void
-DirectFB_MoveCursor(SDL_Cursor * cursor)
+static void DirectFB_MoveCursor(SDL_Cursor * cursor)
 {
 
 }
 
 /* Warp the mouse to (x,y) */
-static void
-DirectFB_WarpMouse(SDL_Mouse * mouse, SDL_Window * window, int x, int y)
+static void DirectFB_WarpMouse(SDL_Mouse * mouse, SDL_Window * window, int x, int y)
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     DFB_DisplayData *dispdata = (DFB_DisplayData *) display->driverdata;
@@ -350,16 +339,14 @@ DirectFB_WarpMouse(SDL_Mouse * mouse, SDL_Window * window, int x, int y)
 }
 
 /* Free the mouse when it's time */
-static void
-DirectFB_FreeMouse(SDL_Mouse * mouse)
+static void DirectFB_FreeMouse(SDL_Mouse * mouse)
 {
     /* nothing yet */
 }
 
 #else /* USE_MULTI_API */
 
-void
-DirectFB_InitMouse(_THIS)
+void DirectFB_InitMouse(_THIS)
 {
     SDL_DFB_DEVICEDATA(_this);
 
@@ -375,12 +362,10 @@ DirectFB_InitMouse(_THIS)
     devdata->num_mice = 1;
 }
 
-void
-DirectFB_QuitMouse(_THIS)
+void DirectFB_QuitMouse(_THIS)
 {
 }
 
-
 #endif
 
 #endif /* SDL_VIDEO_DRIVER_DIRECTFB */
diff --git a/src/video/directfb/SDL_DirectFB_opengl.c b/src/video/directfb/SDL_DirectFB_opengl.c
index 42a9d8b58..1c146a0e1 100644
--- a/src/video/directfb/SDL_DirectFB_opengl.c
+++ b/src/video/directfb/SDL_DirectFB_opengl.c
@@ -60,8 +60,7 @@ struct SDL_GLDriverData
 
 static void DirectFB_GL_UnloadLibrary(_THIS);
 
-int
-DirectFB_GL_Initialize(_THIS)
+int DirectFB_GL_Initialize(_THIS)
 {
     if (_this->gl_data) {
         return 0;
@@ -91,8 +90,7 @@ DirectFB_GL_Initialize(_THIS)
     return 0;
 }
 
-void
-DirectFB_GL_Shutdown(_THIS)
+void DirectFB_GL_Shutdown(_THIS)
 {
     if (!_this->gl_data || (--_this->gl_data->initialized > 0)) {
         return;
@@ -104,8 +102,7 @@ DirectFB_GL_Shutdown(_THIS)
     _this->gl_data = NULL;
 }
 
-int
-DirectFB_GL_LoadLibrary(_THIS, const char *path)
+int DirectFB_GL_LoadLibrary(_THIS, const char *path)
 {
     void *handle = NULL;
 
@@ -146,8 +143,7 @@ DirectFB_GL_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-static void
-DirectFB_GL_UnloadLibrary(_THIS)
+static void DirectFB_GL_UnloadLibrary(_THIS)
 {
  #if 0
     int ret = GL_UnloadObject(_this->gl_config.dll_handle);
@@ -160,8 +156,7 @@ DirectFB_GL_UnloadLibrary(_THIS)
     _this->gl_data = NULL;
 }
 
-void *
-DirectFB_GL_GetProcAddress(_THIS, const char *proc)
+void *DirectFB_GL_GetProcAddress(_THIS, const char *proc)
 {
     void *handle;
 
@@ -169,8 +164,7 @@ DirectFB_GL_GetProcAddress(_THIS, const char *proc)
     return GL_LoadFunction(handle, proc);
 }
 
-SDL_GLContext
-DirectFB_GL_CreateContext(_THIS, SDL_Window * window)
+SDL_GLContext DirectFB_GL_CreateContext(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     DirectFB_GLContext *context;
@@ -202,8 +196,7 @@ DirectFB_GL_CreateContext(_THIS, SDL_Window * window)
     return NULL;
 }
 
-int
-DirectFB_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
+int DirectFB_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
 {
     DirectFB_GLContext *ctx = (DirectFB_GLContext *) context;
     DirectFB_GLContext *p;
@@ -227,20 +220,17 @@ DirectFB_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
     return -1;
 }
 
-int
-DirectFB_GL_SetSwapInterval(_THIS, int interval)
+int DirectFB_GL_SetSwapInterval(_THIS, int interval)
 {
     return SDL_Unsupported();
 }
 
-int
-DirectFB_GL_GetSwapInterval(_THIS)
+int DirectFB_GL_GetSwapInterval(_THIS)
 {
     return 0;
 }
 
-int
-DirectFB_GL_SwapWindow(_THIS, SDL_Window * window)
+int DirectFB_GL_SwapWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     DirectFB_GLContext *p;
@@ -265,8 +255,7 @@ DirectFB_GL_SwapWindow(_THIS, SDL_Window * window)
     return -1;
 }
 
-void
-DirectFB_GL_DeleteContext(_THIS, SDL_GLContext context)
+void DirectFB_GL_DeleteContext(_THIS, SDL_GLContext context)
 {
     DirectFB_GLContext *ctx = (DirectFB_GLContext *) context;
     DirectFB_GLContext *p;
@@ -285,8 +274,7 @@ DirectFB_GL_DeleteContext(_THIS, SDL_GLContext context)
     SDL_DFB_FREE(ctx);
 }
 
-void
-DirectFB_GL_FreeWindowContexts(_THIS, SDL_Window * window)
+void DirectFB_GL_FreeWindowContexts(_THIS, SDL_Window * window)
 {
     DirectFB_GLContext *p;
 
@@ -299,8 +287,7 @@ DirectFB_GL_FreeWindowContexts(_THIS, SDL_Window * window)
         }
 }
 
-void
-DirectFB_GL_ReAllocWindowContexts(_THIS, SDL_Window * window)
+void DirectFB_GL_ReAllocWindowContexts(_THIS, SDL_Window * window)
 {
     DirectFB_GLContext *p;
 
@@ -315,8 +302,7 @@ DirectFB_GL_ReAllocWindowContexts(_THIS, SDL_Window * window)
             }
 }
 
-void
-DirectFB_GL_DestroyWindowContexts(_THIS, SDL_Window * window)
+void DirectFB_GL_DestroyWindowContexts(_THIS, SDL_Window * window)
 {
     DirectFB_GLContext *p;
 
diff --git a/src/video/directfb/SDL_DirectFB_render.c b/src/video/directfb/SDL_DirectFB_render.c
index 00460c5a1..40f0e1a0c 100644
--- a/src/video/directfb/SDL_DirectFB_render.c
+++ b/src/video/directfb/SDL_DirectFB_render.c
@@ -79,16 +79,14 @@ typedef struct
 #endif
 } DirectFB_TextureData;
 
-static SDL_INLINE void
-SDLtoDFBRect(const SDL_Rect * sr, DFBRectangle * dr)
+static void SDLtoDFBRect(const SDL_Rect * sr, DFBRectangle * dr)
 {
     dr->x = sr->x;
     dr->y = sr->y;
     dr->h = sr->h;
     dr->w = sr->w;
 }
-static SDL_INLINE void
-SDLtoDFBRect_Float(const SDL_FRect * sr, DFBRectangle * dr)
+static void SDLtoDFBRect_Float(const SDL_FRect * sr, DFBRectangle * dr)
 {
     dr->x = sr->x;
     dr->y = sr->y;
@@ -97,8 +95,7 @@ SDLtoDFBRect_Float(const SDL_FRect * sr, DFBRectangle * dr)
 }
 
 
-static int
-TextureHasAlpha(DirectFB_TextureData * data)
+static int TextureHasAlpha(DirectFB_TextureData * data)
 {
     /* Drawing primitive ? */
     if (!data)
@@ -149,9 +146,7 @@ static SDL_INLINE IDirectFBWindow *get_dfb_window(SDL_Window *window)
     return wm_info.info.dfb.window;
 }
 
-static void
-SetBlendMode(DirectFB_RenderData * data, int blendMode,
-             DirectFB_TextureData * source)
+static void SetBlendMode(DirectFB_RenderData * data, int blendMode, DirectFB_TextureData * source)
 {
     IDirectFBSurface *destsurf = data->target;
 
@@ -211,8 +206,7 @@ SetBlendMode(DirectFB_RenderData * data, int blendMode,
     }
 }
 
-static int
-PrepareDraw(SDL_Renderer * renderer, const SDL_RenderCommand *cmd)
+static int PrepareDraw(SDL_Renderer * renderer, const SDL_RenderCommand *cmd)
 {
     DirectFB_RenderData *data = (DirectFB_RenderData *) renderer->driverdata;
     IDirectFBSurface *destsurf = data->target;
@@ -246,8 +240,7 @@ PrepareDraw(SDL_Renderer * renderer, const SDL_RenderCommand *cmd)
     return -1;
 }
 
-static void
-DirectFB_WindowEvent(SDL_Renderer * renderer, const SDL_WindowEvent *event)
+static void DirectFB_WindowEvent(SDL_Renderer * renderer, const SDL_WindowEvent *event)
 {
     SDL_DFB_RENDERERDATA(renderer);
 
@@ -259,8 +252,7 @@ DirectFB_WindowEvent(SDL_Renderer * renderer, const SDL_WindowEvent *event)
    }
 }
 
-static void
-DirectFB_ActivateRenderer(SDL_Renderer * renderer)
+static void DirectFB_ActivateRenderer(SDL_Renderer * renderer)
 {
     SDL_DFB_RENDERERDATA(renderer);
 
@@ -269,8 +261,7 @@ DirectFB_ActivateRenderer(SDL_Renderer * renderer)
     }
 }
 
-static int
-DirectFB_AcquireVidLayer(SDL_Renderer * renderer, SDL_Texture * texture)
+static int DirectFB_AcquireVidLayer(SDL_Renderer * renderer, SDL_Texture * texture)
 {
     SDL_Window *window = renderer->window;
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -341,8 +332,7 @@ void DirectFB_SetTexturePalette(SDL_Renderer *renderer, SDL_Texture *texture, SD
     data->palette->SetEntries(data->palette, dfbpal, pal->ncolors, 0);
 }
 
-static int
-DirectFB_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+static int DirectFB_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 {
     SDL_Window *window = renderer->window;
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -437,8 +427,7 @@ DirectFB_CreateTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 }
 
 #if 0
-static int
-DirectFB_SetTextureScaleMode(SDL_Renderer * renderer, SDL_Texture * texture)
+static int DirectFB_SetTextureScaleMode(SDL_Renderer * renderer, SDL_Texture * texture)
 {
 #if (DFB_VERSION_ATLEAST(1,2,0))
 
@@ -466,8 +455,7 @@ DirectFB_SetTextureScaleMode(SDL_Renderer * renderer, SDL_Texture * texture)
 }
 #endif
 
-static int
-DirectFB_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
+static int DirectFB_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
                        const SDL_Rect * rect, const void *pixels, int pitch)
 {
     DirectFB_TextureData *data = (DirectFB_TextureData *) texture->driverdata;
@@ -523,8 +511,7 @@ DirectFB_UpdateTexture(SDL_Renderer * renderer, SDL_Texture * texture,
 
 }
 
-static int
-DirectFB_LockTexture(SDL_Renderer * renderer, SDL_Texture * texture,
+static int DirectFB_LockTexture(SDL_Renderer * renderer, SDL_Texture * texture,
                      const SDL_Rect * rect, void **pixels, int *pitch)
 {
     DirectFB_TextureData *texturedata =
@@ -561,8 +548,7 @@ DirectFB_LockTexture(SDL_Renderer * renderer, SDL_Texture * texture,
     return -1;
 }
 
-static void
-DirectFB_UnlockTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+static void DirectFB_UnlockTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 {
     DirectFB_TextureData *texturedata =
         (DirectFB_TextureData *) texture->driverdata;
@@ -575,14 +561,12 @@ DirectFB_UnlockTexture(SDL_Renderer * renderer, SDL_Texture * texture)
     }
 }
 
-static void
-DirectFB_SetTextureScaleMode()
+static void DirectFB_SetTextureScaleMode()
 {
 }
 
 #if 0
-static void
-DirectFB_DirtyTexture(SDL_Renderer * renderer, SDL_Texture * texture,
+static void DirectFB_DirtyTexture(SDL_Renderer * renderer, SDL_Texture * texture,
                       int numrects, const SDL_Rect * rects)
 {
     DirectFB_TextureData *data = (DirectFB_TextureData *) texture->driverdata;
@@ -611,14 +595,12 @@ static int DirectFB_SetRenderTarget(SDL_Renderer * renderer, SDL_Texture * textu
 }
 
 
-static int
-DirectFB_QueueSetViewport(SDL_Renderer * renderer, SDL_RenderCommand *cmd)
+static int DirectFB_QueueSetViewport(SDL_Renderer * renderer, SDL_RenderCommand *cmd)
 {
     return 0;  /* nothing to do in this backend. */
 }
 
-static int
-DirectFB_QueueDrawPoints(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FPoint *points, int count)
+static int DirectFB_QueueDrawPoints(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FPoint *points, int count)
 {
     const size_t len = count * sizeof(SDL_FPoint);
     SDL_FPoint *verts = (SDL_FPoint *) SDL_AllocateRenderVertices(renderer, len, 0, &cmd->data.draw.first);
@@ -632,8 +614,7 @@ DirectFB_QueueDrawPoints(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const
     return 0;
 }
 
-static int
-DirectFB_QueueGeometry(SDL_Renderer *renderer, SDL_RenderCommand *cmd, SDL_Texture *texture,
+static int DirectFB_QueueGeometry(SDL_Renderer *renderer, SDL_RenderCommand *cmd, SDL_Texture *texture,
         const float *xy, int xy_stride, const SDL_Color *color, int color_stride, const float *uv, int uv_stride,
         int num_vertices, const void *indices, int num_indices, int size_indices,
         float scale_x, float scale_y)
@@ -685,8 +666,7 @@ DirectFB_QueueGeometry(SDL_Renderer *renderer, SDL_RenderCommand *cmd, SDL_Textu
     return 0;
 }
 
-static int
-DirectFB_QueueFillRects(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FRect * rects, int count)
+static int DirectFB_QueueFillRects(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const SDL_FRect * rects, int count)
 {
     const size_t len = count * sizeof(SDL_FRect);
     SDL_FRect *verts = (SDL_FRect *) SDL_AllocateRenderVertices(renderer, len, 0, &cmd->data.draw.first);
@@ -700,8 +680,7 @@ DirectFB_QueueFillRects(SDL_Renderer * renderer, SDL_RenderCommand *cmd, const S
     return 0;
 }
 
-static int
-DirectFB_QueueCopy(SDL_Renderer * renderer, SDL_RenderCommand *cmd, SDL_Texture * texture,
+static int DirectFB_QueueCopy(SDL_Renderer * renderer, SDL_RenderCommand *cmd, SDL_Texture * texture,
              const SDL_Rect * srcrect, const SDL_FRect * dstrect)
 {
     DFBRectangle *verts = (DFBRectangle *) SDL_AllocateRenderVertices(renderer, 2 * sizeof(DFBRectangle), 0, &cmd->data.draw.first);
@@ -718,8 +697,7 @@ DirectFB_QueueCopy(SDL_Renderer * renderer, SDL_RenderCommand *cmd, SDL_Texture
     return 0;
 }
 
-static int
-DirectFB_RunCommandQueue(SDL_Renderer * renderer, SDL_RenderCommand *cmd, void *vertices, size_t vertsize)
+static int DirectFB_RunCommandQueue(SDL_Renderer * renderer, SDL_RenderCommand *cmd, void *vertices, size_t vertsize)
 {
     /* !!! FIXME: there are probably some good optimization wins in here if someone wants to look it over. */
     DirectFB_RenderData *data = (DirectFB_RenderData *) renderer->driverdata;
@@ -1026,8 +1004,7 @@ DirectFB_RunCommandQueue(SDL_Renderer * renderer, SDL_RenderCommand *cmd, void *
 }
 
 
-static int
-DirectFB_RenderPresent(SDL_Renderer * renderer)
+static int DirectFB_RenderPresent(SDL_Renderer * renderer)
 {
     DirectFB_RenderData *data = (DirectFB_RenderData *) renderer->driverdata;
     SDL_Window *window = renderer->window;
@@ -1060,8 +1037,7 @@ DirectFB_RenderPresent(SDL_Renderer * renderer)
     return 0;
 }
 
-static void
-DirectFB_DestroyTexture(SDL_Renderer * renderer, SDL_Texture * texture)
+static void DirectFB_DestroyTexture(SDL_Renderer * renderer, SDL_Texture * texture)
 {
     DirectFB_TextureData *data = (DirectFB_TextureData *) texture->driverdata;
 
@@ -1086,8 +1062,7 @@ DirectFB_DestroyTexture(SDL_Renderer * renderer, SDL_Texture * texture)
     texture->driverdata = NULL;
 }
 
-static void
-DirectFB_DestroyRenderer(SDL_Renderer * renderer)
+static void DirectFB_DestroyRenderer(SDL_Renderer * renderer)
 {
     DirectFB_RenderData *data = (DirectFB_RenderData *) renderer->driverdata;
 #if 0
@@ -1101,8 +1076,7 @@ DirectFB_DestroyRenderer(SDL_Renderer * renderer)
     SDL_free(renderer);
 }
 
-static int
-DirectFB_RenderReadPixels(SDL_Renderer * renderer, const SDL_Rect * rect,
+static int DirectFB_RenderReadPixels(SDL_Renderer * renderer, const SDL_Rect * rect,
                      Uint32 format, void * pixels, int pitch)
 {
     Uint32 sdl_format;
@@ -1129,8 +1103,7 @@ DirectFB_RenderReadPixels(SDL_Renderer * renderer, const SDL_Rect * rect,
 }
 
 #if 0
-static int
-DirectFB_RenderWritePixels(SDL_Renderer * renderer, const SDL_Rect * rect,
+static int DirectFB_RenderWritePixels(SDL_Renderer * renderer, const SDL_Rect * rect,
                       Uint32 format, const void * pixels, int pitch)
 {
     SDL_Window *window = renderer->window;
@@ -1157,8 +1130,7 @@ DirectFB_RenderWritePixels(SDL_Renderer * renderer, const SDL_Rect * rect,
 #endif
 
 
-SDL_Renderer *
-DirectFB_CreateRenderer(SDL_Window * window, Uint32 flags)
+SDL_Renderer *DirectFB_CreateRenderer(SDL_Window * window, Uint32 flags)
 {
     IDirectFBSurface *winsurf = get_dfb_surface(window);
     /*SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);*/
diff --git a/src/video/directfb/SDL_DirectFB_shape.c b/src/video/directfb/SDL_DirectFB_shape.c
index aef6bfd6d..a6c9aa092 100644
--- a/src/video/directfb/SDL_DirectFB_shape.c
+++ b/src/video/directfb/SDL_DirectFB_shape.c
@@ -28,8 +28,8 @@
 
 #include "../SDL_shape_internals.h"
 
-SDL_WindowShaper*
-DirectFB_CreateShaper(SDL_Window* window) {
+SDL_WindowShaper *DirectFB_CreateShaper(SDL_Window* window)
+{
     SDL_WindowShaper* result = NULL;
     SDL_ShapeData* data;
     int resized_properly;
@@ -58,8 +58,8 @@ DirectFB_CreateShaper(SDL_Window* window) {
     return result;
 }
 
-int
-DirectFB_ResizeWindowShape(SDL_Window* window) {
+int DirectFB_ResizeWindowShape(SDL_Window* window)
+{
     SDL_ShapeData* data = window->shaper->driverdata;
     SDL_assert(data != NULL);
 
@@ -73,8 +73,8 @@ DirectFB_ResizeWindowShape(SDL_Window* window) {
     return 0;
 }
 
-int
-DirectFB_SetWindowShape(SDL_WindowShaper *shaper,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode) {
+int DirectFB_SetWindowShape(SDL_WindowShaper *shaper,SDL_Surface *shape,SDL_WindowShapeMode *shape_mode)
+{
 
     if(shaper == NULL || shape == NULL || shaper->driverdata == NULL)
         return -1;
diff --git a/src/video/directfb/SDL_DirectFB_video.c b/src/video/directfb/SDL_DirectFB_video.c
index d50e3161e..529273248 100644
--- a/src/video/directfb/SDL_DirectFB_video.c
+++ b/src/video/directfb/SDL_DirectFB_video.c
@@ -74,16 +74,14 @@ static const DirectFBAccelerationMaskNames(acceleration_mask);
 
 /* DirectFB driver bootstrap functions */
 
-static void
-DirectFB_DeleteDevice(SDL_VideoDevice * device)
+static void DirectFB_DeleteDevice(SDL_VideoDevice * device)
 {
     SDL_DirectFB_UnLoadLibrary();
     SDL_DFB_FREE(device->driverdata);
     SDL_DFB_FREE(device);
 }
 
-static SDL_VideoDevice *
-DirectFB_CreateDevice(void)
+static SDL_VideoDevice *DirectFB_CreateDevice(void)
 {
     SDL_VideoDevice *device;
 
@@ -154,8 +152,7 @@ DirectFB_CreateDevice(void)
     return (0);
 }
 
-static void
-DirectFB_DeviceInformation(IDirectFB * dfb)
+static void DirectFB_DeviceInformation(IDirectFB * dfb)
 {
     DFBGraphicsDeviceDescription desc;
     int n;
@@ -206,8 +203,7 @@ static int readBoolEnv(const char *env_name, int def_val)
         return def_val;
 }
 
-static int
-DirectFB_VideoInit(_THIS)
+static int DirectFB_VideoInit(_THIS)
 {
     IDirectFB *dfb = NULL;
     DFB_DeviceData *devdata = NULL;
@@ -282,8 +278,7 @@ DirectFB_VideoInit(_THIS)
     return -1;
 }
 
-static void
-DirectFB_VideoQuit(_THIS)
+static void DirectFB_VideoQuit(_THIS)
 {
     DFB_DeviceData *devdata = (DFB_DeviceData *) _this->driverdata;
 
@@ -379,8 +374,7 @@ static const struct {
     { DSPF_UNKNOWN, SDL_PIXELFORMAT_YVYU },                        /**< Packed mode: Y0+V0+Y1+U0 (1 pla */
 };
 
-Uint32
-DirectFB_DFBToSDLPixelFormat(DFBSurfacePixelFormat pixelformat)
+Uint32 DirectFB_DFBToSDLPixelFormat(DFBSurfacePixelFormat pixelformat)
 {
     int i;
 
@@ -392,8 +386,7 @@ DirectFB_DFBToSDLPixelFormat(DFBSurfacePixelFormat pixelformat)
     return SDL_PIXELFORMAT_UNKNOWN;
 }
 
-DFBSurfacePixelFormat
-DirectFB_SDLToDFBPixelFormat(Uint32 format)
+DFBSurfacePixelFormat DirectFB_SDLToDFBPixelFormat(Uint32 format)
 {
     int i;
 
diff --git a/src/video/directfb/SDL_DirectFB_window.c b/src/video/directfb/SDL_DirectFB_window.c
index f88fb9dfc..91be03b23 100644
--- a/src/video/directfb/SDL_DirectFB_window.c
+++ b/src/video/directfb/SDL_DirectFB_window.c
@@ -35,8 +35,7 @@
 
 #include "../SDL_pixels_c.h"
 
-int
-DirectFB_CreateWindow(_THIS, SDL_Window * window)
+int DirectFB_CreateWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_DEVICEDATA(_this);
     SDL_DFB_DISPLAYDATA(window);
@@ -173,14 +172,12 @@ DirectFB_CreateWindow(_THIS, SDL_Window * window)
     return -1;
 }
 
-int
-DirectFB_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
+int DirectFB_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
 {
     return SDL_Unsupported();
 }
 
-void
-DirectFB_SetWindowTitle(_THIS, SDL_Window * window)
+void DirectFB_SetWindowTitle(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -192,8 +189,7 @@ DirectFB_SetWindowTitle(_THIS, SDL_Window * window)
     }
 }
 
-void
-DirectFB_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
+void DirectFB_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
 {
     SDL_DFB_DEVICEDATA(_this);
     SDL_DFB_WINDOWDATA(window);
@@ -242,8 +238,7 @@ DirectFB_SetWindowIcon(_THIS, SDL_Window * window, SDL_Surface * icon)
     return;
 }
 
-void
-DirectFB_SetWindowPosition(_THIS, SDL_Window * window)
+void DirectFB_SetWindowPosition(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     int x, y;
@@ -255,8 +250,7 @@ DirectFB_SetWindowPosition(_THIS, SDL_Window * window)
     SDL_DFB_CHECK(windata->dfbwin->MoveTo(windata->dfbwin, x, y));
 }
 
-void
-DirectFB_SetWindowSize(_THIS, SDL_Window * window)
+void DirectFB_SetWindowSize(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -294,8 +288,7 @@ DirectFB_SetWindowSize(_THIS, SDL_Window * window)
     return;
 }
 
-void
-DirectFB_ShowWindow(_THIS, SDL_Window * window)
+void DirectFB_ShowWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -303,8 +296,7 @@ DirectFB_ShowWindow(_THIS, SDL_Window * window)
 
 }
 
-void
-DirectFB_HideWindow(_THIS, SDL_Window * window)
+void DirectFB_HideWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -312,8 +304,7 @@ DirectFB_HideWindow(_THIS, SDL_Window * window)
     SDL_DFB_CHECK(windata->dfbwin->SetOpacity(windata->dfbwin, 0));
 }
 
-void
-DirectFB_RaiseWindow(_THIS, SDL_Window * window)
+void DirectFB_RaiseWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -321,8 +312,7 @@ DirectFB_RaiseWindow(_THIS, SDL_Window * window)
     SDL_DFB_CHECK(windata->dfbwin->RequestFocus(windata->dfbwin));
 }
 
-void
-DirectFB_MaximizeWindow(_THIS, SDL_Window * window)
+void DirectFB_MaximizeWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -345,16 +335,14 @@ DirectFB_MaximizeWindow(_THIS, SDL_Window * window)
     SDL_DFB_CHECK(windata->dfbwin->SetOptions(windata->dfbwin, wopts));
 }
 
-void
-DirectFB_MinimizeWindow(_THIS, SDL_Window * window)
+void DirectFB_MinimizeWindow(_THIS, SDL_Window * window)
 {
     /* FIXME: Size to 32x32 ? */
 
     SDL_Unsupported();
 }
 
-void
-DirectFB_RestoreWindow(_THIS, SDL_Window * window)
+void DirectFB_RestoreWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     DFBWindowOptions wopts;
@@ -382,8 +370,7 @@ DirectFB_RestoreWindow(_THIS, SDL_Window * window)
 
 }
 
-void
-DirectFB_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
+void DirectFB_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -394,8 +381,7 @@ DirectFB_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
     }
 }
 
-void
-DirectFB_SetWindowKeyboardGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
+void DirectFB_SetWindowKeyboardGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
 {
     SDL_DFB_WINDOWDATA(window);
 
@@ -406,8 +392,7 @@ DirectFB_SetWindowKeyboardGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
     }
 }
 
-void
-DirectFB_DestroyWindow(_THIS, SDL_Window * window)
+void DirectFB_DestroyWindow(_THIS, SDL_Window * window)
 {
     SDL_DFB_DEVICEDATA(_this);
     SDL_DFB_WINDOWDATA(window);
@@ -455,8 +440,7 @@ DirectFB_DestroyWindow(_THIS, SDL_Window * window)
     return;
 }
 
-SDL_bool
-DirectFB_GetWindowWMInfo(_THIS, SDL_Window * window,
+SDL_bool DirectFB_GetWindowWMInfo(_THIS, SDL_Window * window,
                          struct SDL_SysWMinfo * info)
 {
     const Uint32 version = ((((Uint32) info->version.major) * 1000000) +
@@ -495,8 +479,7 @@ DirectFB_GetWindowWMInfo(_THIS, SDL_Window * window,
     }
 }
 
-void
-DirectFB_AdjustWindowSurface(SDL_Window * window)
+void DirectFB_AdjustWindowSurface(SDL_Window * window)
 {
     SDL_DFB_WINDOWDATA(window);
     int adjust = windata->wm_needs_redraw;
@@ -549,8 +532,7 @@ DirectFB_AdjustWindowSurface(SDL_Window * window)
     return;
 }
 
-int
-DirectFB_SetWindowOpacity(_THIS, SDL_Window * window, float opacity)
+int DirectFB_SetWindowOpacity(_THIS, SDL_Window * window, float opacity)
 {
     const Uint8 alpha = (Uint8) ((unsigned int) (opacity * 255.0f));
     SDL_DFB_WINDOWDATA(window);
diff --git a/src/video/emscripten/SDL_emscriptenopengles.c b/src/video/emscripten/SDL_emscriptenopengles.c
index e45f59bb8..aea127f02 100644
--- a/src/video/emscripten/SDL_emscriptenopengles.c
+++ b/src/video/emscripten/SDL_emscriptenopengles.c
@@ -33,8 +33,8 @@
 
 /* EGL implementation of SDL OpenGL support */
 
-int
-Emscripten_GLES_LoadLibrary(_THIS, const char *path) {
+int Emscripten_GLES_LoadLibrary(_THIS, const char *path)
+{
     /*we can't load EGL dynamically*/
     _this->egl_data = (struct SDL_EGL_VideoData *) SDL_calloc(1, sizeof(SDL_EGL_VideoData));
     if (!_this->egl_data) {
@@ -68,7 +68,7 @@ Emscripten_GLES_LoadLibrary(_THIS, const char *path) {
     if (!_this->egl_data->egl_display) {
         return SDL_SetError("Could not get EGL display");
     }
-    
+
     if (_this->egl_data->eglInitialize(_this->egl_data->egl_display, NULL, NULL) != EGL_TRUE) {
         return SDL_SetError("Could not initialize EGL");
     }
@@ -78,7 +78,7 @@ Emscripten_GLES_LoadLibrary(_THIS, const char *path) {
     } else {
         *_this->gl_config.driver_path = '\0';
     }
-    
+
     return 0;
 }
 
diff --git a/src/video/haiku/SDL_bmessagebox.cc b/src/video/haiku/SDL_bmessagebox.cc
index 2983ef3c1..60fce0078 100644
--- a/src/video/haiku/SDL_bmessagebox.cc
+++ b/src/video/haiku/SDL_bmessagebox.cc
@@ -346,8 +346,7 @@ protected:
 extern "C" {
 #endif
 
-int
-HAIKU_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid)
+int HAIKU_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid)
 {
 	// Initialize button by closed or error value first.
 	*buttonid = G_CLOSE_BUTTON_ID;
diff --git a/src/video/kmsdrm/SDL_kmsdrmvideo.c b/src/video/kmsdrm/SDL_kmsdrmvideo.c
index 042a01496..ebe15fe9c 100644
--- a/src/video/kmsdrm/SDL_kmsdrmvideo.c
+++ b/src/video/kmsdrm/SDL_kmsdrmvideo.c
@@ -330,8 +330,7 @@ static void KMSDRM_FBDestroyCallback(struct gbm_bo *bo, void *data)
     SDL_free(fb_info);
 }
 
-KMSDRM_FBInfo *
-KMSDRM_FBFromBO(_THIS, struct gbm_bo *bo)
+KMSDRM_FBInfo *KMSDRM_FBFromBO(_THIS, struct gbm_bo *bo)
 {
     SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
     unsigned w, h;
@@ -382,8 +381,7 @@ static void KMSDRM_FlipHandler(int fd, unsigned int frame, unsigned int sec, uns
     *((SDL_bool *)data) = SDL_FALSE;
 }
 
-SDL_bool
-KMSDRM_WaitPageflip(_THIS, SDL_WindowData *windata)
+SDL_bool KMSDRM_WaitPageflip(_THIS, SDL_WindowData *windata)
 {
 
     SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
@@ -1530,8 +1528,7 @@ int KMSDRM_CreateWindow(_THIS, SDL_Window *window)
     return ret;
 }
 
-int
-KMSDRM_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
+int KMSDRM_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
 {
     SDL_WindowData *windata = (SDL_WindowData*)window->driverdata;
     SDL_VideoData *viddata = (SDL_VideoData*)windata->viddata;
@@ -1544,8 +1541,7 @@ KMSDRM_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
     return 0;
 }
 
-int
-KMSDRM_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
+int KMSDRM_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
 {
     SDL_WindowData *windata = (SDL_WindowData*)window->driverdata;
     SDL_VideoData *viddata = (SDL_VideoData*)windata->viddata;
@@ -1566,8 +1562,7 @@ KMSDRM_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
     return 0;
 }
 
-int
-KMSDRM_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
+int KMSDRM_CreateWindowFrom(_THIS, SDL_Window * window, const void *data)
 {
     return -1;
 }
@@ -1618,8 +1613,7 @@ void KMSDRM_RestoreWindow(_THIS, SDL_Window *window)
 /*****************************************************************************/
 /* SDL Window Manager function                                               */
 /*****************************************************************************/
-SDL_bool
-KMSDRM_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool KMSDRM_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 {
      SDL_VideoData *viddata = ((SDL_VideoData *)_this->driverdata);
      const Uint32 version = SDL_VERSIONNUM((Uint32)info->version.major,
diff --git a/src/video/n3ds/SDL_n3dsswkb.c b/src/video/n3ds/SDL_n3dsswkb.c
index b8ac6df0b..9170a2ae9 100644
--- a/src/video/n3ds/SDL_n3dsswkb.c
+++ b/src/video/n3ds/SDL_n3dsswkb.c
@@ -45,8 +45,7 @@ void N3DS_SwkbQuit()
     return;
 }
 
-SDL_bool
-N3DS_HasScreenKeyboardSupport(_THIS)
+SDL_bool N3DS_HasScreenKeyboardSupport(_THIS)
 {
     return SDL_TRUE;
 }
diff --git a/src/video/nacl/SDL_naclevents.c b/src/video/nacl/SDL_naclevents.c
index 0fd948001..ce03e525e 100644
--- a/src/video/nacl/SDL_naclevents.c
+++ b/src/video/nacl/SDL_naclevents.c
@@ -305,8 +305,7 @@ static Uint8 SDL_NACL_translate_mouse_button(int32_t button) {
     }
 }
 
-static SDL_Scancode
-SDL_NACL_translate_keycode(int keycode)
+static SDL_Scancode SDL_NACL_translate_keycode(int keycode)
 {
     SDL_Scancode scancode = SDL_SCANCODE_UNKNOWN;
 
diff --git a/src/video/nacl/SDL_naclopengles.c b/src/video/nacl/SDL_naclopengles.c
index 5089fa52c..5889839f3 100644
--- a/src/video/nacl/SDL_naclopengles.c
+++ b/src/video/nacl/SDL_naclopengles.c
@@ -35,15 +35,13 @@
 #include "ppapi_simple/ps.h"
 
 /* GL functions */
-int
-NACL_GLES_LoadLibrary(_THIS, const char *path)
+int NACL_GLES_LoadLibrary(_THIS, const char *path)
 {
     /* FIXME: Support dynamic linking when PNACL supports it */
     return glInitializePPAPI(PSGetInterface) == 0;
 }
 
-void *
-NACL_GLES_GetProcAddress(_THIS, const char *proc)
+void *NACL_GLES_GetProcAddress(_THIS, const char *proc)
 {
 #ifdef HAVE_DLOPEN
     return dlsym( 0 /* RTLD_DEFAULT */, proc);
@@ -52,15 +50,13 @@ NACL_GLES_GetProcAddress(_THIS, const char *proc)
 #endif
 }
 
-void
-NACL_GLES_UnloadLibrary(_THIS)
+void NACL_GLES_UnloadLibrary(_THIS)
 {
     /* FIXME: Support dynamic linking when PNACL supports it */
     glTerminatePPAPI();
 }
 
-int
-NACL_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext sdl_context)
+int NACL_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext sdl_context)
 {
     SDL_VideoData *driverdata = (SDL_VideoData *) _this->driverdata;
     /* FIXME: Check threading issues...otherwise use a hardcoded _this->context across all threads */
@@ -69,21 +65,20 @@ NACL_GLES_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext sdl_context)
     return 0;
 }
 
-SDL_GLContext
-NACL_GLES_CreateContext(_THIS, SDL_Window * window)
+SDL_GLContext NACL_GLES_CreateContext(_THIS, SDL_Window * window)
 {
     SDL_VideoData *driverdata = (SDL_VideoData *) _this->driverdata;
     PP_Resource context, share_context = 0;
     /* 64 seems nice. */
     Sint32 attribs[64];
     int i = 0;
-    
+
     if (_this->gl_config.share_with_current_context) {
         share_context = (PP_Resource) SDL_GL_GetCurrentContext();
     }
 
     /* FIXME: Some ATTRIBS from PP_Graphics3DAttrib are not set here */
-    
+
     attribs[i++] = PP_GRAPHICS3DATTRIB_WIDTH;
     attribs[i++] = window->w;
     attribs[i++] = PP_GRAPHICS3DATTRIB_HEIGHT;
@@ -94,65 +89,62 @@ NACL_GLES_CreateContext(_THIS, SDL_Window * window)
     attribs[i++] = _this->gl_config.green_size;
     attribs[i++] = PP_GRAPHICS3DATTRIB_BLUE_SIZE;
     attribs[i++] = _this->gl_config.blue_size;
-    
+
     if (_this->gl_config.alpha_size) {
         attribs[i++] = PP_GRAPHICS3DATTRIB_ALPHA_SIZE;
         attribs[i++] = _this->gl_config.alpha_size;
     }
-    
+
     /*if (_this->gl_config.buffer_size) {
         attribs[i++] = EGL_BUFFER_SIZE;
         attribs[i++] = _this->gl_config.buffer_size;
     }*/
-    
+
     attribs[i++] = PP_GRAPHICS3DATTRIB_DEPTH_SIZE;
     attribs[i++] = _this->gl_config.depth_size;
-    
+
     if (_this->gl_config.stencil_size) {
         attribs[i++] = PP_GRAPHICS3DATTRIB_STENCIL_SIZE;
         attribs[i++] = _this->gl_config.stencil_size;
     }
-    
+
     if (_this->gl_config.multisamplebuffers) {
         attribs[i++] = PP_GRAPHICS3DATTRIB_SAMPLE_BUFFERS;
         attribs[i++] = _this->gl_config.multisamplebuffers;
     }
-    
+
     if (_this->gl_config.multisamplesamples) {
         attribs[i++] = PP_GRAPHICS3DATTRIB_SAMPLES;
         attribs[i++] = _this->gl_config.multisamplesamples;
     }
-       
+
     attribs[i++] = PP_GRAPHICS3DATTRIB_NONE;
-    
+
     context = driverdata->ppb_graphics->Create(driverdata->instance, share_context, attribs);
 
     if (context) {
         /* We need to make the context current, otherwise nothing works */
         SDL_GL_MakeCurrent(window, (SDL_GLContext) context);
     }
-    
+
     return (SDL_GLContext) context;
 }
 
 
 
-int
-NACL_GLES_SetSwapInterval(_THIS, int interval)
+int NACL_GLES_SetSwapInterval(_THIS, int interval)
 {
     /* STUB */
     return SDL_Unsupported();
 }
 
-int
-NACL_GLES_GetSwapInterval(_THIS)
+int NACL_GLES_GetSwapInterval(_THIS)
 {
     /* STUB */
     return 0;
 }
 
-int
-NACL_GLES_SwapWindow(_THIS, SDL_Window * window)
+int NACL_GLES_SwapWindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *driverdata = (SDL_VideoData *) _this->driverdata;
     struct PP_CompletionCallback callback = { NULL, 0, PP_COMPLETIONCALLBACK_FLAG_NONE };
@@ -162,8 +154,7 @@ NACL_GLES_SwapWindow(_THIS, SDL_Window * window)
     return 0;
 }
 
-void
-NACL_GLES_DeleteContext(_THIS, SDL_GLContext context)
+void NACL_GLES_DeleteContext(_THIS, SDL_GLContext context)
 {
     SDL_VideoData *driverdata = (SDL_VideoData *) _this->driverdata;
     driverdata->ppb_core->ReleaseResource((PP_Resource) context);
diff --git a/src/video/nacl/SDL_naclvideo.c b/src/video/nacl/SDL_naclvideo.c
index aa7237e75..ef8903807 100644
--- a/src/video/nacl/SDL_naclvideo.c
+++ b/src/video/nacl/SDL_naclvideo.c
@@ -32,34 +32,33 @@
 #include "SDL_naclvideo.h"
 #include "SDL_naclwindow.h"
 #include "SDL_naclevents_c.h"
-#include "SDL_naclopengles.h"   
+#include "SDL_naclopengles.h"
 #include "SDL_video.h"
 #include "../SDL_sysvideo.h"
 #include "../../events/SDL_events_c.h"
 
 #define NACLVID_DRIVER_NAME "nacl"
 
-/* Static init required because NACL_SetScreenResolution 
+/* Static init required because NACL_SetScreenResolution
  * may appear even before SDL starts and we want to remember
  * the window width and height
  */
 static SDL_VideoData nacl = {0};
 
-void
-NACL_SetScreenResolution(int width, int height, Uint32 format)
+void NACL_SetScreenResolution(int width, int height, Uint32 format)
 {
     PP_Resource context;
-    
+
     nacl.w = width;
-    nacl.h = height;   
+    nacl.h = height;
     nacl.format = format;
-    
+
     if (nacl.window) {
         nacl.window->w = width;
         nacl.window->h = height;
         SDL_SendWindowEvent(nacl.window, SDL_WINDOWEVENT_RESIZED, width, height);
     }
-    
+
     /* FIXME: Check threading issues...otherwise use a hardcoded _this->context across all threads */
     context = (PP_Resource) SDL_GL_GetCurrentContext();
     if (context) {
@@ -85,19 +84,18 @@ static void NACL_DeleteDevice(SDL_VideoDevice *device) {
     SDL_free(device);
 }
 
-static int
-NACL_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+static int NACL_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
 {
     return 0;
 }
 
 static SDL_VideoDevice *NACL_CreateDevice(void) {
     SDL_VideoDevice *device;
-    
+
     if (!NACL_Available()) {
         return NULL;
     }
-    
+
     /* Initialize all variables that we clean on shutdown */
     device = (SDL_VideoDevice *) SDL_calloc(1, sizeof(SDL_VideoDevice));
     if (!device) {
@@ -105,20 +103,20 @@ static SDL_VideoDevice *NACL_CreateDevice(void) {
         return NULL;
     }
     device->driverdata = &nacl;
-  
+
     /* Set the function pointers */
     device->VideoInit = NACL_VideoInit;
     device->VideoQuit = NACL_VideoQuit;
     device->PumpEvents = NACL_PumpEvents;
-    
+
     device->CreateSDLWindow = NACL_CreateWindow;
     device->SetWindowTitle = NACL_SetWindowTitle;
     device->DestroyWindow = NACL_DestroyWindow;
-    
+
     device->SetDisplayMode = NACL_SetDisplayMode;
-    
+
     device->free = NACL_DeleteDevice;
-    
+
     /* GL pointers */
     device->GL_LoadLibrary = NACL_GLES_LoadLibrary;
     device->GL_GetProcAddress = NACL_GLES_GetProcAddress;
@@ -129,8 +127,8 @@ static SDL_VideoDevice *NACL_CreateDevice(void) {
     device->GL_GetSwapInterval = NACL_GLES_GetSwapInterval;
     device->GL_SwapWindow = NACL_GLES_SwapWindow;
     device->GL_DeleteContext = NACL_GLES_DeleteContext;
-    
-    
+
+
     return device;
 }
 
@@ -154,7 +152,7 @@ int NACL_VideoInit(_THIS) {
     }
 
     SDL_AddDisplayMode(&_this->displays[0], &mode);
-    
+
     PSInterfaceInit();
     driverdata->instance = PSGetInstanceId();
     driverdata->ppb_graphics = PSInterfaceGraphics3D();
@@ -170,12 +168,12 @@ int NACL_VideoInit(_THIS) {
     driverdata->ppb_mouse_input_event = (PPB_MouseInputEvent*) PSGetInterface(PPB_MOUSE_INPUT_EVENT_INTERFACE);
     driverdata->ppb_wheel_input_event = (PPB_WheelInputEvent*) PSGetInterface(PPB_WHEEL_INPUT_EVENT_INTERFACE);
     driverdata->ppb_touch_input_event = (PPB_TouchInputEvent*) PSGetInterface(PPB_TOUCH_INPUT_EVENT_INTERFACE);
-    
-    
+
+
     driverdata->message_loop = driverdata->ppb_message_loop->Create(driverdata->instance);
-    
+
     PSEventSetFilter(PSE_ALL);
-    
+
     /* We're done! */
     return 0;
 }
diff --git a/src/video/nacl/SDL_naclwindow.c b/src/video/nacl/SDL_naclwindow.c
index 303fc7361..3c2222051 100644
--- a/src/video/nacl/SDL_naclwindow.c
+++ b/src/video/nacl/SDL_naclwindow.c
@@ -29,11 +29,10 @@
 #include "SDL_naclvideo.h"
 #include "SDL_naclwindow.h"
 
-int
-NACL_CreateWindow(_THIS, SDL_Window * window)
+int NACL_CreateWindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *driverdata = (SDL_VideoData *) _this->driverdata;
-    
+
     if (driverdata->window) {
         return SDL_SetError("NaCl only supports one window");
     }
@@ -49,23 +48,21 @@ NACL_CreateWindow(_THIS, SDL_Window * window)
     window->flags |= SDL_WINDOW_FULLSCREEN;     /* window is always fullscreen */
     window->flags &= ~SDL_WINDOW_HIDDEN;
     window->flags |= SDL_WINDOW_SHOWN;          /* only one window on NaCl */
-    window->flags |= SDL_WINDOW_INPUT_FOCUS;    /* always has input focus */    
+    window->flags |= SDL_WINDOW_INPUT_FOCUS;    /* always has input focus */
     window->flags |= SDL_WINDOW_OPENGL;
-  
+
     SDL_SetMouseFocus(window);
     SDL_SetKeyboardFocus(window);
-    
+
     return 0;
 }
 
-void
-NACL_SetWindowTitle(_THIS, SDL_Window * window)
+void NACL_SetWindowTitle(_THIS, SDL_Window * window)
 {
     /* TODO */
 }
 
-void
-NACL_DestroyWindow(_THIS, SDL_Window * window)
+void NACL_DestroyWindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *driverdata = (SDL_VideoData *) _this->driverdata;
     if (window == driverdata->window) {
diff --git a/src/video/offscreen/SDL_offscreenopengles.c b/src/video/offscreen/SDL_offscreenopengles.c
index 6b23117a9..818569677 100644
--- a/src/video/offscreen/SDL_offscreenopengles.c
+++ b/src/video/offscreen/SDL_offscreenopengles.c
@@ -54,8 +54,7 @@ int OFFSCREEN_GLES_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-SDL_GLContext
-OFFSCREEN_GLES_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext OFFSCREEN_GLES_CreateContext(_THIS, SDL_Window *window)
 {
     OFFSCREEN_Window *offscreen_window = window->driverdata;
 
diff --git a/src/video/pandora/SDL_pandora.c b/src/video/pandora/SDL_pandora.c
index 23844e80a..16debcb13 100644
--- a/src/video/pandora/SDL_pandora.c
+++ b/src/video/pandora/SDL_pandora.c
@@ -41,14 +41,12 @@
 static NativeWindowType hNativeWnd = 0; /* A handle to the window we will create. */
 #endif
 
-static int
-PND_available(void)
+static int PND_available(void)
 {
     return 1;
 }
 
-static void
-PND_destroy(SDL_VideoDevice * device)
+static void PND_destroy(SDL_VideoDevice * device)
 {
     if (device->driverdata != NULL) {
         SDL_free(device->driverdata);
@@ -57,8 +55,7 @@ PND_destroy(SDL_VideoDevice * device)
     SDL_free(device);
 }
 
-static SDL_VideoDevice *
-PND_create()
+static SDL_VideoDevice *PND_create()
 {
     SDL_VideoDevice *device;
     SDL_VideoData *phdata;
@@ -149,8 +146,7 @@ VideoBootStrap PND_bootstrap = {
 /*****************************************************************************/
 /* SDL Video and Display initialization/handling functions                   */
 /*****************************************************************************/
-int
-PND_videoinit(_THIS)
+int PND_videoinit(_THIS)
 {
     SDL_VideoDisplay display;
     SDL_DisplayMode current_mode;
@@ -177,26 +173,22 @@ PND_videoinit(_THIS)
     return 1;
 }
 
-void
-PND_videoquit(_THIS)
+void PND_videoquit(_THIS)
 {
 
 }
 
-void
-PND_getdisplaymodes(_THIS, SDL_VideoDisplay * display)
+void PND_getdisplaymodes(_THIS, SDL_VideoDisplay * display)
 {
 
 }
 
-int
-PND_setdisplaymode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+int PND_setdisplaymode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
 {
     return 0;
 }
 
-int
-PND_createwindow(_THIS, SDL_Window * window)
+int PND_createwindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
 
@@ -239,54 +231,42 @@ PND_createwindow(_THIS, SDL_Window * window)
     return 0;
 }
 
-int
-PND_createwindowfrom(_THIS, SDL_Window * window, const void *data)
+int PND_createwindowfrom(_THIS, SDL_Window * window, const void *data)
 {
     return -1;
 }
 
-void
-PND_setwindowtitle(_THIS, SDL_Window * window)
+void PND_setwindowtitle(_THIS, SDL_Window * window)
 {
 }
-void
-PND_setwindowicon(_THIS, SDL_Window * window, SDL_Surface * icon)
+void PND_setwindowicon(_THIS, SDL_Window * window, SDL_Surface * icon)
 {
 }
-void
-PND_setwindowposition(_THIS, SDL_Window * window)
+void PND_setwindowposition(_THIS, SDL_Window * window)
 {
 }
-void
-PND_setwindowsize(_THIS, SDL_Window * window)
+void PND_setwindowsize(_THIS, SDL_Window * window)
 {
 }
-void
-PND_showwindow(_THIS, SDL_Window * window)
+void PND_showwindow(_THIS, SDL_Window * window)
 {
 }
-void
-PND_hidewindow(_THIS, SDL_Window * window)
+void PND_hidewindow(_THIS, SDL_Window * window)
 {
 }
-void
-PND_raisewindow(_THIS, SDL_Window * window)
+void PND_raisewindow(_THIS, SDL_Window * window)
 {
 }
-void
-PND_maximizewindow(_THIS, SDL_Window * window)
+void PND_maximizewindow(_THIS, SDL_Window * window)
 {
 }
-void
-PND_minimizewindow(_THIS, SDL_Window * window)
+void PND_minimizewindow(_THIS, SDL_Window * window)
 {
 }
-void
-PND_restorewindow(_THIS, SDL_Window * window)
+void PND_restorewindow(_THIS, SDL_Window * window)
 {
 }
-void
-PND_destroywindow(_THIS, SDL_Window * window)
+void PND_destroywindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
     eglTerminate(phdata->egl_display);
@@ -296,8 +276,7 @@ PND_destroywindow(_THIS, SDL_Window * window)
 /* SDL Window Manager function                                               */
 /*****************************************************************************/
 #if 0
-SDL_bool
-PND_getwindowwminfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool PND_getwindowwminfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 {
     if (info->version.major <= SDL_MAJOR_VERSION) {
         return SDL_TRUE;
@@ -315,8 +294,7 @@ PND_getwindowwminfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 /*****************************************************************************/
 /* SDL OpenGL/OpenGL ES functions                                            */
 /*****************************************************************************/
-int
-PND_gl_loadlibrary(_THIS, const char *path)
+int PND_gl_loadlibrary(_THIS, const char *path)
 {
     /* Check if OpenGL ES library is specified for GF driver */
     if (path == NULL) {
@@ -352,8 +330,7 @@ PND_gl_loadlibrary(_THIS, const char *path)
     return 0;
 }
 
-void *
-PND_gl_getprocaddres(_THIS, const char *proc)
+void *PND_gl_getprocaddres(_THIS, const char *proc)
 {
     void *function_address;
 
@@ -377,8 +354,7 @@ PND_gl_getprocaddres(_THIS, const char *proc)
     return NULL;
 }
 
-void
-PND_gl_unloadlibrary(_THIS)
+void PND_gl_unloadlibrary(_THIS)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
 
@@ -393,8 +369,7 @@ PND_gl_unloadlibrary(_THIS)
     }
 }
 
-SDL_GLContext
-PND_gl_createcontext(_THIS, SDL_Window * window)
+SDL_GLContext PND_gl_createcontext(_THIS, SDL_Window * window)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
     SDL_WindowData *wdata = (SDL_WindowData *) window->driverdata;
@@ -698,8 +673,7 @@ PND_gl_createcontext(_THIS, SDL_Window * window)
     return wdata->gles_context;
 }
 
-int
-PND_gl_makecurrent(_THIS, SDL_Window * window, SDL_GLContext context)
+int PND_gl_makecurrent(_THIS, SDL_Window * window, SDL_GLContext context)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
     SDL_WindowData *wdata;
@@ -742,8 +716,7 @@ PND_gl_makecurrent(_THIS, SDL_Window * window, SDL_GLContext context)
     return 0;
 }
 
-int
-PND_gl_setswapinterval(_THIS, int interval)
+int PND_gl_setswapinterval(_THIS, int interval)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
     EGLBoolean status;
@@ -767,14 +740,12 @@ PND_gl_setswapinterval(_THIS, int interval)
     return SDL_SetError("PND: Cannot set swap interval");
 }
 
-int
-PND_gl_getswapinterval(_THIS)
+int PND_gl_getswapinterval(_THIS)
 {
     return ((SDL_VideoData *) _this->driverdata)->swapinterval;
 }
 
-int
-PND_gl_swapwindow(_THIS, SDL_Window * window)
+int PND_gl_swapwindow(_THIS, SDL_Window * window)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
     SDL_WindowData *wdata = (SDL_WindowData *) window->driverdata;
@@ -793,8 +764,7 @@ PND_gl_swapwindow(_THIS, SDL_Window * window)
     return 0;
 }
 
-void
-PND_gl_deletecontext(_THIS, SDL_GLContext context)
+void PND_gl_deletecontext(_THIS, SDL_GLContext context)
 {
     SDL_VideoData *phdata = (SDL_VideoData *) _this->driverdata;
     EGLBoolean status;
diff --git a/src/video/pandora/SDL_pandora_events.c b/src/video/pandora/SDL_pandora_events.c
index 7e46b3fc0..906c75800 100644
--- a/src/video/pandora/SDL_pandora_events.c
+++ b/src/video/pandora/SDL_pandora_events.c
@@ -27,8 +27,7 @@
 
 #include "../../events/SDL_events_c.h"
 
-void
-PND_PumpEvents(_THIS)
+void PND_PumpEvents(_THIS)
 {
     /* Not implemented. */
 }
diff --git a/src/video/psp/SDL_pspgl.c b/src/video/psp/SDL_pspgl.c
index aa21938ec..a00e638e9 100644
--- a/src/video/psp/SDL_pspgl.c
+++ b/src/video/psp/SDL_pspgl.c
@@ -55,8 +55,7 @@ int PSP_GL_LoadLibrary(_THIS, const char *path)
 GLSTUB(glOrtho,(GLdouble left, GLdouble right, GLdouble bottom, GLdouble top,
                     GLdouble zNear, GLdouble zFar))
 */
-void *
-PSP_GL_GetProcAddress(_THIS, const char *proc)
+void *PSP_GL_GetProcAddress(_THIS, const char *proc)
 {
     return eglGetProcAddress(proc);
 }
@@ -69,8 +68,7 @@ void PSP_GL_UnloadLibrary(_THIS)
 static EGLint width = 480;
 static EGLint height = 272;
 
-SDL_GLContext
-PSP_GL_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext PSP_GL_CreateContext(_THIS, SDL_Window *window)
 {
 
     SDL_WindowData *wdata = (SDL_WindowData *)window->driverdata;
diff --git a/src/video/psp/SDL_pspvideo.c b/src/video/psp/SDL_pspvideo.c
index 9e1428e9f..676196c01 100644
--- a/src/video/psp/SDL_pspvideo.c
+++ b/src/video/psp/SDL_pspvideo.c
@@ -258,8 +258,7 @@ void PSP_DestroyWindow(_THIS, SDL_Window *window)
 /* SDL Window Manager function                                               */
 /*****************************************************************************/
 #if 0
-SDL_bool
-PSP_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool PSP_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 {
     if (info->version.major <= SDL_MAJOR_VERSION) {
         return SDL_TRUE;
diff --git a/src/video/qnx/gl.c b/src/video/qnx/gl.c
index 1862ab425..cf487ed46 100644
--- a/src/video/qnx/gl.c
+++ b/src/video/qnx/gl.c
@@ -30,8 +30,7 @@ static EGLDisplay   egl_disp;
  * @param   egl_conf    EGL configuration to use
  * @return  A SCREEN_FORMAT* constant for the pixel format to use
  */
-static int
-chooseFormat(EGLConfig egl_conf)
+static int chooseFormat(EGLConfig egl_conf)
 {
     EGLint buffer_bit_depth;
     EGLint alpha_bit_depth;
@@ -64,8 +63,7 @@ chooseFormat(EGLConfig egl_conf)
  * @param[out]  pformat The chosen pixel format
  * @return 0 if successful, -1 on error
  */
-int
-glGetConfig(EGLConfig *pconf, int *pformat)
+int glGetConfig(EGLConfig *pconf, int *pformat)
 {
     EGLConfig egl_conf = (EGLConfig)0;
     EGLConfig *egl_configs;
@@ -132,8 +130,7 @@ glGetConfig(EGLConfig *pconf, int *pformat)
  * @param   name    unused
  * @return  0 if successful, -1 on error
  */
-int
-glLoadLibrary(_THIS, const char *name)
+int glLoadLibrary(_THIS, const char *name)
 {
     EGLNativeDisplayType    disp_id = EGL_DEFAULT_DISPLAY;
 
@@ -154,8 +151,7 @@ glLoadLibrary(_THIS, const char *name)
  * @param   proc    Function name
  * @return  Function address
  */
-void *
-glGetProcAddress(_THIS, const char *proc)
+void *glGetProcAddress(_THIS, const char *proc)
 {
     return eglGetProcAddress(proc);
 }
@@ -167,8 +163,7 @@ glGetProcAddress(_THIS, const char *proc)
  * @param   window  The SDL window to create the context for
  * @return  A pointer to the created context, if successful, NULL on error
  */
-SDL_GLContext
-glCreateContext(_THIS, SDL_Window *window)
+SDL_GLContext glCreateContext(_THIS, SDL_Window *window)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
     EGLContext      context;
@@ -214,8 +209,7 @@ glCreateContext(_THIS, SDL_Window *window)
  * @param   interval    New interval value
  * @return  0 if successful, -1 on error
  */
-int
-glSetSwapInterval(_THIS, int interval)
+int glSetSwapInterval(_THIS, int interval)
 {
     if (eglSwapInterval(egl_disp, interval) != EGL_TRUE) {
         return -1;
@@ -230,8 +224,7 @@ glSetSwapInterval(_THIS, int interval)
  * @param   window  Window to swap buffers for
  * @return  0 if successful, -1 on error
  */
-int
-glSwapWindow(_THIS, SDL_Window *window)
+int glSwapWindow(_THIS, SDL_Window *window)
 {
     /* !!! FIXME: should we migrate this all over to use SDL_egl.c? */
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
@@ -245,8 +238,7 @@ glSwapWindow(_THIS, SDL_Window *window)
  * @param   context The context to activate
  * @return  0 if successful, -1 on error
  */
-int
-glMakeCurrent(_THIS, SDL_Window *window, SDL_GLContext context)
+int glMakeCurrent(_THIS, SDL_Window *window, SDL_GLContext context)
 {
     window_impl_t   *impl;
     EGLSurface      surface = NULL;
@@ -268,8 +260,7 @@ glMakeCurrent(_THIS, SDL_Window *window, SDL_GLContext context)
  * @param   _THIS
  * @param   context The context to destroy
  */
-void
-glDeleteContext(_THIS, SDL_GLContext context)
+void glDeleteContext(_THIS, SDL_GLContext context)
 {
     eglDestroyContext(egl_disp, context);
 }
@@ -278,8 +269,7 @@ glDeleteContext(_THIS, SDL_GLContext context)
  * Terminates access to the EGL library.
  * @param   _THIS
  */
-void
-glUnloadLibrary(_THIS)
+void glUnloadLibrary(_THIS)
 {
     eglTerminate(egl_disp);
 }
diff --git a/src/video/qnx/keyboard.c b/src/video/qnx/keyboard.c
index 86c6395ba..9ec289d44 100644
--- a/src/video/qnx/keyboard.c
+++ b/src/video/qnx/keyboard.c
@@ -95,8 +95,7 @@ static int key_to_sdl[] = {
  * Translates the event such that it can be handled by SDL.
  * @param   event   Screen keyboard event
  */
-void
-handleKeyboardEvent(screen_event_t event)
+void handleKeyboardEvent(screen_event_t event)
 {
     int             val;
     SDL_Scancode    scancode;
diff --git a/src/video/qnx/video.c b/src/video/qnx/video.c
index 049d81404..cecd717d5 100644
--- a/src/video/qnx/video.c
+++ b/src/video/qnx/video.c
@@ -32,8 +32,7 @@ static screen_event_t   event;
  * @param   _THIS
  * @return  0 if successful, -1 on error
  */
-static int
-videoInit(_THIS)
+static int videoInit(_THIS)
 {
     SDL_VideoDisplay display;
 
@@ -55,8 +54,7 @@ videoInit(_THIS)
     return 0;
 }
 
-static void
-videoQuit(_THIS)
+static void videoQuit(_THIS)
 {
 }
 
@@ -67,8 +65,7 @@ videoQuit(_THIS)
  * @param   window  SDL window to initialize
  * @return  0 if successful, -1 on error
  */
-static int
-createWindow(_THIS, SDL_Window *window)
+static int createWindow(_THIS, SDL_Window *window)
 {
     window_impl_t   *impl;
     int             size[2];
@@ -150,8 +147,7 @@ fail:
  * @param[out]  pitch   Holds the number of bytes per line
  * @return  0 if successful, -1 on error
  */
-static int
-createWindowFramebuffer(_THIS, SDL_Window * window, Uint32 * format,
+static int createWindowFramebuffer(_THIS, SDL_Window * window, Uint32 * format,
                         void ** pixels, int *pitch)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
@@ -186,8 +182,7 @@ createWindowFramebuffer(_THIS, SDL_Window * window, Uint32 * format,
  * @param   numrects    Rect array length
  * @return  0 if successful, -1 on error
  */
-static int
-updateWindowFramebuffer(_THIS, SDL_Window *window, const SDL_Rect *rects,
+static int updateWindowFramebuffer(_THIS, SDL_Window *window, const SDL_Rect *rects,
                         int numrects)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
@@ -207,8 +202,7 @@ updateWindowFramebuffer(_THIS, SDL_Window *window, const SDL_Rect *rects,
  * Runs the main event loop.
  * @param   _THIS
  */
-static void
-pumpEvents(_THIS)
+static void pumpEvents(_THIS)
 {
     int             type;
 
@@ -242,8 +236,7 @@ pumpEvents(_THIS)
  * @param   _THIS
  * @param   window  SDL window to update
  */
-static void
-setWindowSize(_THIS, SDL_Window *window)
+static void setWindowSize(_THIS, SDL_Window *window)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
     int             size[2];
@@ -261,8 +254,7 @@ setWindowSize(_THIS, SDL_Window *window)
  * @param   _THIS
  * @param   window  SDL window to update
  */
-static void
-showWindow(_THIS, SDL_Window *window)
+static void showWindow(_THIS, SDL_Window *window)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
     const int       visible = 1;
@@ -276,8 +268,7 @@ showWindow(_THIS, SDL_Window *window)
  * @param   _THIS
  * @param   window  SDL window to update
  */
-static void
-hideWindow(_THIS, SDL_Window *window)
+static void hideWindow(_THIS, SDL_Window *window)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
     const int       visible = 0;
@@ -291,8 +282,7 @@ hideWindow(_THIS, SDL_Window *window)
  * @param   _THIS
  * @param   window  SDL window that is being destroyed
  */
-static void
-destroyWindow(_THIS, SDL_Window *window)
+static void destroyWindow(_THIS, SDL_Window *window)
 {
     window_impl_t   *impl = (window_impl_t *)window->driverdata;
 
@@ -306,8 +296,7 @@ destroyWindow(_THIS, SDL_Window *window)
  * Frees the plugin object created by createDevice().
  * @param   device  Plugin object to free
  */
-static void
-deleteDevice(SDL_VideoDevice *device)
+static void deleteDevice(SDL_VideoDevice *device)
 {
     SDL_free(device);
 }
@@ -317,8 +306,7 @@ deleteDevice(SDL_VideoDevice *device)
  * @param   devindex    Unused
  * @return  Initialized device if successful, NULL otherwise
  */
-static SDL_VideoDevice *
-createDevice(int devindex)
+static SDL_VideoDevice *createDevice(int devindex)
 {
     SDL_VideoDevice *device;
 
diff --git a/src/video/raspberry/SDL_rpivideo.c b/src/video/raspberry/SDL_rpivideo.c
index daf5a64c0..f56e23d95 100644
--- a/src/video/raspberry/SDL_rpivideo.c
+++ b/src/video/raspberry/SDL_rpivideo.c
@@ -400,8 +400,7 @@ void RPI_RestoreWindow(_THIS, SDL_Window *window)
 /* SDL Window Manager function                                               */
 /*****************************************************************************/
 #if 0
-SDL_bool
-RPI_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool RPI_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 {
     if (info->version.major <= SDL_MAJOR_VERSION) {
         return SDL_TRUE;
diff --git a/src/video/riscos/SDL_riscosmodes.c b/src/video/riscos/SDL_riscosmodes.c
index 2d474cb77..35a42e38e 100644
--- a/src/video/riscos/SDL_riscosmodes.c
+++ b/src/video/riscos/SDL_riscosmodes.c
@@ -85,8 +85,7 @@ static SDL_PixelFormatEnum RISCOS_ModeToPixelFormat(int ncolour, int modeflags,
     return SDL_PIXELFORMAT_UNKNOWN;
 }
 
-static size_t
-measure_mode_block(const int *block)
+static size_t measure_mode_block(const int *block)
 {
     size_t blockSize = ((block[0] & 0xFF) == 3) ? 7 : 5;
     while (block[blockSize] != -1) {
diff --git a/src/video/riscos/SDL_riscoswindow.c b/src/video/riscos/SDL_riscoswindow.c
index 0153dbbc6..cf8e71dfa 100644
--- a/src/video/riscos/SDL_riscoswindow.c
+++ b/src/video/riscos/SDL_riscoswindow.c
@@ -62,8 +62,7 @@ void RISCOS_DestroyWindow(_THIS, SDL_Window *window)
     window->driverdata = NULL;
 }
 
-SDL_bool
-RISCOS_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool RISCOS_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 {
     if (info->version.major == SDL_MAJOR_VERSION) {
         info->subsystem = SDL_SYSWM_RISCOS;
diff --git a/src/video/uikit/SDL_uikitappdelegate.m b/src/video/uikit/SDL_uikitappdelegate.m
index fb42d2202..1e27200e0 100644
--- a/src/video/uikit/SDL_uikitappdelegate.m
+++ b/src/video/uikit/SDL_uikitappdelegate.m
@@ -87,8 +87,7 @@ SDL_IdleTimerDisabledChanged(void *userdata, const char *name, const char *oldVa
 
 #if !TARGET_OS_TV
 /* Load a launch image using the old UILaunchImageFile-era naming rules. */
-static UIImage *
-SDL_LoadLaunchImageNamed(NSString *name, int screenh)
+static UIImage *SDL_LoadLaunchImageNamed(NSString *name, int screenh)
 {
     UIInterfaceOrientation curorient = [UIApplication sharedApplication].statusBarOrientation;
     UIUserInterfaceIdiom idiom = [UIDevice currentDevice].userInterfaceIdiom;
diff --git a/src/video/uikit/SDL_uikitclipboard.m b/src/video/uikit/SDL_uikitclipboard.m
index 7d04f0f86..da475f308 100644
--- a/src/video/uikit/SDL_uikitclipboard.m
+++ b/src/video/uikit/SDL_uikitclipboard.m
@@ -27,8 +27,7 @@
 
 #import <UIKit/UIPasteboard.h>
 
-int
-UIKit_SetClipboardText(_THIS, const char *text)
+int UIKit_SetClipboardText(_THIS, const char *text)
 {
 #if TARGET_OS_TV
     return SDL_SetError("The clipboard is not available on tvOS");
@@ -40,8 +39,7 @@ UIKit_SetClipboardText(_THIS, const char *text)
 #endif
 }
 
-char *
-UIKit_GetClipboardText(_THIS)
+char *UIKit_GetClipboardText(_THIS)
 {
 #if TARGET_OS_TV
     return SDL_strdup(""); // Unsupported.
@@ -59,8 +57,7 @@ UIKit_GetClipboardText(_THIS)
 #endif
 }
 
-SDL_bool
-UIKit_HasClipboardText(_THIS)
+SDL_bool UIKit_HasClipboardText(_THIS)
 {
     @autoreleasepool {
 #if !TARGET_OS_TV
@@ -72,8 +69,7 @@ UIKit_HasClipboardText(_THIS)
     }
 }
 
-void
-UIKit_InitClipboard(_THIS)
+void UIKit_InitClipboard(_THIS)
 {
 #if !TARGET_OS_TV
     @autoreleasepool {
@@ -92,8 +88,7 @@ UIKit_InitClipboard(_THIS)
 #endif
 }
 
-void
-UIKit_QuitClipboard(_THIS)
+void UIKit_QuitClipboard(_THIS)
 {
     @autoreleasepool {
         SDL_VideoData *data = (__bridge SDL_VideoData *) _this->driverdata;
diff --git a/src/video/uikit/SDL_uikitevents.m b/src/video/uikit/SDL_uikitevents.m
index d4e3d0559..68d38bcac 100644
--- a/src/video/uikit/SDL_uikitevents.m
+++ b/src/video/uikit/SDL_uikitevents.m
@@ -108,8 +108,7 @@ static BOOL UIKit_EventPumpEnabled = YES;
 @end
 
 
-void
-SDL_iPhoneSetEventPump(SDL_bool enabled)
+void SDL_iPhoneSetEventPump(SDL_bool enabled)
 {
     UIKit_EventPumpEnabled = enabled;
 
@@ -121,8 +120,7 @@ SDL_iPhoneSetEventPump(SDL_bool enabled)
     [lifecycleObserver eventPumpChanged];
 }
 
-void
-UIKit_PumpEvents(_THIS)
+void UIKit_PumpEvents(_THIS)
 {
     if (!UIKit_EventPumpEnabled) {
         return;
diff --git a/src/video/uikit/SDL_uikitmessagebox.m b/src/video/uikit/SDL_uikitmessagebox.m
index b7bbe5668..03e3f3803 100644
--- a/src/video/uikit/SDL_uikitmessagebox.m
+++ b/src/video/uikit/SDL_uikitmessagebox.m
@@ -30,14 +30,12 @@
 
 static SDL_bool s_showingMessageBox = SDL_FALSE;
 
-SDL_bool
-UIKit_ShowingMessageBox(void)
+SDL_bool UIKit_ShowingMessageBox(void)
 {
     return s_showingMessageBox;
 }
 
-static void
-UIKit_WaitUntilMessageBoxClosed(const SDL_MessageBoxData *messageboxdata, int *clickedindex)
+static void UIKit_WaitUntilMessageBoxClosed(const SDL_MessageBoxData *messageboxdata, int *clickedindex)
 {
     *clickedindex = messageboxdata->numbuttons;
 
@@ -52,8 +50,7 @@ UIKit_WaitUntilMessageBoxClosed(const SDL_MessageBoxData *messageboxdata, int *c
     }
 }
 
-static BOOL
-UIKit_ShowMessageBoxAlertController(const SDL_MessageBoxData *messageboxdata, int *buttonid)
+static BOOL UIKit_ShowMessageBoxAlertController(const SDL_MessageBoxData *messageboxdata, int *buttonid)
 {
     int i;
     int __block clickedindex = messageboxdata->numbuttons;
@@ -124,8 +121,7 @@ UIKit_ShowMessageBoxAlertController(const SDL_MessageBoxData *messageboxdata, in
     return YES;
 }
 
-static void
-UIKit_ShowMessageBoxImpl(const SDL_MessageBoxData *messageboxdata, int *buttonid, int *returnValue)
+static void UIKit_ShowMessageBoxImpl(const SDL_MessageBoxData *messageboxdata, int *buttonid, int *returnValue)
 { @autoreleasepool
 {
     if (UIKit_ShowMessageBoxAlertController(messageboxdata, buttonid)) {
@@ -135,8 +131,7 @@ UIKit_ShowMessageBoxImpl(const SDL_MessageBoxData *messageboxdata, int *buttonid
     }
 }}
 
-int
-UIKit_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid)
+int UIKit_ShowMessageBox(const SDL_MessageBoxData *messageboxdata, int *buttonid)
 { @autoreleasepool
 {
     __block int returnValue = 0;
diff --git a/src/video/uikit/SDL_uikitmetalview.m b/src/video/uikit/SDL_uikitmetalview.m
index c9decf5d4..6bb43eaa5 100644
--- a/src/video/uikit/SDL_uikitmetalview.m
+++ b/src/video/uikit/SDL_uikitmetalview.m
@@ -1,15 +1,15 @@
 /*
  Simple DirectMedia Layer
  Copyright (C) 1997-2023 Sam Lantinga <slouken@libsdl.org>
- 
+
  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.
- 
+
  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:
- 
+
  1. The origin of this software must not be misrepresented; you must not
  claim that you wrote the original software. If you use this software
  in a product, an acknowledgment in the product documentation would be
@@ -74,8 +74,7 @@
 
 @end
 
-SDL_MetalView
-UIKit_Metal_CreateView(_THIS, SDL_Window * window)
+SDL_MetalView UIKit_Metal_CreateView(_THIS, SDL_Window * window)
 { @autoreleasepool {
     SDL_WindowData *data = (__bridge SDL_WindowData *)window->driverdata;
     CGFloat scale = 1.0;
@@ -102,8 +101,7 @@ UIKit_Metal_CreateView(_THIS, SDL_Window * window)
     return (void*)CFBridgingRetain(metalview);
 }}
 
-void
-UIKit_Metal_DestroyView(_THIS, SDL_MetalView view)
+void UIKit_Metal_DestroyView(_THIS, SDL_MetalView view)
 { @autoreleasepool {
     SDL_uikitmetalview *metalview = CFBridgingRelease(view);
 
@@ -112,15 +110,13 @@ UIKit_Metal_DestroyView(_THIS, SDL_MetalView view)
     }
 }}
 
-void *
-UIKit_Metal_GetLayer(_THIS, SDL_MetalView view)
+void *UIKit_Metal_GetLayer(_THIS, SDL_MetalView view)
 { @autoreleasepool {
     SDL_uikitview *uiview = (__bridge SDL_uikitview *)view;
     return (__bridge void *)uiview.layer;
 }}
 
-void
-UIKit_Metal_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
+void UIKit_Metal_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
 {
     @autoreleasepool {
         SDL_WindowData *data = (__bridge SDL_WindowData *)window->driverdata;
diff --git a/src/video/uikit/SDL_uikitmodes.m b/src/video/uikit/SDL_uikitmodes.m
index 323dd51c0..e60badaec 100644
--- a/src/video/uikit/SDL_uikitmodes.m
+++ b/src/video/uikit/SDL_uikitmodes.m
@@ -215,9 +215,7 @@
 
 @end
 
-static int
-UIKit_AllocateDisplayModeData(SDL_DisplayMode * mode,
-    UIScreenMode * uiscreenmode)
+static int UIKit_AllocateDisplayModeData(SDL_DisplayMode * mode, UIScreenMode * uiscreenmode)
 {
     SDL_DisplayModeData *data = nil;
 
@@ -236,8 +234,7 @@ UIKit_AllocateDisplayModeData(SDL_DisplayMode * mode,
     return 0;
 }
 
-static void
-UIKit_FreeDisplayModeData(SDL_DisplayMode * mode)
+static void UIKit_FreeDisplayModeData(SDL_DisplayMode * mode)
 {
     if (mode->driverdata != NULL) {
         CFRelease(mode->driverdata);
@@ -245,8 +242,7 @@ UIKit_FreeDisplayModeData(SDL_DisplayMode * mode)
     }
 }
 
-static NSUInteger
-UIKit_GetDisplayModeRefreshRate(UIScreen *uiscreen)
+static NSUInteger UIKit_GetDisplayModeRefreshRate(UIScreen *uiscreen)
 {
 #ifdef __IPHONE_10_3
     if ([uiscreen respondsToSelector:@selector(maximumFramesPerSecond)]) {
@@ -256,9 +252,7 @@ UIKit_GetDisplayModeRefreshRate(UIScreen *uiscreen)
     return 0;
 }
 
-static int
-UIKit_AddSingleDisplayMode(SDL_VideoDisplay * display, int w, int h,
-    UIScreen * uiscreen, UIScreenMode * uiscreenmode)
+static int UIKit_AddSingleDisplayMode(SDL_VideoDisplay * display, int w, int h, UIScreen * uiscreen, UIScreenMode * uiscreenmode)
 {
     SDL_DisplayMode mode;
     SDL_zero(mode);
@@ -280,9 +274,7 @@ UIKit_AddSingleDisplayMode(SDL_VideoDisplay * display, int w, int h,
     }
 }
 
-static int
-UIKit_AddDisplayMode(SDL_VideoDisplay * display, int w, int h, UIScreen * uiscreen,
-                     UIScreenMode * uiscreenmode, SDL_bool addRotation)
+static int UIKit_AddDisplayMode(SDL_VideoDisplay * display, int w, int h, UIScreen * uiscreen, UIScreenMode * uiscreenmode, SDL_bool addRotation)
 {
     if (UIKit_AddSingleDisplayMode(display, w, h, uiscreen, uiscreenmode) < 0) {
         return -1;
@@ -298,8 +290,7 @@ UIKit_AddDisplayMode(SDL_VideoDisplay * display, int w, int h, UIScreen * uiscre
     return 0;
 }
 
-int
-UIKit_AddDisplay(UIScreen *uiscreen, SDL_bool send_event)
+int UIKit_AddDisplay(UIScreen *uiscreen, SDL_bool send_event)
 {
     UIScreenMode *uiscreenmode = uiscreen.currentMode;
     CGSize size = uiscreen.bounds.size;
@@ -340,8 +331,7 @@ UIKit_AddDisplay(UIScreen *uiscreen, SDL_bool send_event)
     return 0;
 }
 
-void
-UIKit_DelDisplay(UIScreen *uiscreen)
+void UIKit_DelDisplay(UIScreen *uiscreen)
 {
     int i;
 
@@ -356,8 +346,7 @@ UIKit_DelDisplay(UIScreen *uiscreen)
     }
 }
 
-SDL_bool
-UIKit_IsDisplayLandscape(UIScreen *uiscreen)
+SDL_bool UIKit_IsDisplayLandscape(UIScreen *uiscreen)
 {
 #if !TARGET_OS_TV
     if (uiscreen == [UIScreen mainScreen]) {
@@ -370,8 +359,7 @@ UIKit_IsDisplayLandscape(UIScreen *uiscreen)
     }
 }
 
-int
-UIKit_InitModes(_THIS)
+int UIKit_InitModes(_THIS)
 {
     @autoreleasepool {
         for (UIScreen *uiscreen in [UIScreen screens]) {
@@ -389,8 +377,7 @@ UIKit_InitModes(_THIS)
     return 0;
 }
 
-void
-UIKit_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
+void UIKit_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
 {
     @autoreleasepool {
         SDL_DisplayData *data = (__bridge SDL_DisplayData *) display->driverdata;
@@ -434,8 +421,7 @@ UIKit_GetDisplayModes(_THIS, SDL_VideoDisplay * display)
     }
 }
 
-int
-UIKit_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdpi, float * vdpi)
+int UIKit_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdpi, float * vdpi)
 {
     @autoreleasepool {
         SDL_DisplayData *data = (__bridge SDL_DisplayData *) display->driverdata;
@@ -455,8 +441,7 @@ UIKit_GetDisplayDPI(_THIS, SDL_VideoDisplay * display, float * ddpi, float * hdp
     return 0;
 }
 
-int
-UIKit_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
+int UIKit_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
 {
     @autoreleasepool {
         SDL_DisplayData *data = (__bridge SDL_DisplayData *) display->driverdata;
@@ -485,8 +470,7 @@ UIKit_SetDisplayMode(_THIS, SDL_VideoDisplay * display, SDL_DisplayMode * mode)
     return 0;
 }
 
-int
-UIKit_GetDisplayUsableBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
+int UIKit_GetDisplayUsableBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
 {
     @autoreleasepool {
         int displayIndex = (int) (display - _this->displays);
@@ -508,8 +492,7 @@ UIKit_GetDisplayUsableBounds(_THIS, SDL_VideoDisplay * display, SDL_Rect * rect)
     return 0;
 }
 
-void
-UIKit_QuitModes(_THIS)
+void UIKit_QuitModes(_THIS)
 {
     [SDL_DisplayWatch stop];
 
diff --git a/src/video/uikit/SDL_uikitopengles.m b/src/video/uikit/SDL_uikitopengles.m
index 6bccaf4c4..e0e7b5b38 100644
--- a/src/video/uikit/SDL_uikitopengles.m
+++ b/src/video/uikit/SDL_uikitopengles.m
@@ -52,8 +52,7 @@
 
 @end
 
-void *
-UIKit_GL_GetProcAddress(_THIS, const char *proc)
+void *UIKit_GL_GetProcAddress(_THIS, const char *proc)
 {
     /* Look through all SO's for the proc symbol.  Here's why:
      * -Looking for the path to the OpenGL Library seems not to work in the iOS Simulator.
@@ -64,8 +63,7 @@ UIKit_GL_GetProcAddress(_THIS, const char *proc)
 /*
   note that SDL_GL_DeleteContext makes it current without passing the window
 */
-int
-UIKit_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
+int UIKit_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
 {
     @autoreleasepool {
         SDLEAGLContext *eaglcontext = (__bridge SDLEAGLContext *) context;
@@ -82,8 +80,7 @@ UIKit_GL_MakeCurrent(_THIS, SDL_Window * window, SDL_GLContext context)
     return 0;
 }
 
-void
-UIKit_GL_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
+void UIKit_GL_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
 {
     @autoreleasepool {
         SDL_WindowData *data = (__bridge SDL_WindowData *)window->driverdata;
@@ -102,8 +99,7 @@ UIKit_GL_GetDrawableSize(_THIS, SDL_Window * window, int * w, int * h)
     }
 }
 
-int
-UIKit_GL_LoadLibrary(_THIS, const char *path)
+int UIKit_GL_LoadLibrary(_THIS, const char *path)
 {
     /* We shouldn't pass a path to this function, since we've already loaded the
      * library. */
@@ -132,8 +128,7 @@ int UIKit_GL_SwapWindow(_THIS, SDL_Window * window)
     return 0;
 }
 
-SDL_GLContext
-UIKit_GL_CreateContext(_THIS, SDL_Window * window)
+SDL_GLContext UIKit_GL_CreateContext(_THIS, SDL_Window * window)
 {
     @autoreleasepool {
         SDLEAGLContext *context = nil;
@@ -210,8 +205,7 @@ UIKit_GL_CreateContext(_THIS, SDL_Window * window)
     }
 }
 
-void
-UIKit_GL_DeleteContext(_THIS, SDL_GLContext context)
+void UIKit_GL_DeleteContext(_THIS, SDL_GLContext context)
 {
     @autoreleasepool {
         /* The context was retained in SDL_GL_CreateContext, so we release it
@@ -221,8 +215,7 @@ UIKit_GL_DeleteContext(_THIS, SDL_GLContext context)
     }
 }
 
-void
-UIKit_GL_RestoreCurrentContext(void)
+void UIKit_GL_RestoreCurrentContext(void)
 {
     @autoreleasepool {
         /* Some iOS system functionality (such as Dictation on the on-screen
diff --git a/src/video/uikit/SDL_uikitvideo.m b/src/video/uikit/SDL_uikitvideo.m
index b52d84e83..8b16c2399 100644
--- a/src/video/uikit/SDL_uikitvideo.m
+++ b/src/video/uikit/SDL_uikitvideo.m
@@ -60,8 +60,7 @@ static void UIKit_DeleteDevice(SDL_VideoDevice * device)
     }
 }
 
-static SDL_VideoDevice *
-UIKit_CreateDevice(void)
+static SDL_VideoDevice *UIKit_CreateDevice(void)
 {
     @autoreleasepool {
         SDL_VideoDevice *device;
@@ -152,8 +151,7 @@ VideoBootStrap UIKIT_bootstrap = {
 };
 
 
-int
-UIKit_VideoInit(_THIS)
+int UIKit_VideoInit(_THIS)
 {
     _this->gl_config.driver_loaded = 1;
 
@@ -167,8 +165,7 @@ UIKit_VideoInit(_THIS)
     return 0;
 }
 
-void
-UIKit_VideoQuit(_THIS)
+void UIKit_VideoQuit(_THIS)
 {
     SDL_QuitGCKeyboard();
     SDL_QuitGCMouse();
@@ -176,8 +173,7 @@ UIKit_VideoQuit(_THIS)
     UIKit_QuitModes(_this);
 }
 
-void
-UIKit_SuspendScreenSaver(_THIS)
+void UIKit_SuspendScreenSaver(_THIS)
 {
     @autoreleasepool {
         /* Ignore ScreenSaver API calls if the idle timer hint has been set. */
@@ -191,14 +187,12 @@ UIKit_SuspendScreenSaver(_THIS)
     }
 }
 
-SDL_bool
-UIKit_IsSystemVersionAtLeast(double version)
+SDL_bool UIKit_IsSystemVersionAtLeast(double version)
 {
     return [[UIDevice currentDevice].systemVersion doubleValue] >= version;
 }
 
-CGRect
-UIKit_ComputeViewFrame(SDL_Window *window, UIScreen *screen)
+CGRect UIKit_ComputeViewFrame(SDL_Window *window, UIScreen *screen)
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
     CGRect frame = screen.bounds;
@@ -236,8 +230,7 @@ UIKit_ComputeViewFrame(SDL_Window *window, UIScreen *screen)
     return frame;
 }
 
-void
-UIKit_ForceUpdateHomeIndicator()
+void UIKit_ForceUpdateHomeIndicator()
 {
 #if !TARGET_OS_TV
     /* Force the main SDL window to re-evaluate home indicator state */
diff --git a/src/video/uikit/SDL_uikitviewcontroller.m b/src/video/uikit/SDL_uikitviewcontroller.m
index a6b157f25..3baadd854 100644
--- a/src/video/uikit/SDL_uikitviewcontroller.m
+++ b/src/video/uikit/SDL_uikitviewcontroller.m
@@ -488,8 +488,7 @@ SDL_HideHomeIndicatorHintChanged(void *userdata, const char *name, const char *o
 /* iPhone keyboard addition functions */
 #if SDL_IPHONE_KEYBOARD
 
-static SDL_uikitviewcontroller *
-GetWindowViewController(SDL_Window * window)
+static SDL_uikitviewcontroller *GetWindowViewController(SDL_Window * window)
 {
     if (!window || !window->driverdata) {
         SDL_SetError("Invalid window");
@@ -501,14 +500,12 @@ GetWindowViewController(SDL_Window * window)
     return data.viewcontroller;
 }
 
-SDL_bool
-UIKit_HasScreenKeyboardSupport(_THIS)
+SDL_bool UIKit_HasScreenKeyboardSupport(_THIS)
 {
     return SDL_TRUE;
 }
 
-void
-UIKit_ShowScreenKeyboard(_THIS, SDL_Window *window)
+void UIKit_ShowScreenKeyboard(_THIS, SDL_Window *window)
 {
     @autoreleasepool {
         SDL_uikitviewcontroller *vc = GetWindowViewController(window);
@@ -516,8 +513,7 @@ UIKit_ShowScreenKeyboard(_THIS, SDL_Window *window)
     }
 }
 
-void
-UIKit_HideScreenKeyboard(_THIS, SDL_Window *window)
+void UIKit_HideScreenKeyboard(_THIS, SDL_Window *window)
 {
     @autoreleasepool {
         SDL_uikitviewcontroller *vc = GetWindowViewController(window);
@@ -525,8 +521,7 @@ UIKit_HideScreenKeyboard(_THIS, SDL_Window *window)
     }
 }
 
-SDL_bool
-UIKit_IsScreenKeyboardShown(_THIS, SDL_Window *window)
+SDL_bool UIKit_IsScreenKeyboardShown(_THIS, SDL_Window *window)
 {
     @autoreleasepool {
         SDL_uikitviewcontroller *vc = GetWindowViewController(window);
@@ -537,8 +532,7 @@ UIKit_IsScreenKeyboardShown(_THIS, SDL_Window *window)
     }
 }
 
-void
-UIKit_SetTextInputRect(_THIS, const SDL_Rect *rect)
+void UIKit_SetTextInputRect(_THIS, const SDL_Rect *rect)
 {
     if (!rect) {
         SDL_InvalidParamError("rect");
diff --git a/src/video/uikit/SDL_uikitwindow.m b/src/video/uikit/SDL_uikitwindow.m
index 0b9c51172..d69617983 100644
--- a/src/video/uikit/SDL_uikitwindow.m
+++ b/src/video/uikit/SDL_uikitwindow.m
@@ -84,8 +84,7 @@
 @end
 
 
-static int
-SetupWindowData(_THIS, SDL_Window *window, UIWindow *uiwindow, SDL_bool created)
+static int SetupWindowData(_THIS, SDL_Window *window, UIWindow *uiwindow, SDL_bool created)
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     SDL_DisplayData *displaydata = (__bridge SDL_DisplayData *) display->driverdata;
@@ -158,8 +157,7 @@ SetupWindowData(_THIS, SDL_Window *window, UIWindow *uiwindow, SDL_bool created)
     return 0;
 }
 
-int
-UIKit_CreateWindow(_THIS, SDL_Window *window)
+int UIKit_CreateWindow(_THIS, SDL_Window *window)
 {
     @autoreleasepool {
         SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -229,8 +227,7 @@ UIKit_CreateWindow(_THIS, SDL_Window *window)
     return 1;
 }
 
-void
-UIKit_SetWindowTitle(_THIS, SDL_Window * window)
+void UIKit_SetWindowTitle(_THIS, SDL_Window * window)
 {
     @autoreleasepool {
         SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -238,8 +235,7 @@ UIKit_SetWindowTitle(_THIS, SDL_Window * window)
     }
 }
 
-void
-UIKit_ShowWindow(_THIS, SDL_Window * window)
+void UIKit_ShowWindow(_THIS, SDL_Window * window)
 {
     @autoreleasepool {
         SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -255,8 +251,7 @@ UIKit_ShowWindow(_THIS, SDL_Window * window)
     }
 }
 
-void
-UIKit_HideWindow(_THIS, SDL_Window * window)
+void UIKit_HideWindow(_THIS, SDL_Window * window)
 {
     @autoreleasepool {
         SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -264,8 +259,7 @@ UIKit_HideWindow(_THIS, SDL_Window * window)
     }
 }
 
-void
-UIKit_RaiseWindow(_THIS, SDL_Window * window)
+void UIKit_RaiseWindow(_THIS, SDL_Window * window)
 {
     /* We don't currently offer a concept of "raising" the SDL window, since
      * we only allow one per display, in the iOS fashion.
@@ -274,8 +268,7 @@ UIKit_RaiseWindow(_THIS, SDL_Window * window)
     _this->GL_MakeCurrent(_this, _this->current_glwin, _this->current_glctx);
 }
 
-static void
-UIKit_UpdateWindowBorder(_THIS, SDL_Window * window)
+static void UIKit_UpdateWindowBorder(_THIS, SDL_Window * window)
 {
     SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
     SDL_uikitviewcontroller *viewcontroller = data.viewcontroller;
@@ -304,30 +297,26 @@ UIKit_UpdateWindowBorder(_THIS, SDL_Window * window)
     [viewcontroller.view layoutIfNeeded];
 }
 
-void
-UIKit_SetWindowBordered(_THIS, SDL_Window * window, SDL_bool bordered)
+void UIKit_SetWindowBordered(_THIS, SDL_Window * window, SDL_bool bordered)
 {
     @autoreleasepool {
         UIKit_UpdateWindowBorder(_this, window);
     }
 }
 
-void
-UIKit_SetWindowFullscreen(_THIS, SDL_Window * window, SDL_VideoDisplay * display, SDL_bool fullscreen)
+void UIKit_SetWindowFullscreen(_THIS, SDL_Window * window, SDL_VideoDisplay * display, SDL_bool fullscreen)
 {
     @autoreleasepool {
         UIKit_UpdateWindowBorder(_this, window);
     }
 }
 
-void
-UIKit_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
+void UIKit_SetWindowMouseGrab(_THIS, SDL_Window * window, SDL_bool grabbed)
 {
     /* There really isn't a concept of window grab or cursor confinement on iOS */
 }
 
-void
-UIKit_UpdatePointerLock(_THIS, SDL_Window * window)
+void UIKit_UpdatePointerLock(_THIS, SDL_Window * window)
 {
 #if !TARGET_OS_TV
 #if defined(__IPHONE_14_0) && __IPHONE_OS_VERSION_MAX_ALLOWED >= __IPHONE_14_0
@@ -342,8 +331,7 @@ UIKit_UpdatePointerLock(_THIS, SDL_Window * window)
 #endif /* !TARGET_OS_TV */
 }
 
-void
-UIKit_DestroyWindow(_THIS, SDL_Window * window)
+void UIKit_DestroyWindow(_THIS, SDL_Window * window)
 {
     @autoreleasepool {
         if (window->driverdata != NULL) {
@@ -373,8 +361,7 @@ UIKit_DestroyWindow(_THIS, SDL_Window * window)
     }
 }
 
-void
-UIKit_GetWindowSizeInPixels(_THIS, SDL_Window * window, int *w, int *h)
+void UIKit_GetWindowSizeInPixels(_THIS, SDL_Window * window, int *w, int *h)
 { @autoreleasepool
 {
     SDL_WindowData *windata = (__bridge SDL_WindowData *) window->driverdata;
@@ -392,8 +379,7 @@ UIKit_GetWindowSizeInPixels(_THIS, SDL_Window * window, int *w, int *h)
     *h = size.height * scale;
 }}
 
-SDL_bool
-UIKit_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
+SDL_bool UIKit_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 {
     @autoreleasepool {
         SDL_WindowData *data = (__bridge SDL_WindowData *) window->driverdata;
@@ -432,8 +418,7 @@ UIKit_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 }
 
 #if !TARGET_OS_TV
-NSUInteger
-UIKit_GetSupportedOrientations(SDL_Window * window)
+NSUInteger UIKit_GetSupportedOrientations(SDL_Window * window)
 {
     const char *hint = SDL_GetHint(SDL_HINT_ORIENTATIONS);
     NSUInteger validOrientations = UIInterfaceOrientationMaskAll;
@@ -499,8 +484,7 @@ UIKit_GetSupportedOrientations(SDL_Window * window)
 }
 #endif /* !TARGET_OS_TV */
 
-int
-SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, void (*callback)(void*), void *callbackParam)
+int SDL_iPhoneSetAnimationCallback(SDL_Window * window, int interval, void (*callback)(void*), void *callbackParam)
 {
     if (!window || !window->driverdata) {
         return SDL_SetError("Invalid window");
diff --git a/src/video/vita/SDL_vitagl_pvr.c b/src/video/vita/SDL_vitagl_pvr.c
index b4dd35179..ea920ad5a 100644
--- a/src/video/vita/SDL_vitagl_pvr.c
+++ b/src/video/vita/SDL_vitagl_pvr.c
@@ -82,8 +82,7 @@ int VITA_GL_LoadLibrary(_THIS, const char *path)
     return SDL_EGL_LoadLibrary(_this, path, (NativeDisplayType)0, 0);
 }
 
-SDL_GLContext
-VITA_GL_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext VITA_GL_CreateContext(_THIS, SDL_Window *window)
 {
     char gl_version[3];
     SDL_GLContext context = NULL;
@@ -117,8 +116,7 @@ VITA_GL_CreateContext(_THIS, SDL_Window *window)
     return context;
 }
 
-void *
-VITA_GL_GetProcAddress(_THIS, const char *proc)
+void *VITA_GL_GetProcAddress(_THIS, const char *proc)
 {
     return gl4es_GetProcAddress(proc);
 }
diff --git a/src/video/vita/SDL_vitagles.c b/src/video/vita/SDL_vitagles.c
index 3f1e846a0..89f29d36a 100644
--- a/src/video/vita/SDL_vitagles.c
+++ b/src/video/vita/SDL_vitagles.c
@@ -66,8 +66,7 @@ int VITA_GLES_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-void *
-VITA_GLES_GetProcAddress(_THIS, const char *proc)
+void *VITA_GLES_GetProcAddress(_THIS, const char *proc)
 {
     return eglGetProcAddress(proc);
 }
@@ -80,8 +79,7 @@ void VITA_GLES_UnloadLibrary(_THIS)
 static EGLint width = 960;
 static EGLint height = 544;
 
-SDL_GLContext
-VITA_GLES_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext VITA_GLES_CreateContext(_THIS, SDL_Window *window)
 {
 
     SDL_WindowData *wdata = (SDL_WindowData *)window->driverdata;
diff --git a/src/video/vita/SDL_vitagles_pvr.c b/src/video/vita/SDL_vitagles_pvr.c
index c76f9c000..711d1ddd3 100644
--- a/src/video/vita/SDL_vitagles_pvr.c
+++ b/src/video/vita/SDL_vitagles_pvr.c
@@ -42,8 +42,8 @@ int VITA_GLES_LoadLibrary(_THIS, const char *path)
     char *default_path = "app0:module";
     char target_path[MAX_PATH];
 
-    if (skip_init == NULL) { // we don't care about actual value 
-    
+    if (skip_init == NULL) { // we don't care about actual value
+
         if (override != NULL) {
             default_path = override;
         }
@@ -69,8 +69,7 @@ int VITA_GLES_LoadLibrary(_THIS, const char *path)
     return SDL_EGL_LoadLibrary(_this, path, (NativeDisplayType)0, 0);
 }
 
-SDL_GLContext
-VITA_GLES_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext VITA_GLES_CreateContext(_THIS, SDL_Window *window)
 {
     return SDL_EGL_CreateContext(_this, ((SDL_WindowData *)window->driverdata)->egl_surface);
 }
diff --git a/src/video/vita/SDL_vitavideo.c b/src/video/vita/SDL_vitavideo.c
index 3a8052072..9e823996e 100644
--- a/src/video/vita/SDL_vitavideo.c
+++ b/src/video/vita/SDL_vitavideo.c
@@ -377,8 +377,7 @@ void VITA_DestroyWindow(_THIS, SDL_Window *window)
 /*****************************************************************************/
 /* SDL Window Manager function                                               */
 /*****************************************************************************/
-SDL_bool
-VITA_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
+SDL_bool VITA_GetWindowWMInfo(_THIS, SDL_Window * window, struct SDL_SysWMinfo *info)
 {
     if (info->version.major <= SDL_MAJOR_VERSION) {
         return SDL_TRUE;
diff --git a/src/video/vivante/SDL_vivantevideo.c b/src/video/vivante/SDL_vivantevideo.c
index 969cff685..aaf645c45 100644
--- a/src/video/vivante/SDL_vivantevideo.c
+++ b/src/video/vivante/SDL_vivantevideo.c
@@ -361,8 +361,7 @@ void VIVANTE_HideWindow(_THIS, SDL_Window *window)
 /*****************************************************************************/
 /* SDL Window Manager function                                               */
 /*****************************************************************************/
-SDL_bool
-VIVANTE_GetWindowWMInfo(_THIS, SDL_Window *window, struct SDL_SysWMinfo *info)
+SDL_bool VIVANTE_GetWindowWMInfo(_THIS, SDL_Window *window, struct SDL_SysWMinfo *info)
 {
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
     SDL_DisplayData *displaydata = SDL_GetDisplayDriverData(0);
diff --git a/src/video/wayland/SDL_waylanddatamanager.c b/src/video/wayland/SDL_waylanddatamanager.c
index 224a5ce84..3d580ce6c 100644
--- a/src/video/wayland/SDL_waylanddatamanager.c
+++ b/src/video/wayland/SDL_waylanddatamanager.c
@@ -243,8 +243,7 @@ static void mime_data_list_free(struct wl_list *list)
     }
 }
 
-static ssize_t
-Wayland_source_send(SDL_MimeDataList *mime_data, const char *mime_type, int fd)
+static ssize_t Wayland_source_send(SDL_MimeDataList *mime_data, const char *mime_type, int fd)
 {
     size_t written_bytes = 0;
     ssize_t status = 0;
@@ -264,9 +263,7 @@ Wayland_source_send(SDL_MimeDataList *mime_data, const char *mime_type, int fd)
     return status;
 }
 
-ssize_t
-Wayland_data_source_send(SDL_WaylandDataSource *source,
-                         const char *mime_type, int fd)
+ssize_t Wayland_data_source_send(SDL_WaylandDataSource *source, const char *mime_type, int fd)
 {
     SDL_MimeDataList *mime_data = NULL;
 
@@ -277,9 +274,7 @@ Wayland_data_source_send(SDL_WaylandDataSource *source,
     return Wayland_source_send(mime_data, mime_type, fd);
 }
 
-ssize_t
-Wayland_primary_selection_source_send(SDL_WaylandPrimarySelectionSource *source,
-                                      const char *mime_type, int fd)
+ssize_t Wayland_primary_selection_source_send(SDL_WaylandPrimarySelectionSource *source, const char *mime_type, int fd)
 {
     SDL_MimeDataList *mime_data = NULL;
 
diff --git a/src/video/wayland/SDL_waylandmouse.c b/src/video/wayland/SDL_waylandmouse.c
index 99d93fb27..adc91271e 100644
--- a/src/video/wayland/SDL_waylandmouse.c
+++ b/src/video/wayland/SDL_waylandmouse.c
@@ -612,8 +612,7 @@ static void Wayland_RecreateCursor(SDL_Cursor *cursor, SDL_VideoData *vdata)
     wl_surface_set_user_data(cdata->surface, NULL);
 }
 
-void
-Wayland_RecreateCursors(void)
+void Wayland_RecreateCursors(void)
 {
     SDL_Cursor *cursor;
     SDL_Mouse *mouse = SDL_GetMouse();
diff --git a/src/video/wayland/SDL_waylandwindow.c b/src/video/wayland/SDL_waylandwindow.c
index 49d591bdd..c11ffcdf2 100644
--- a/src/video/wayland/SDL_waylandwindow.c
+++ b/src/video/wayland/SDL_waylandwindow.c
@@ -1174,8 +1174,7 @@ static const struct wl_surface_listener surface_listener = {
     handle_surface_leave
 };
 
-static void
-Wayland_FillEmptyShellInfo(SDL_SysWMinfo * info, const Uint32 version)
+static void Wayland_FillEmptyShellInfo(SDL_SysWMinfo * info, const Uint32 version)
 {
     info->info.wl.xdg_surface = NULL;
     if (version >= SDL_VERSIONNUM(2, 0, 17)) {
@@ -1187,8 +1186,7 @@ Wayland_FillEmptyShellInfo(SDL_SysWMinfo * info, const Uint32 version)
     }
 }
 
-SDL_bool
-Wayland_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
+SDL_bool Wayland_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 {
     SDL_VideoData *viddata = (SDL_VideoData *) _this->driverdata;
     SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
diff --git a/src/video/windows/SDL_windowsclipboard.c b/src/video/windows/SDL_windowsclipboard.c
index e2542d8e3..bd43fc574 100644
--- a/src/video/windows/SDL_windowsclipboard.c
+++ b/src/video/windows/SDL_windowsclipboard.c
@@ -100,8 +100,7 @@ int WIN_SetClipboardText(_THIS, const char *text)
     return result;
 }
 
-char *
-WIN_GetClipboardText(_THIS)
+char *WIN_GetClipboardText(_THIS)
 {
     char *text;
 
@@ -127,8 +126,7 @@ WIN_GetClipboardText(_THIS)
     return text;
 }
 
-SDL_bool
-WIN_HasClipboardText(_THIS)
+SDL_bool WIN_HasClipboardText(_THIS)
 {
     SDL_bool result = SDL_FALSE;
     char *text = WIN_GetClipboardText(_this);
diff --git a/src/video/windows/SDL_windowskeyboard.c b/src/video/windows/SDL_windowskeyboard.c
index 215ca6d75..d4d2238a7 100644
--- a/src/video/windows/SDL_windowskeyboard.c
+++ b/src/video/windows/SDL_windowskeyboard.c
@@ -287,8 +287,7 @@ SDL_bool WIN_IsTextInputShown(_THIS)
     return SDL_FALSE;
 }
 
-SDL_bool
-IME_HandleMessage(HWND hwnd, UINT msg, WPARAM wParam, LPARAM *lParam, SDL_VideoData *videodata)
+SDL_bool IME_HandleMessage(HWND hwnd, UINT msg, WPARAM wParam, LPARAM *lParam, SDL_VideoData *videodata)
 {
     return SDL_FALSE;
 }
@@ -999,8 +998,7 @@ static void IME_HideCandidateList(SDL_VideoData *videodata)
     IME_SendEditingEvent(videodata);
 }
 
-SDL_bool
-IME_HandleMessage(HWND hwnd, UINT msg, WPARAM wParam, LPARAM *lParam, SDL_VideoData *videodata)
+SDL_bool IME_HandleMessage(HWND hwnd, UINT msg, WPARAM wParam, LPARAM *lParam, SDL_VideoData *videodata)
 {
     SDL_bool trap = SDL_FALSE;
     HIMC himc = 0;
diff --git a/src/video/windows/SDL_windowsopengl.c b/src/video/windows/SDL_windowsopengl.c
index 02caf47b3..70dac8eae 100644
--- a/src/video/windows/SDL_windowsopengl.c
+++ b/src/video/windows/SDL_windowsopengl.c
@@ -214,8 +214,7 @@ int WIN_GL_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-void *
-WIN_GL_GetProcAddress(_THIS, const char *proc)
+void *WIN_GL_GetProcAddress(_THIS, const char *proc)
 {
     void *func;
 
@@ -689,8 +688,7 @@ int WIN_GL_SetupWindow(_THIS, SDL_Window *window)
     return retval;
 }
 
-SDL_bool
-WIN_GL_UseEGL(_THIS)
+SDL_bool WIN_GL_UseEGL(_THIS)
 {
     SDL_assert(_this->gl_data != NULL);
     SDL_assert(_this->gl_config.profile_mask == SDL_GL_CONTEXT_PROFILE_ES);
@@ -698,8 +696,7 @@ WIN_GL_UseEGL(_THIS)
     return SDL_GetHintBoolean(SDL_HINT_OPENGL_ES_DRIVER, SDL_FALSE) || _this->gl_config.major_version == 1 || _this->gl_config.major_version > _this->gl_data->es_profile_max_supported_version.major || (_this->gl_config.major_version == _this->gl_data->es_profile_max_supported_version.major && _this->gl_config.minor_version > _this->gl_data->es_profile_max_supported_version.minor); /* No WGL extension for OpenGL ES 1.x profiles. */
 }
 
-SDL_GLContext
-WIN_GL_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext WIN_GL_CreateContext(_THIS, SDL_Window *window)
 {
     HDC hdc = ((SDL_WindowData *)window->driverdata)->hdc;
     HGLRC context, share_context;
@@ -717,7 +714,7 @@ WIN_GL_CreateContext(_THIS, SDL_Window *window)
         _this->GL_GetSwapInterval = WIN_GLES_GetSwapInterval;
         _this->GL_SwapWindow = WIN_GLES_SwapWindow;
         _this->GL_DeleteContext = WIN_GLES_DeleteContext;
-        
+
         if (WIN_GLES_LoadLibrary(_this, NULL) != 0) {
             return NULL;
         }
@@ -894,8 +891,7 @@ void WIN_GL_DeleteContext(_THIS, SDL_GLContext context)
     _this->gl_data->wglDeleteContext((HGLRC)context);
 }
 
-SDL_bool
-WIN_GL_SetPixelFormatFrom(_THIS, SDL_Window *fromWindow, SDL_Window *toWindow)
+SDL_bool WIN_GL_SetPixelFormatFrom(_THIS, SDL_Window *fromWindow, SDL_Window *toWindow)
 {
     HDC hfromdc = ((SDL_WindowData *)fromWindow->driverdata)->hdc;
     HDC htodc = ((SDL_WindowData *)toWindow->driverdata)->hdc;
diff --git a/src/video/windows/SDL_windowsopengles.c b/src/video/windows/SDL_windowsopengles.c
index 2c0748c04..d410141ea 100644
--- a/src/video/windows/SDL_windowsopengles.c
+++ b/src/video/windows/SDL_windowsopengles.c
@@ -58,8 +58,7 @@ int WIN_GLES_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-SDL_GLContext
-WIN_GLES_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext WIN_GLES_CreateContext(_THIS, SDL_Window *window)
 {
     SDL_GLContext context;
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
diff --git a/src/video/windows/SDL_windowsshape.c b/src/video/windows/SDL_windowsshape.c
index 034aa0abc..9aa75d2cb 100644
--- a/src/video/windows/SDL_windowsshape.c
+++ b/src/video/windows/SDL_windowsshape.c
@@ -25,8 +25,7 @@
 #include "SDL_windowsshape.h"
 #include "SDL_windowsvideo.h"
 
-SDL_WindowShaper *
-Win32_CreateShaper(SDL_Window *window)
+SDL_WindowShaper *Win32_CreateShaper(SDL_Window *window)
 {
     int resized_properly;
     SDL_WindowShaper *result = (SDL_WindowShaper *)SDL_malloc(sizeof(SDL_WindowShaper));
diff --git a/src/video/windows/SDL_windowsvideo.c b/src/video/windows/SDL_windowsvideo.c
index e7bcfe940..5621293f5 100644
--- a/src/video/windows/SDL_windowsvideo.c
+++ b/src/video/windows/SDL_windowsvideo.c
@@ -486,8 +486,7 @@ void WIN_VideoQuit(_THIS)
 #endif
 #endif
 
-SDL_bool
-D3D_LoadDLL(void **pD3DDLL, IDirect3D9 **pDirect3D9Interface)
+SDL_bool D3D_LoadDLL(void **pD3DDLL, IDirect3D9 **pDirect3D9Interface)
 {
     *pD3DDLL = SDL_LoadObject("D3D9.DLL");
     if (*pD3DDLL) {
@@ -604,8 +603,7 @@ static SDL_bool DXGI_LoadDLL(void **pDXGIDLL, IDXGIFactory **pDXGIFactory)
 }
 #endif
 
-SDL_bool
-SDL_DXGIGetOutputInfo(int displayIndex, int *adapterIndex, int *outputIndex)
+SDL_bool SDL_DXGIGetOutputInfo(int displayIndex, int *adapterIndex, int *outputIndex)
 {
 #if !HAVE_DXGI_H
     if (adapterIndex) {
@@ -682,8 +680,7 @@ SDL_DXGIGetOutputInfo(int displayIndex, int *adapterIndex, int *outputIndex)
 #endif
 }
 
-SDL_bool
-WIN_IsPerMonitorV2DPIAware(_THIS)
+SDL_bool WIN_IsPerMonitorV2DPIAware(_THIS)
 {
 #if !defined(__XBOXONE__) && !defined(__XBOXSERIES__)
     SDL_VideoData *data = (SDL_VideoData *)_this->driverdata;
diff --git a/src/video/windows/SDL_windowswindow.c b/src/video/windows/SDL_windowswindow.c
index 796b2a538..874418bae 100644
--- a/src/video/windows/SDL_windowswindow.c
+++ b/src/video/windows/SDL_windowswindow.c
@@ -997,8 +997,7 @@ void WIN_SetWindowFullscreen(_THIS, SDL_Window *window, SDL_VideoDisplay *displa
 }
 
 #if !defined(__XBOXONE__) && !defined(__XBOXSERIES__)
-int
-WIN_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
+int WIN_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     SDL_DisplayData *data = (SDL_DisplayData *) display->driverdata;
@@ -1016,8 +1015,7 @@ WIN_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
     return succeeded ? 0 : -1;
 }
 
-void
-WIN_UpdateWindowICCProfile(SDL_Window * window, SDL_bool send_event)
+void WIN_UpdateWindowICCProfile(SDL_Window * window, SDL_bool send_event)
 {
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
@@ -1046,8 +1044,7 @@ WIN_UpdateWindowICCProfile(SDL_Window * window, SDL_bool send_event)
     }
 }
 
-void *
-WIN_GetWindowICCProfile(_THIS, SDL_Window *window, size_t *size)
+void *WIN_GetWindowICCProfile(_THIS, SDL_Window *window, size_t *size)
 {
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
     char *filename_utf8;
@@ -1066,8 +1063,7 @@ WIN_GetWindowICCProfile(_THIS, SDL_Window *window, size_t *size)
     return iccProfileData;
 }
 
-int
-WIN_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
+int WIN_GetWindowGammaRamp(_THIS, SDL_Window * window, Uint16 * ramp)
 {
     SDL_VideoDisplay *display = SDL_GetDisplayForWindow(window);
     SDL_DisplayData *data = (SDL_DisplayData *) display->driverdata;
@@ -1166,8 +1162,7 @@ void WIN_DestroyWindow(_THIS, SDL_Window *window)
     CleanupWindowData(_this, window);
 }
 
-SDL_bool
-WIN_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
+SDL_bool WIN_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 {
     const SDL_WindowData *data = (const SDL_WindowData *) window->driverdata;
     if (info->version.major <= SDL_MAJOR_VERSION) {
diff --git a/src/video/winrt/SDL_winrtpointerinput.cpp b/src/video/winrt/SDL_winrtpointerinput.cpp
index e62dcafd2..e80d99dfe 100644
--- a/src/video/winrt/SDL_winrtpointerinput.cpp
+++ b/src/video/winrt/SDL_winrtpointerinput.cpp
@@ -112,8 +112,7 @@ WINRT_TransformCursorPosition(SDL_Window *window,
     return outputPosition;
 }
 
-SDL_bool
-WINRT_GetSDLButtonForPointerPoint(Windows::UI::Input::PointerPoint ^ pt, Uint8 *button, Uint8 *pressed)
+SDL_bool WINRT_GetSDLButtonForPointerPoint(Windows::UI::Input::PointerPoint ^ pt, Uint8 *button, Uint8 *pressed)
 {
     using namespace Windows::UI::Input;
 
diff --git a/src/video/winrt/SDL_winrtvideo.cpp b/src/video/winrt/SDL_winrtvideo.cpp
index 4618826f0..9a38e6ccc 100644
--- a/src/video/winrt/SDL_winrtvideo.cpp
+++ b/src/video/winrt/SDL_winrtvideo.cpp
@@ -795,8 +795,7 @@ void WINRT_DestroyWindow(_THIS, SDL_Window *window)
     }
 }
 
-SDL_bool
-WINRT_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
+SDL_bool WINRT_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 {
     SDL_WindowData * data = (SDL_WindowData *) window->driverdata;
 
diff --git a/src/video/x11/SDL_x11clipboard.c b/src/video/x11/SDL_x11clipboard.c
index 387307a24..6c84278f4 100644
--- a/src/video/x11/SDL_x11clipboard.c
+++ b/src/video/x11/SDL_x11clipboard.c
@@ -231,8 +231,7 @@ int X11_SetPrimarySelectionText(_THIS, const char *text)
     return SetSelectionText(_this, text, XA_PRIMARY);
 }
 
-char *
-X11_GetClipboardText(_THIS)
+char *X11_GetClipboardText(_THIS)
 {
     SDL_VideoData *videodata = (SDL_VideoData *)_this->driverdata;
     Atom XA_CLIPBOARD = X11_XInternAtom(videodata->display, "CLIPBOARD", 0);
@@ -243,14 +242,12 @@ X11_GetClipboardText(_THIS)
     return GetSlectionText(_this, XA_CLIPBOARD);
 }
 
-char *
-X11_GetPrimarySelectionText(_THIS)
+char *X11_GetPrimarySelectionText(_THIS)
 {
     return GetSlectionText(_this, XA_PRIMARY);
 }
 
-SDL_bool
-X11_HasClipboardText(_THIS)
+SDL_bool X11_HasClipboardText(_THIS)
 {
     SDL_bool result = SDL_FALSE;
     char *text = X11_GetClipboardText(_this);
@@ -261,8 +258,7 @@ X11_HasClipboardText(_THIS)
     return result;
 }
 
-SDL_bool
-X11_HasPrimarySelectionText(_THIS)
+SDL_bool X11_HasPrimarySelectionText(_THIS)
 {
     SDL_bool result = SDL_FALSE;
     char *text = X11_GetPrimarySelectionText(_this);
diff --git a/src/video/x11/SDL_x11framebuffer.c b/src/video/x11/SDL_x11framebuffer.c
index 161c8e603..f9ce74afe 100644
--- a/src/video/x11/SDL_x11framebuffer.c
+++ b/src/video/x11/SDL_x11framebuffer.c
@@ -30,8 +30,7 @@
 /* Shared memory error handler routine */
 static int shm_error;
 static int (*X_handler)(Display *, XErrorEvent *) = NULL;
-static int
-shm_errhandler(Display *d, XErrorEvent *e)
+static int shm_errhandler(Display *d, XErrorEvent *e)
 {
     if (e->error_code == BadAccess) {
         shm_error = True;
diff --git a/src/video/x11/SDL_x11keyboard.c b/src/video/x11/SDL_x11keyboard.c
index 5f7c2bb79..12818ed69 100644
--- a/src/video/x11/SDL_x11keyboard.c
+++ b/src/video/x11/SDL_x11keyboard.c
@@ -461,8 +461,7 @@ void X11_SetTextInputRect(_THIS, const SDL_Rect *rect)
 #endif
 }
 
-SDL_bool
-X11_HasScreenKeyboardSupport(_THIS)
+SDL_bool X11_HasScreenKeyboardSupport(_THIS)
 {
     SDL_VideoData *videodata = (SDL_VideoData *)_this->driverdata;
     return videodata->is_steam_deck;
@@ -495,8 +494,7 @@ void X11_HideScreenKeyboard(_THIS, SDL_Window *window)
     }
 }
 
-SDL_bool
-X11_IsScreenKeyboardShown(_THIS, SDL_Window *window)
+SDL_bool X11_IsScreenKeyboardShown(_THIS, SDL_Window *window)
 {
     SDL_VideoData *videodata = (SDL_VideoData *)_this->driverdata;
 
diff --git a/src/video/x11/SDL_x11modes.c b/src/video/x11/SDL_x11modes.c
index e60017ef0..c952a0a11 100644
--- a/src/video/x11/SDL_x11modes.c
+++ b/src/video/x11/SDL_x11modes.c
@@ -87,8 +87,7 @@ int X11_GetVisualInfoFromVisual(Display *display, Visual *visual, XVisualInfo *v
     return -1;
 }
 
-Uint32
-X11_GetPixelFormatFromVisualInfo(Display *display, XVisualInfo *vinfo)
+Uint32 X11_GetPixelFormatFromVisualInfo(Display *display, XVisualInfo *vinfo)
 {
     if (vinfo->class == DirectColor || vinfo->class == TrueColor) {
         int bpp;
diff --git a/src/video/x11/SDL_x11opengl.c b/src/video/x11/SDL_x11opengl.c
index c76b734fc..d71527721 100644
--- a/src/video/x11/SDL_x11opengl.c
+++ b/src/video/x11/SDL_x11opengl.c
@@ -274,8 +274,7 @@ int X11_GL_LoadLibrary(_THIS, const char *path)
     return 0;
 }
 
-void *
-X11_GL_GetProcAddress(_THIS, const char *proc)
+void *X11_GL_GetProcAddress(_THIS, const char *proc)
 {
     if (_this->gl_data->glXGetProcAddress) {
         return _this->gl_data->glXGetProcAddress((const GLubyte *)proc);
@@ -608,8 +607,7 @@ static int X11_GL_GetAttributes(_THIS, Display *display, int screen, int *attrib
     return i;
 }
 
-XVisualInfo *
-X11_GL_GetVisual(_THIS, Display *display, int screen)
+XVisualInfo *X11_GL_GetVisual(_THIS, Display *display, int screen)
 {
     /* 64 seems nice. */
     int attribs[64];
@@ -680,8 +678,7 @@ static int X11_GL_ErrorHandler(Display *d, XErrorEvent *e)
     return (0);
 }
 
-SDL_bool
-X11_GL_UseEGL(_THIS)
+SDL_bool X11_GL_UseEGL(_THIS)
 {
     SDL_assert(_this->gl_data != NULL);
     if (SDL_GetHintBoolean(SDL_HINT_VIDEO_X11_FORCE_EGL, SDL_FALSE))
@@ -695,8 +692,7 @@ X11_GL_UseEGL(_THIS)
             || _this->gl_config.major_version > _this->gl_data->es_profile_max_supported_version.major || (_this->gl_config.major_version == _this->gl_data->es_profile_max_supported_version.major && _this->gl_config.minor_version > _this->gl_data->es_profile_max_supported_version.minor));
 }
 
-SDL_GLContext
-X11_GL_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext X11_GL_CreateContext(_THIS, SDL_Window *window)
 {
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
     Display *display = data->videodata->display;
diff --git a/src/video/x11/SDL_x11opengles.c b/src/video/x11/SDL_x11opengles.c
index 925f52f00..4d38a71e8 100644
--- a/src/video/x11/SDL_x11opengles.c
+++ b/src/video/x11/SDL_x11opengles.c
@@ -52,12 +52,11 @@ int X11_GLES_LoadLibrary(_THIS, const char *path)
         return SDL_SetError("SDL not configured with OpenGL/GLX support");
 #endif
     }
-    
+
     return SDL_EGL_LoadLibrary(_this, path, (NativeDisplayType) data->display, 0);
 }
 
-XVisualInfo *
-X11_GLES_GetVisual(_THIS, Display *display, int screen)
+XVisualInfo *X11_GLES_GetVisual(_THIS, Display *display, int screen)
 {
 
     XVisualInfo *egl_visualinfo = NULL;
@@ -89,8 +88,7 @@ X11_GLES_GetVisual(_THIS, Display *display, int screen)
     return egl_visualinfo;
 }
 
-SDL_GLContext
-X11_GLES_CreateContext(_THIS, SDL_Window *window)
+SDL_GLContext X11_GLES_CreateContext(_THIS, SDL_Window *window)
 {
     SDL_GLContext context;
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
diff --git a/src/video/x11/SDL_x11shape.c b/src/video/x11/SDL_x11shape.c
index 1123ae050..4a8d9462f 100644
--- a/src/video/x11/SDL_x11shape.c
+++ b/src/video/x11/SDL_x11shape.c
@@ -27,8 +27,7 @@
 #include "SDL_x11window.h"
 #include "../SDL_shape_internals.h"
 
-SDL_WindowShaper *
-X11_CreateShaper(SDL_Window *window)
+SDL_WindowShaper *X11_CreateShaper(SDL_Window *window)
 {
     SDL_WindowShaper *result = NULL;
     SDL_ShapeData *data = NULL;
diff --git a/src/video/x11/SDL_x11video.c b/src/video/x11/SDL_x11video.c
index 16e8cb2e5..e2b36a849 100644
--- a/src/video/x11/SDL_x11video.c
+++ b/src/video/x11/SDL_x11video.c
@@ -498,8 +498,7 @@ void X11_VideoQuit(_THIS)
     X11_QuitTouch(_this);
 }
 
-SDL_bool
-X11_UseDirectColorVisuals(void)
+SDL_bool X11_UseDirectColorVisuals(void)
 {
     return SDL_getenv("SDL_VIDEO_X11_NODIRECTCOLOR") ? SDL_FALSE : SDL_TRUE;
 }
diff --git a/src/video/x11/SDL_x11window.c b/src/video/x11/SDL_x11window.c
index 4d36f00d0..5b575f273 100644
--- a/src/video/x11/SDL_x11window.c
+++ b/src/video/x11/SDL_x11window.c
@@ -45,13 +45,11 @@
 #define _NET_WM_STATE_REMOVE 0l
 #define _NET_WM_STATE_ADD    1l
 
-static Bool
-isMapNotify(Display *dpy, XEvent *ev, XPointer win) /* NOLINT(readability-non-const-parameter): cannot make XPointer a const pointer due to typedef */
+static Bool isMapNotify(Display *dpy, XEvent *ev, XPointer win) /* NOLINT(readability-non-const-parameter): cannot make XPointer a const pointer due to typedef */
 {
     return ev->type == MapNotify && ev->xmap.window == *((Window *)win);
 }
-static Bool
-isUnmapNotify(Display *dpy, XEvent *ev, XPointer win) /* NOLINT(readability-non-const-parameter): cannot make XPointer a const pointer due to typedef */
+static Bool isUnmapNotify(Display *dpy, XEvent *ev, XPointer win) /* NOLINT(readability-non-const-parameter): cannot make XPointer a const pointer due to typedef */
 {
     return ev->type == UnmapNotify && ev->xunmap.window == *((Window *)win);
 }
@@ -168,8 +166,7 @@ void X11_SetNetWMState(_THIS, Window xwindow, Uint32 flags)
     }
 }
 
-Uint32
-X11_GetNetWMState(_THIS, SDL_Window *window, Window xwindow)
+Uint32 X11_GetNetWMState(_THIS, SDL_Window *window, Window xwindow)
 {
     SDL_VideoData *videodata = (SDL_VideoData *)_this->driverdata;
     Display *display = videodata->display;
@@ -697,8 +694,7 @@ int X11_CreateWindowFrom(_THIS, SDL_Window *window, const void *data)
     return 0;
 }
 
-char *
-X11_GetWindowTitle(_THIS, Window xwindow)
+char *X11_GetWindowTitle(_THIS, Window xwindow)
 {
     SDL_VideoData *data = (SDL_VideoData *)_this->driverdata;
     Display *display = data->display;
@@ -1480,8 +1476,7 @@ void X11_SetWindowFullscreen(_THIS, SDL_Window *window, SDL_VideoDisplay *_displ
     X11_SetWindowFullscreenViaWM(_this, window, _display, fullscreen);
 }
 
-int
-X11_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
+int X11_SetWindowGammaRamp(_THIS, SDL_Window * window, const Uint16 * ramp)
 {
     SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
     Display *display = data->videodata->display;
@@ -1579,8 +1574,7 @@ static void X11_ReadProperty(SDL_x11Prop *p, Display *disp, Window w, Atom prop)
     p->type = type;
 }
 
-void *
-X11_GetWindowICCProfile(_THIS, SDL_Window *window, size_t *size)
+void *X11_GetWindowICCProfile(_THIS, SDL_Window *window, size_t *size)
 {
     SDL_WindowData *data = (SDL_WindowData *)window->driverdata;
     Display *display = data->videodata->display;
@@ -1763,8 +1757,7 @@ void X11_DestroyWindow(_THIS, SDL_Window *window)
     window->driverdata = NULL;
 }
 
-SDL_bool
-X11_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
+SDL_bool X11_GetWindowWMInfo(_THIS, SDL_Window * window, SDL_SysWMinfo * info)
 {
     SDL_WindowData *data = (SDL_WindowData *) window->driverdata;
     Display *display;
-- 
2.17.1

