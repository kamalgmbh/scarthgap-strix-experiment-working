From 8f0f5f7a73ed08e388129e6e102a0aa6610ed513 Mon Sep 17 00:00:00 2001
From: Jiqian Chen <Jiqian.Chen@amd.com>
Date: Tue, 4 Apr 2023 18:03:23 +0800
Subject: [PATCH 21/49] xen/pvh: change discontig_frames from global to local

When create multiple process, they will create contiguous
region in the same time. At this moment, the frames of one
process in discontig_frames might be covered by another.
So, we need to record disconting frames alone for each
process.

Signed-off-by: Huang Rui <ray.huang@amd.com>
---
 arch/x86/xen/enlighten_pvh.c | 39 ++++++++++++++++++++----------------
 1 file changed, 22 insertions(+), 17 deletions(-)

diff --git a/arch/x86/xen/enlighten_pvh.c b/arch/x86/xen/enlighten_pvh.c
index c16f0de4ca13..1782030123e3 100644
--- a/arch/x86/xen/enlighten_pvh.c
+++ b/arch/x86/xen/enlighten_pvh.c
@@ -27,7 +27,6 @@ bool __ro_after_init xen_pvh;
 EXPORT_SYMBOL_GPL(xen_pvh);
 
 #define MAX_CONTIG_ORDER 9 /* 2MB */
-static unsigned long discontig_frames[1<<MAX_CONTIG_ORDER];
 static DEFINE_SPINLOCK(xen_reservation_lock);
 
 void __init xen_pvh_init(struct boot_params *boot_params)
@@ -119,10 +118,10 @@ int xen_pvh_create_contiguous_region(phys_addr_t pstart, unsigned int order,
 				     unsigned int address_bits,
 				     dma_addr_t *dma_handle)
 {
-	unsigned long *in_frames = discontig_frames, out_frame;
+	unsigned long *in_frames, out_frame;
 	unsigned long  flags;
 	int            success;
-	unsigned long vstart = (unsigned long)phys_to_virt(pstart);
+	unsigned long vaddr, vstart = (unsigned long)phys_to_virt(pstart);
 
 	/*
 	 * Currently an auto-translated guest will not perform I/O, nor will
@@ -133,12 +132,14 @@ int xen_pvh_create_contiguous_region(phys_addr_t pstart, unsigned int order,
 	if (unlikely(order > MAX_CONTIG_ORDER))
 		return -ENOMEM;
 
-	if (in_frames) {
-		unsigned long vaddr = vstart;
-		int i;
-		for (i = 0; i < (1UL<<order); i++, vaddr += PAGE_SIZE)
-			in_frames[i] = virt_to_pfn(vaddr);
-	}
+	in_frames = kmalloc_array(1UL << order,
+				  sizeof(unsigned long), GFP_KERNEL);
+	if (!in_frames)
+		return -ENOMEM;
+
+	vaddr = vstart;
+	for (int i = 0; i < (1UL<<order); i++, vaddr += PAGE_SIZE)
+		in_frames[i] = virt_to_pfn(vaddr);
 
 	memset((void *) vstart, 0, PAGE_SIZE << order);
 
@@ -151,6 +152,7 @@ int xen_pvh_create_contiguous_region(phys_addr_t pstart, unsigned int order,
 				      address_bits);
 
 	spin_unlock_irqrestore(&xen_reservation_lock, flags);
+	kfree(in_frames);
 
 	*dma_handle = out_frame << PAGE_SHIFT;
 	return success ? 0 : -ENOMEM;
@@ -158,10 +160,10 @@ int xen_pvh_create_contiguous_region(phys_addr_t pstart, unsigned int order,
 
 void xen_pvh_destroy_contiguous_region(phys_addr_t pstart, unsigned int order)
 {
-	unsigned long *out_frames = discontig_frames, in_frame;
+	unsigned long *out_frames, in_frame;
 	unsigned long  flags;
 	int success;
-	unsigned long vstart;
+	unsigned long vaddr, vstart;
 
 	if (unlikely(order > MAX_CONTIG_ORDER))
 		return;
@@ -174,16 +176,19 @@ void xen_pvh_destroy_contiguous_region(phys_addr_t pstart, unsigned int order)
 	/* 1. Find start MFN of contiguous extent. */
 	in_frame = virt_to_mfn(vstart);
 
-	if (out_frames) {
-		unsigned long vaddr = vstart;
-		int i;
-		for (i = 0; i < (1UL<<order); i++, vaddr += PAGE_SIZE)
-			out_frames[i] = virt_to_pfn(vaddr);
-	}
+	out_frames = kmalloc_array(1UL << order,
+				  sizeof(unsigned long), GFP_KERNEL);
+	if (!out_frames)
+		return;
+
+	vaddr = vstart;
+	for (int i = 0; i < (1UL<<order); i++, vaddr += PAGE_SIZE)
+		out_frames[i] = virt_to_pfn(vaddr);
 
 	/* 3. Do the exchange for non-contiguous MFNs. */
 	success = xen_pvh_exchange_memory(1, order, &in_frame, 1UL << order, 0,
 					  out_frames, 0);
 
 	spin_unlock_irqrestore(&xen_reservation_lock, flags);
+	kfree(out_frames);
 }
-- 
2.17.1

