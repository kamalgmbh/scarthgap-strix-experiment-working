From 0bb606274e714522695e7f755e0719f788298f1e Mon Sep 17 00:00:00 2001
From: Huang Rui <ray.huang@amd.com>
Date: Tue, 14 Feb 2023 14:45:03 +0800
Subject: [PATCH 15/49] xen: introduce a new DMA ops for physically contiguous
 buffer support

Signed-off-by: Huang Rui <ray.huang@amd.com>
---
 drivers/xen/Makefile      |  2 +-
 drivers/xen/phy-dma-ops.c | 69 +++++++++++++++++++++++++++++++++++++++
 include/xen/phy-dma-ops.h | 10 ++++++
 3 files changed, 80 insertions(+), 1 deletion(-)
 create mode 100644 drivers/xen/phy-dma-ops.c
 create mode 100644 include/xen/phy-dma-ops.h

diff --git a/drivers/xen/Makefile b/drivers/xen/Makefile
index c0503f1c7d5b..79281b12b356 100644
--- a/drivers/xen/Makefile
+++ b/drivers/xen/Makefile
@@ -1,7 +1,7 @@
 # SPDX-License-Identifier: GPL-2.0
 obj-$(CONFIG_HOTPLUG_CPU)		+= cpu_hotplug.o
 obj-y	+= grant-table.o features.o balloon.o manage.o time.o
-obj-y	+= mem-reservation.o
+obj-y	+= mem-reservation.o phy-dma-ops.o
 obj-y	+= events/
 obj-y	+= xenbus/
 
diff --git a/drivers/xen/phy-dma-ops.c b/drivers/xen/phy-dma-ops.c
new file mode 100644
index 000000000000..84b345942246
--- /dev/null
+++ b/drivers/xen/phy-dma-ops.c
@@ -0,0 +1,69 @@
+/* Provide the contiguous buffer for Xen PVH guests */
+#define pr_fmt(fmt) "xen:" KBUILD_MODNAME ": " fmt
+
+#include <linux/memblock.h>
+#include <linux/dma-direct.h>
+#include <linux/dma-map-ops.h>
+#include <linux/export.h>
+#include <xen/page.h>
+#include <xen/xen-ops.h>
+#include <xen/phy-dma-ops.h>
+#include <xen/swiotlb-xen.h>
+
+#include <asm/dma-mapping.h>
+
+#define MAX_DMA_BITS 32
+
+
+static void *
+xen_phy_alloc_coherent(struct device *dev, size_t size,
+		dma_addr_t *dma_handle, gfp_t flags, unsigned long attrs)
+{
+	u64 dma_mask = dev->coherent_dma_mask;
+	int order = get_order(size);
+	phys_addr_t phys;
+	void *ret;
+
+	/* Align the allocation to the Xen page size */
+	size = 1UL << (order + XEN_PAGE_SHIFT);
+
+	ret = (void *)__get_free_pages(flags, get_order(size));
+	if (!ret)
+		return ret;
+	phys = virt_to_phys(ret);
+
+	*dma_handle = xen_phys_to_dma(dev, phys);
+
+	if (xen_create_contiguous_region(phys, order, fls64(dma_mask),
+			dma_handle) != 0)
+		goto out_free_pages;
+	SetPageXenRemapped(virt_to_page(ret));
+
+	memset(ret, 0, size);
+	return ret;
+
+out_free_pages:
+	free_pages((unsigned long)ret, get_order(size));
+	return NULL;
+}
+
+static void
+xen_phy_free_coherent(struct device *dev, size_t size, void *vaddr,
+		      dma_addr_t dma_handle, unsigned long attrs)
+{
+	phys_addr_t phys = virt_to_phys(vaddr);
+	int order = get_order(size);
+
+	/* Convert the size to actually allocated. */
+	size = 1UL << (order + XEN_PAGE_SHIFT);
+
+	if (TestClearPageXenRemapped(virt_to_page(vaddr)))
+		xen_destroy_contiguous_region(phys, order);
+	free_pages((unsigned long)vaddr, get_order(size));
+}
+
+const struct dma_map_ops xen_phy_dma_ops = {
+	.alloc = xen_phy_alloc_coherent,
+	.free = xen_phy_free_coherent,
+};
+EXPORT_SYMBOL_GPL(xen_phy_dma_ops);
diff --git a/include/xen/phy-dma-ops.h b/include/xen/phy-dma-ops.h
new file mode 100644
index 000000000000..603ee61f899e
--- /dev/null
+++ b/include/xen/phy-dma-ops.h
@@ -0,0 +1,10 @@
+/* SPDX-License-Identifier: GPL-2.0 */
+#ifndef __LINUX_PHY_DMA_OPS_H
+#define __LINUX_PHY_DMA_OPS_H
+
+#include <linux/dma-direct.h>
+#include <linux/dma-map-ops.h>
+
+extern const struct dma_map_ops xen_phy_dma_ops;
+
+#endif /* __LINUX_PHY_DMA_OPS_H */
-- 
2.17.1

